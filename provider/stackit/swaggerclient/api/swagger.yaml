openapi: 3.0.1
info:
  title: STACKIT DNS API
  description: This api provides dns
  termsOfService: https://stackit.de/en/imprint
  contact:
    name: stackit-dns
    email: stackit-dns@mail.schwarz
  version: "1.0"
servers:
- url: https://api.dns.stackit.cloud
  description: prod
  x-stackit-stage: prd
- url: https://api.stg.dns.stackit.cloud
  description: qa
  x-stackit-stage: qa
- url: https://api.dev.dns.stackit.cloud
  description: dev
  x-stackit-stage: dev
security:
- bearerAuth: []
paths:
  /healthz:
    get:
      tags:
      - health
      summary: Health route
      description: Health route
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
      x-stackit-authorization:
        disabled: true
      x-stackit-signer:
        audience:
        - stackit-dns
        inject-email: false
  /v1/projects/{projectId}/zones:
    get:
      tags:
      - zone
      summary: All get selected zones
      description: All zone
      parameters:
      - name: projectId
        in: path
        description: project id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: page
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: pageSize
        in: query
        description: page size
        required: false
        style: form
        explode: true
        schema:
          maximum: 10000
          minimum: 1
          type: integer
          default: 100
      - name: "dnsName[eq]"
        in: query
        description: filter dns name equal
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "dnsName[like]"
        in: query
        description: filter dns name like
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "type[eq]"
        in: query
        description: filter type
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - primary
          - secondary
      - name: "primaryNameServer[eq]"
        in: query
        description: filter primary name server equal
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "primaryNameServer[like]"
        in: query
        description: filter primary name server like
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "isReverseZone[eq]"
        in: query
        description: filter reverse zone equal
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: "active[eq]"
        in: query
        description: filter active equal
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: "created[gt]"
        in: query
        description: filter created greater with utc timestamp
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "created[lt]"
        in: query
        description: filter created lesser with utc timestamp
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "created[gte]"
        in: query
        description: filter created greater equal with utc timestamp
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "created[lte]"
        in: query
        description: filter created lesser equal with utc timestamp
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "orderBy[dnsName]"
        in: query
        description: order by dns name
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ASC
          - DESC
      - name: "orderBy[created]"
        in: query
        description: order by created
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ASC
          - DESC
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zone.ResponseZoneAll'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "502":
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
      x-stackit-authorization:
        actions:
        - project.read
        resource-id: projectId
        resource-id-type: dynamic
        resource-type: project
      x-stackit-signer:
        audience:
        - dns
        inject-email: false
    post:
      tags:
      - zone
      summary: Post create a new zone
      description: Post zone create a new zone
      parameters:
      - name: projectId
        in: path
        description: project id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: zone to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/zone.ZonePost'
        required: true
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zone.ResponseZone'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "502":
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
      x-stackit-authorization:
        actions:
        - project.resource.write
        resource-id: projectId
        resource-id-type: dynamic
        resource-type: project
      x-stackit-signer:
        audience:
        - dns
        inject-email: false
      x-codegen-request-body-name: data
  /v1/projects/{projectId}/zones/{zoneId}:
    get:
      tags:
      - zone
      summary: Get a single zone
      description: Get zone
      parameters:
      - name: projectId
        in: path
        description: project id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: zoneId
        in: path
        description: zone id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zone.ResponseZone'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "502":
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
      x-stackit-authorization:
        actions:
        - project.read
        resource-id: projectId
        resource-id-type: dynamic
        resource-type: project
      x-stackit-signer:
        audience:
        - dns
        inject-email: false
    put:
      tags:
      - zone
      summary: Put update an existing zone
      description: Put update an existing zone
      parameters:
      - name: projectId
        in: path
        description: project id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: zoneId
        in: path
        description: zone id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: zone to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domain.UpdateZone'
        required: true
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zone.ResponseZone'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "502":
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
      x-stackit-authorization:
        actions:
        - project.resource.write
        resource-id: projectId
        resource-id-type: dynamic
        resource-type: project
      x-stackit-signer:
        audience:
        - dns
        inject-email: false
      x-codegen-request-body-name: data
    delete:
      tags:
      - zone
      summary: Delete delete a zone
      description: Delete delete a zone
      parameters:
      - name: projectId
        in: path
        description: project id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: zoneId
        in: path
        description: zone id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "502":
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
      x-stackit-authorization:
        actions:
        - project.resource.write
        resource-id: projectId
        resource-id-type: dynamic
        resource-type: project
      x-stackit-signer:
        audience:
        - dns
        inject-email: false
  /v1/projects/{projectId}/zones/{zoneId}/restores:
    post:
      tags:
      - zone
      summary: Restore  an inactive zone but will not restore the record sets
      description: Restore  an inactive zone but will not restore the record sets
      parameters:
      - name: projectId
        in: path
        description: project id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: zoneId
        in: path
        description: zone id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "502":
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
      x-stackit-authorization:
        actions:
        - project.resource.write
        resource-id: projectId
        resource-id-type: dynamic
        resource-type: project
      x-stackit-signer:
        audience:
        - dns
        inject-email: false
  /v1/projects/{projectId}/zones/{zoneId}/rrsets:
    get:
      tags:
      - record-set
      summary: All get selected RRSets
      description: All RRSet
      parameters:
      - name: projectId
        in: path
        description: project id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: page
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: pageSize
        in: query
        description: page size
        required: false
        style: form
        explode: true
        schema:
          maximum: 10000
          minimum: 1
          type: integer
          default: 100
      - name: "name[eq]"
        in: query
        description: filter name equal
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "name[like]"
        in: query
        description: filter name like
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "type[eq]"
        in: query
        description: filter type
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - A
          - AAAA
          - SOA
          - CNAME
          - NS
          - MX
          - TXT
          - SRV
          - PTR
          - ALIAS
          - DNAME
          - CAA
      - name: "active[eq]"
        in: query
        description: filter active equal
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: "created[gt]"
        in: query
        description: filter created greater with utc timestamp
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "created[lt]"
        in: query
        description: filter created lesser with utc timestamp
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "created[gte]"
        in: query
        description: filter created greater equal with utc timestamp
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "created[lte]"
        in: query
        description: filter created lesser equal with utc timestamp
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: "orderBy[name]"
        in: query
        description: order by name
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ASC
          - DESC
      - name: "orderBy[created]"
        in: query
        description: order by created
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - ASC
          - DESC
      - name: zoneId
        in: path
        description: zone id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rrset.ResponseRRSetAll'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "502":
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
      x-stackit-authorization:
        actions:
        - project.read
        resource-id: projectId
        resource-id-type: dynamic
        resource-type: project
      x-stackit-signer:
        audience:
        - dns
        inject-email: false
    post:
      tags:
      - record-set
      summary: Post record set
      description: Post record set
      parameters:
      - name: projectId
        in: path
        description: project id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: zoneId
        in: path
        description: zone id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: record set to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rrset.RRSetPost'
        required: true
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rrset.ResponseRRSet'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "502":
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
      x-stackit-authorization:
        actions:
        - project.resource.write
        resource-id: projectId
        resource-id-type: dynamic
        resource-type: project
      x-stackit-signer:
        audience:
        - dns
        inject-email: false
      x-codegen-request-body-name: data
  /v1/projects/{projectId}/zones/{zoneId}/rrsets/{rrSetId}:
    get:
      tags:
      - record-set
      summary: Get a single rrset
      description: Get rrset
      parameters:
      - name: projectId
        in: path
        description: project id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: zoneId
        in: path
        description: zone id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: rrSetId
        in: path
        description: record set id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rrset.ResponseRRSet'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "502":
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
      x-stackit-authorization:
        actions:
        - project.read
        resource-id: projectId
        resource-id-type: dynamic
        resource-type: project
      x-stackit-signer:
        audience:
        - stackit-dns
        inject-email: false
    delete:
      tags:
      - record-set
      summary: Delete a record set
      description: Delete a record set
      parameters:
      - name: projectId
        in: path
        description: project id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: zoneId
        in: path
        description: zone id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: rrSetId
        in: path
        description: record set id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "502":
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
      x-stackit-authorization:
        actions:
        - project.resource.write
        resource-id: projectId
        resource-id-type: dynamic
        resource-type: project
      x-stackit-signer:
        audience:
        - dns
        inject-email: false
    patch:
      tags:
      - record-set
      summary: Patch updates a record set
      description: Patch record set
      parameters:
      - name: projectId
        in: path
        description: project id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: zoneId
        in: path
        description: zone id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: rrSetId
        in: path
        description: record set id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: record set to patch
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rrset.RRSetPatch'
        required: true
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rrset.ResponseRRSet'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "502":
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
      x-stackit-authorization:
        actions:
        - project.resource.write
        resource-id: projectId
        resource-id-type: dynamic
        resource-type: project
      x-stackit-signer:
        audience:
        - dns
        inject-email: false
      x-codegen-request-body-name: data
  /v1/projects/{projectId}/zones/{zoneId}/rrsets/{rrSetId}/records:
    patch:
      tags:
      - record-set
      summary: PatchRecords updates a record in a rrset
      description: PatchRecords rrset updates a record in a rrset
      parameters:
      - name: projectId
        in: path
        description: project id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: zoneId
        in: path
        description: zone id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: rrSetId
        in: path
        description: record set id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: rrset to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rrset.RecordPatch'
        required: true
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rrset.ResponseRRSet'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "502":
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
      x-stackit-authorization:
        actions:
        - project.resource.write
        resource-id: projectId
        resource-id-type: dynamic
        resource-type: project
      x-stackit-signer:
        audience:
        - dns
        inject-email: false
      x-codegen-request-body-name: data
  /v1/projects/{projectId}/zones/{zoneId}/rrsets/{rrSetId}/restores:
    post:
      tags:
      - record-set
      summary: Restore record set
      description: Restore record set
      parameters:
      - name: projectId
        in: path
        description: project id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: zoneId
        in: path
        description: zone id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: rrSetId
        in: path
        description: record set id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
        "502":
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serializer.Message'
      x-stackit-authorization:
        actions:
        - project.resource.write
        resource-id: projectId
        resource-id-type: dynamic
        resource-type: project
      x-stackit-signer:
        audience:
        - dns
        inject-email: false
components:
  schemas:
    domain.RRSet:
      required:
      - id
      - name
      - records
      - state
      - ttl
      - type
      type: object
      properties:
        active:
          type: boolean
          description: if the record set is active or not
          example: true
        comment:
          maxLength: 255
          type: string
          description: comment
          example: This is a comment
        error:
          maxLength: 2000
          type: string
          description: Error shows error in case create/update/delete failed
          example: error message
        id:
          type: string
          description: rr set id
          example: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
        name:
          maxLength: 63
          minLength: 1
          type: string
          description: name of the record which should be a valid domain according
            to rfc1035 Section 2.3.4
          example: example.com.
        records:
          type: array
          description: records
          items:
            $ref: '#/components/schemas/domain.Record'
        state:
          type: string
          description: record set state
          example: CREATE_SUCCEEDED
          enum:
          - CREATING
          - CREATE_SUCCEEDED
          - CREATE_FAILED
          - DELETING
          - DELETE_SUCCEEDED
          - DELETE_FAILED
          - UPDATING
          - UPDATE_SUCCEEDED
          - UPDATE_FAILED
        ttl:
          maximum: 99999999
          type: integer
          description: time to live
          example: 3600
        type:
          type: string
          description: record set type
          example: SOA
          enum:
          - A
          - AAAA
          - SOA
          - CNAME
          - NS
          - MX
          - TXT
          - SRV
          - PTR
          - ALIAS
          - DNAME
          - CAA
      description: RRSet.
      example:
        records:
        - id: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
          content: ns1.stackit.com. hostmaster.stackit.com. 2022111103 43200 7200
            1209600 86400
        - id: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
          content: ns1.stackit.com. hostmaster.stackit.com. 2022111103 43200 7200
            1209600 86400
        name: example.com.
        active: true
        comment: This is a comment
        id: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
        state: CREATE_SUCCEEDED
        error: error message
        type: SOA
        ttl: 3600
    domain.Record:
      required:
      - content
      - id
      type: object
      properties:
        content:
          maxLength: 64000
          minLength: 1
          type: string
          description: content of the record
          example: ns1.stackit.com. hostmaster.stackit.com. 2022111103 43200 7200
            1209600 86400
        id:
          type: string
          description: rr set id
          example: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
      description: Record.
      example:
        id: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
        content: ns1.stackit.com. hostmaster.stackit.com. 2022111103 43200 7200 1209600
          86400
    domain.UpdateZone:
      required:
      - name
      type: object
      properties:
        acl:
          maxLength: 2000
          type: string
          description: access control list
          example: "0.0.0.0/0,::/0"
          default: "0.0.0.0/0,::/0"
        contactEmail:
          maxLength: 255
          type: string
          description: contact e-mail for the zone
          example: example@mail.com
          default: example@mail.com
        defaultTTL:
          type: integer
          description: default time to live
          example: 3600
        description:
          maxLength: 1024
          type: string
          description: description of the zone
          example: this is our example zone
          default: '*'
        expireTime:
          type: integer
          description: expire time
          example: 1209600
        name:
          maxLength: 63
          minLength: 1
          type: string
          description: user given name
          example: test
        refreshTime:
          type: integer
          description: refresh time
          example: 3600
        retryTime:
          type: integer
          description: retry time
          example: 600
    domain.Zone:
      required:
      - acl
      - defaultTTL
      - description
      - dnsName
      - expireTime
      - id
      - name
      - negativeCache
      - primaryNameServer
      - refreshTime
      - retryTime
      - serialNumber
      - state
      - type
      - visibility
      type: object
      properties:
        acl:
          type: string
          description: access control list
          example: "0.0.0.0/0,::/0"
        contactEmail:
          maxLength: 255
          type: string
          description: contact email from soa record
          example: example.mail.at.
        defaultTTL:
          maximum: 99999999
          type: integer
          description: default time to live
          example: 3600
        description:
          maxLength: 1024
          type: string
          description: description of the zone
          example: this is our example zone
        dnsName:
          maxLength: 253
          minLength: 1
          type: string
          description: zone name
          example: example.com
        error:
          maxLength: 2000
          type: string
          description: Error shows error in case create/update/delete failed
          example: error message
        expireTime:
          maximum: 99999999
          type: integer
          description: expire time
          example: 1209600
        id:
          type: string
          description: zone id
          example: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
        isReverseZone:
          type: boolean
          description: if the zone is a reverse zone or not
          example: false
        name:
          maxLength: 63
          minLength: 1
          type: string
          description: user given name
          example: test
        negativeCache:
          maximum: 99999999
          type: integer
          description: negative caching
          example: 300
        primaries:
          type: array
          description: primary name server for secondary zone
          example:
          - 1.2.3.4
          items:
            type: string
        primaryNameServer:
          type: string
          description: primary name server. FQDN
          example: example.com
        recordCount:
          minimum: 0
          type: integer
          description: record count how many records are in the zone
          example: 300
        refreshTime:
          maximum: 99999999
          type: integer
          description: refresh time
          example: 3600
        retryTime:
          maximum: 99999999
          type: integer
          description: retry time
          example: 600
        serialNumber:
          type: integer
          description: serial number
          example: 2022111400
        state:
          type: string
          description: zone state
          example: CREATE_SUCCEEDED
          enum:
          - CREATING
          - CREATE_SUCCEEDED
          - CREATE_FAILED
          - DELETING
          - DELETE_SUCCEEDED
          - DELETE_FAILED
          - UPDATING
          - UPDATE_SUCCEEDED
          - UPDATE_FAILED
        type:
          type: string
          description: zone type
          example: primary
          enum:
          - primary
          - secondary
        visibility:
          type: string
          description: visibility of the zone
          example: public
          enum:
          - public
      description: Zone.
      example:
        isReverseZone: false
        negativeCache: 300
        serialNumber: 2022111400
        visibility: public
        contactEmail: example.mail.at.
        recordCount: 300
        refreshTime: 3600
        primaryNameServer: example.com
        description: this is our example zone
        dnsName: example.com
        retryTime: 600
        acl: "0.0.0.0/0,::/0"
        error: error message
        type: primary
        primaries:
        - 1.2.3.4
        expireTime: 1209600
        defaultTTL: 3600
        name: test
        id: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
        state: CREATE_SUCCEEDED
    rrset.RRSetPatch:
      type: object
      properties:
        comment:
          maxLength: 255
          type: string
          description: user comment
          example: this is our example comment
          default: '*'
        name:
          maxLength: 63
          minLength: 1
          type: string
          description: rfc1035 Section 2.3.4
          example: example.com.
        records:
          type: array
          description: records
          items:
            $ref: '#/components/schemas/rrset.RecordPost'
        ttl:
          maximum: 99999999
          type: integer
          description: time to live
          example: 3600
      description: RRSetPatch for rr patch set info.
    rrset.RRSetPost:
      required:
      - name
      - records
      - ttl
      - type
      type: object
      properties:
        comment:
          maxLength: 255
          type: string
          description: user comment
          example: this is our example comment
          default: '*'
        name:
          maxLength: 63
          minLength: 1
          type: string
          description: name of the record which should be a valid domain according
            to rfc1035 Section 2.3.4
          example: example.com.
        records:
          type: array
          description: records
          items:
            $ref: '#/components/schemas/rrset.RecordPost'
        ttl:
          maximum: 99999999
          type: integer
          description: time to live
          example: 3600
        type:
          type: string
          description: record set type
          example: SOA
          enum:
          - A
          - AAAA
          - SOA
          - CNAME
          - NS
          - MX
          - TXT
          - SRV
          - PTR
          - ALIAS
          - DNAME
          - CAA
      description: RRSetPost for rr set info.
    rrset.RecordPatch:
      required:
      - action
      - records
      type: object
      properties:
        action:
          type: string
          enum:
          - add
          - delete
        records:
          type: array
          description: records
          items:
            $ref: '#/components/schemas/rrset.RecordPost'
      description: RecordPatch for record patch in record set.
    rrset.RecordPost:
      required:
      - content
      type: object
      properties:
        content:
          maxLength: 64000
          minLength: 1
          type: string
          description: content of the record
          example: ns1.stackit.com. hostmaster.stackit.com. 2022111103 43200 7200
            1209600 86400
      description: RecordPost for rr set info.
    rrset.ResponseRRSet:
      required:
      - rrset
      type: object
      properties:
        message:
          type: string
          example: Success
        rrset:
          $ref: '#/components/schemas/domain.RRSet'
      description: ResponseRRSet for rr set info.
      example:
        message: Success
        rrset:
          records:
          - id: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
            content: ns1.stackit.com. hostmaster.stackit.com. 2022111103 43200 7200
              1209600 86400
          - id: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
            content: ns1.stackit.com. hostmaster.stackit.com. 2022111103 43200 7200
              1209600 86400
          name: example.com.
          active: true
          comment: This is a comment
          id: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
          state: CREATE_SUCCEEDED
          error: error message
          type: SOA
          ttl: 3600
    rrset.ResponseRRSetAll:
      required:
      - itemsPerPage
      - rrSets
      - totalItems
      - totalPages
      type: object
      properties:
        itemsPerPage:
          type: integer
        message:
          type: string
          example: Success
        rrSets:
          type: array
          items:
            $ref: '#/components/schemas/domain.RRSet'
        totalItems:
          type: integer
        totalPages:
          type: integer
      description: ResponseRRSetAll.
      example:
        totalItems: 6
        itemsPerPage: 0
        rrSets:
        - records:
          - id: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
            content: ns1.stackit.com. hostmaster.stackit.com. 2022111103 43200 7200
              1209600 86400
          - id: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
            content: ns1.stackit.com. hostmaster.stackit.com. 2022111103 43200 7200
              1209600 86400
          name: example.com.
          active: true
          comment: This is a comment
          id: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
          state: CREATE_SUCCEEDED
          error: error message
          type: SOA
          ttl: 3600
        - records:
          - id: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
            content: ns1.stackit.com. hostmaster.stackit.com. 2022111103 43200 7200
              1209600 86400
          - id: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
            content: ns1.stackit.com. hostmaster.stackit.com. 2022111103 43200 7200
              1209600 86400
          name: example.com.
          active: true
          comment: This is a comment
          id: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
          state: CREATE_SUCCEEDED
          error: error message
          type: SOA
          ttl: 3600
        totalPages: 1
        message: Success
    serializer.Message:
      type: object
      properties:
        message:
          type: string
      example:
        message: message
    zone.ResponseZone:
      required:
      - zone
      type: object
      properties:
        message:
          type: string
          example: Success
        zone:
          $ref: '#/components/schemas/domain.Zone'
      description: ResponseZone for user info.
      example:
        zone:
          isReverseZone: false
          negativeCache: 300
          serialNumber: 2022111400
          visibility: public
          contactEmail: example.mail.at.
          recordCount: 300
          refreshTime: 3600
          primaryNameServer: example.com
          description: this is our example zone
          dnsName: example.com
          retryTime: 600
          acl: "0.0.0.0/0,::/0"
          error: error message
          type: primary
          primaries:
          - 1.2.3.4
          expireTime: 1209600
          defaultTTL: 3600
          name: test
          id: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
          state: CREATE_SUCCEEDED
        message: Success
    zone.ResponseZoneAll:
      required:
      - ItemsPerPage
      - totalItems
      - totalPages
      - zones
      type: object
      properties:
        ItemsPerPage:
          type: integer
        message:
          type: string
          example: Success
        totalItems:
          type: integer
        totalPages:
          type: integer
        zones:
          type: array
          items:
            $ref: '#/components/schemas/domain.Zone'
      description: ResponseZoneAll for filtered zones.
      example:
        totalItems: 6
        totalPages: 1
        ItemsPerPage: 0
        message: Success
        zones:
        - isReverseZone: false
          negativeCache: 300
          serialNumber: 2022111400
          visibility: public
          contactEmail: example.mail.at.
          recordCount: 300
          refreshTime: 3600
          primaryNameServer: example.com
          description: this is our example zone
          dnsName: example.com
          retryTime: 600
          acl: "0.0.0.0/0,::/0"
          error: error message
          type: primary
          primaries:
          - 1.2.3.4
          expireTime: 1209600
          defaultTTL: 3600
          name: test
          id: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
          state: CREATE_SUCCEEDED
        - isReverseZone: false
          negativeCache: 300
          serialNumber: 2022111400
          visibility: public
          contactEmail: example.mail.at.
          recordCount: 300
          refreshTime: 3600
          primaryNameServer: example.com
          description: this is our example zone
          dnsName: example.com
          retryTime: 600
          acl: "0.0.0.0/0,::/0"
          error: error message
          type: primary
          primaries:
          - 1.2.3.4
          expireTime: 1209600
          defaultTTL: 3600
          name: test
          id: 37403b63-86ce-41e9-9b0b-1d8c5b3b2b96
          state: CREATE_SUCCEEDED
    zone.ZonePost:
      required:
      - dnsName
      - name
      type: object
      properties:
        acl:
          maxLength: 2000
          type: string
          description: access control list
          example: "0.0.0.0/0,::/0"
          default: "0.0.0.0/0,::/0"
        contactEmail:
          maxLength: 255
          type: string
          description: contact e-mail for the zone
          example: example.at
          default: '*'
        defaultTTL:
          type: integer
          description: default time to live
          example: 3600
        description:
          maxLength: 1024
          type: string
          description: description of the zone
          example: this is our example zone
          default: '*'
        dnsName:
          maxLength: 253
          minLength: 1
          type: string
          description: zone name
          example: example.com
        expireTime:
          type: integer
          description: expire time
          example: 1209600
        isReverseZone:
          type: boolean
          description: if the zone is a reverse zone or not
          example: false
          default: false
        name:
          maxLength: 63
          minLength: 1
          type: string
          description: user given name
          example: test
        primaries:
          type: array
          description: primary name server for secondary zone
          example:
          - "[1.2.3.4]"
          items:
            type: string
        primaryNameServer:
          type: string
          description: primary name server. FQDN
          example: primary
        refreshTime:
          type: integer
          description: refresh time
          example: 3600
        retryTime:
          type: integer
          description: retry time
          example: 600
        type:
          type: string
          description: zone type
          example: primary
          default: primary
          enum:
          - primary
          - secondary
      description: Zone to create.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
x-stackit-api:
  type: stackit
x-stackit-scope:
  visibility: public

// Code generated by gowsdl DO NOT EDIT.

package dynsoap

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type ErrorResponse ErrorResponseType

type GetJobRequest GetJobRequestType

type GetJobResponse GetJobResponseType

type SessionLoginRequest SessionLoginRequestType

type SessionLoginResponse SessionLoginResponseType

type SessionLogoutRequest SessionLogoutRequestType

type SessionLogoutResponse SessionLogoutResponseType

type SessionIsAliveRequest SessionIsAliveRequestType

type SessionIsAliveResponse SessionIsAliveResponseType

type SessionKeepAliveRequest SessionKeepAliveRequestType

type SessionKeepAliveResponse SessionKeepAliveResponseType

type ScopeInRequest ScopeInRequestType

type ScopeInResponse ScopeInResponseType

type ScopeAsRequest ScopeAsRequestType

type ScopeAsResponse ScopeAsResponseType

type UnscopeRequest UnscopeRequestType

type UnscopeResponse UnscopeResponseType

type GetQueryStatsRequest GetQueryStatsRequestType

type GetQueryStatsResponse GetQueryStatsResponseType

type CreateGeoRequest CreateGeoRequestType

type CreateGeoResponse CreateGeoResponseType

type UpdateGeoRequest UpdateGeoRequestType

type UpdateGeoResponse UpdateGeoResponseType

type GetGeosRequest GetGeosRequestType

type GetGeosResponse GetGeosResponseType

type GetOneGeoRequest GetOneGeoRequestType

type GetOneGeoResponse GetOneGeoResponseType

type DeleteOneGeoRequest DeleteOneGeoRequestType

type DeleteOneGeoResponse DeleteOneGeoResponseType

type ActivateGeoRequest ActivateGeoRequestType

type ActivateGeoResponse ActivateGeoResponseType

type DeactivateGeoRequest DeactivateGeoRequestType

type DeactivateGeoResponse DeactivateGeoResponseType

type CreateGeoRegionGroupRequest CreateGeoRegionGroupRequestType

type CreateGeoRegionGroupResponse CreateGeoRegionGroupResponseType

type UpdateGeoRegionGroupRequest UpdateGeoRegionGroupRequestType

type UpdateGeoRegionGroupResponse UpdateGeoRegionGroupResponseType

type DeleteOneGeoRegionGroupRequest DeleteOneGeoRegionGroupRequestType

type DeleteOneGeoRegionGroupResponse DeleteOneGeoRegionGroupResponseType

type GetGeoRegionGroupsRequest GetGeoRegionGroupsRequestType

type GetGeoRegionGroupsResponse GetGeoRegionGroupsResponseType

type GetOneGeoRegionGroupRequest GetOneGeoRegionGroupRequestType

type GetOneGeoRegionGroupResponse GetOneGeoRegionGroupResponseType

type CreateGeoNodeRequest CreateGeoNodeRequestType

type CreateGeoNodeResponse CreateGeoNodeResponseType

type DeleteOneGeoNodeRequest DeleteOneGeoNodeRequestType

type DeleteOneGeoNodeResponse DeleteOneGeoNodeResponseType

type GetGeoNodesRequest GetGeoNodesRequestType

type GetGeoNodesResponse GetGeoNodesResponseType

type CreateDSFRequest CreateDSFRequestType

type CreateDSFResponse CreateDSFResponseType

type UpdateDSFRequest UpdateDSFRequestType

type UpdateDSFResponse UpdateDSFResponseType

type GetDSFsRequest GetDSFsRequestType

type GetDSFsResponse GetDSFsResponseType

type GetDSFNotifiersRequest GetDSFNotifiersRequestType

type GetDSFNotifiersResponse GetDSFNotifiersResponseType

type DeleteOneDSFRequest DeleteOneDSFRequestType

type DeleteOneDSFResponse DeleteOneDSFResponseType

type GetOneDSFRequest GetOneDSFRequestType

type GetOneDSFResponse GetOneDSFResponseType

type RevertDSFRequest RevertDSFRequestType

type RevertDSFResponse RevertDSFResponseType

type PublishDSFRequest PublishDSFRequestType

type PublishDSFResponse PublishDSFResponseType

type AddDSFNotifierRequest AddDSFNotifierRequestType

type AddDSFNotifierResponse AddDSFNotifierResponseType

type RemoveDSFNotifierRequest RemoveDSFNotifierRequestType

type RemoveDSFNotifierResponse RemoveDSFNotifierResponseType

type CreateDSFRulesetRequest CreateDSFRulesetRequestType

type CreateDSFRulesetResponse CreateDSFRulesetResponseType

type UpdateDSFRulesetRequest UpdateDSFRulesetRequestType

type UpdateDSFRulesetResponse UpdateDSFRulesetResponseType

type GetDSFRulesetsRequest GetDSFRulesetsRequestType

type GetDSFRulesetsResponse GetDSFRulesetsResponseType

type GetOneDSFRulesetRequest GetOneDSFRulesetRequestType

type GetOneDSFRulesetResponse GetOneDSFRulesetResponseType

type DeleteOneDSFRulesetRequest DeleteOneDSFRulesetRequestType

type DeleteOneDSFRulesetResponse DeleteOneDSFRulesetResponseType

type CreateDSFResponsePoolRequest CreateDSFResponsePoolRequestType

type CreateDSFResponsePoolResponse CreateDSFResponsePoolResponseType

type UpdateDSFResponsePoolRequest UpdateDSFResponsePoolRequestType

type UpdateDSFResponsePoolResponse UpdateDSFResponsePoolResponseType

type GetDSFResponsePoolsRequest GetDSFResponsePoolsRequestType

type GetDSFResponsePoolsResponse GetDSFResponsePoolsResponseType

type GetOneDSFResponsePoolRequest GetOneDSFResponsePoolRequestType

type GetOneDSFResponsePoolResponse GetOneDSFResponsePoolResponseType

type DeleteOneDSFResponsePoolRequest DeleteOneDSFResponsePoolRequestType

type DeleteOneDSFResponsePoolResponse DeleteOneDSFResponsePoolResponseType

type CreateDSFRecordSetFailoverChainRequest CreateDSFRecordSetFailoverChainRequestType

type CreateDSFRecordSetFailoverChainResponse CreateDSFRecordSetFailoverChainResponseType

type UpdateDSFRecordSetFailoverChainRequest UpdateDSFRecordSetFailoverChainRequestType

type UpdateDSFRecordSetFailoverChainResponse UpdateDSFRecordSetFailoverChainResponseType

type GetDSFRecordSetFailoverChainsRequest GetDSFRecordSetFailoverChainsRequestType

type GetDSFRecordSetFailoverChainsResponse GetDSFRecordSetFailoverChainsResponseType

type GetOneDSFRecordSetFailoverChainRequest GetOneDSFRecordSetFailoverChainRequestType

type GetOneDSFRecordSetFailoverChainResponse GetOneDSFRecordSetFailoverChainResponseType

type DeleteOneDSFRecordSetFailoverChainRequest DeleteOneDSFRecordSetFailoverChainRequestType

type DeleteOneDSFRecordSetFailoverChainResponse DeleteOneDSFRecordSetFailoverChainResponseType

type CreateDSFRecordSetRequest CreateDSFRecordSetRequestType

type CreateDSFRecordSetResponse CreateDSFRecordSetResponseType

type UpdateDSFRecordSetRequest UpdateDSFRecordSetRequestType

type UpdateDSFRecordSetResponse UpdateDSFRecordSetResponseType

type GetOneDSFRecordSetRequest GetOneDSFRecordSetRequestType

type GetOneDSFRecordSetResponse GetOneDSFRecordSetResponseType

type GetDSFRecordSetsRequest GetDSFRecordSetsRequestType

type GetDSFRecordSetsResponse GetDSFRecordSetsResponseType

type DeleteOneDSFRecordSetRequest DeleteOneDSFRecordSetRequestType

type DeleteOneDSFRecordSetResponse DeleteOneDSFRecordSetResponseType

type CreateDSFRecordRequest CreateDSFRecordRequestType

type CreateDSFRecordResponse CreateDSFRecordResponseType

type UpdateDSFRecordRequest UpdateDSFRecordRequestType

type UpdateDSFRecordResponse UpdateDSFRecordResponseType

type GetOneDSFRecordRequest GetOneDSFRecordRequestType

type GetOneDSFRecordResponse GetOneDSFRecordResponseType

type GetDSFRecordsRequest GetDSFRecordsRequestType

type GetDSFRecordsResponse GetDSFRecordsResponseType

type DeleteOneDSFRecordRequest DeleteOneDSFRecordRequestType

type DeleteOneDSFRecordResponse DeleteOneDSFRecordResponseType

type AddDSFNodeRequest AddDSFNodeRequestType

type AddDSFNodeResponse AddDSFNodeResponseType

type UpdateDSFNodesRequest UpdateDSFNodesRequestType

type UpdateDSFNodesResponse UpdateDSFNodesResponseType

type GetDSFNodesRequest GetDSFNodesRequestType

type GetDSFNodesResponse GetDSFNodesResponseType

type DeleteOneDSFNodeRequest DeleteOneDSFNodeRequestType

type DeleteOneDSFNodeResponse DeleteOneDSFNodeResponseType

type CreateDSFMonitorRequest CreateDSFMonitorRequestType

type CreateDSFMonitorResponse CreateDSFMonitorResponseType

type UpdateDSFMonitorRequest UpdateDSFMonitorRequestType

type UpdateDSFMonitorResponse UpdateDSFMonitorResponseType

type GetOneDSFMonitorRequest GetOneDSFMonitorRequestType

type GetOneDSFMonitorResponse GetOneDSFMonitorResponseType

type GetDSFMonitorsRequest GetDSFMonitorsRequestType

type GetDSFMonitorsResponse GetDSFMonitorsResponseType

type DeleteOneDSFMonitorRequest DeleteOneDSFMonitorRequestType

type DeleteOneDSFMonitorResponse DeleteOneDSFMonitorResponseType

type AddDSFMonitorNotifierRequest AddDSFMonitorNotifierRequestType

type AddDSFMonitorNotifierResponse AddDSFMonitorNotifierResponseType

type GetDSFMonitorSitesRequest GetDSFMonitorSitesRequestType

type GetDSFMonitorSitesResponse GetDSFMonitorSitesResponseType

type CreateNotifierRequest CreateNotifierRequestType

type CreateNotifierResponse CreateNotifierResponseType

type UpdateNotifierRequest UpdateNotifierRequestType

type UpdateNotifierResponse UpdateNotifierResponseType

type GetOneNotifierRequest GetOneNotifierRequestType

type GetOneNotifierResponse GetOneNotifierResponseType

type GetNotifiersRequest GetNotifiersRequestType

type GetNotifiersResponse GetNotifiersResponseType

type DeleteOneNotifierRequest DeleteOneNotifierRequestType

type DeleteOneNotifierResponse DeleteOneNotifierResponseType

type CreateConfigLimitRequest CreateConfigLimitRequestType

type CreateConfigLimitResponse CreateConfigLimitResponseType

type GetOneConfigLimitRequest GetOneConfigLimitRequestType

type GetOneConfigLimitResponse GetOneConfigLimitResponseType

type GetConfigLimitsRequest GetConfigLimitsRequestType

type GetConfigLimitsResponse GetConfigLimitsResponseType

type UpdateConfigLimitRequest UpdateConfigLimitRequestType

type UpdateConfigLimitResponse UpdateConfigLimitResponseType

type DeleteOneConfigLimitRequest DeleteOneConfigLimitRequestType

type DeleteOneConfigLimitResponse DeleteOneConfigLimitResponseType

type CreatePermissionGroupRequest CreatePermissionGroupRequestType

type CreatePermissionGroupResponse CreatePermissionGroupResponseType

type GetOnePermissionGroupRequest GetOnePermissionGroupRequestType

type GetOnePermissionGroupResponse GetOnePermissionGroupResponseType

type GetPermissionGroupsRequest GetPermissionGroupsRequestType

type GetPermissionGroupsResponse GetPermissionGroupsResponseType

type DeleteOnePermissionGroupRequest DeleteOnePermissionGroupRequestType

type DeleteOnePermissionGroupResponse DeleteOnePermissionGroupResponseType

type UpdatePermissionGroupRequest UpdatePermissionGroupRequestType

type UpdatePermissionGroupResponse UpdatePermissionGroupResponseType

type GetCustomerPermissionsRequest GetCustomerPermissionsRequestType

type GetCustomerPermissionsResponse GetCustomerPermissionsResponseType

type GetUserPermissionsRequest GetUserPermissionsRequestType

type GetUserPermissionsResponse GetUserPermissionsResponseType

type CheckPermissionsRequest CheckPermissionsRequestType

type CheckPermissionsResponse CheckPermissionsResponseType

type AddPermissionGroupUsersRequest AddPermissionGroupUsersRequestType

type AddPermissionGroupUsersResponse AddPermissionGroupUsersResponseType

type SetPermissionGroupUsersRequest SetPermissionGroupUsersRequestType

type SetPermissionGroupUsersResponse SetPermissionGroupUsersResponseType

type RemovePermissionGroupUsersRequest RemovePermissionGroupUsersRequestType

type RemovePermissionGroupUsersResponse RemovePermissionGroupUsersResponseType

type AddPermissionGroupSubgroupsRequest AddPermissionGroupSubgroupsRequestType

type AddPermissionGroupSubgroupsResponse AddPermissionGroupSubgroupsResponseType

type SetPermissionGroupSubgroupsRequest SetPermissionGroupSubgroupsRequestType

type SetPermissionGroupSubgroupsResponse SetPermissionGroupSubgroupsResponseType

type RemovePermissionGroupSubgroupsRequest RemovePermissionGroupSubgroupsRequestType

type RemovePermissionGroupSubgroupsResponse RemovePermissionGroupSubgroupsResponseType

type AddPermissionGroupPermissionsRequest AddPermissionGroupPermissionsRequestType

type AddPermissionGroupPermissionsResponse AddPermissionGroupPermissionsResponseType

type SetPermissionGroupPermissionsRequest SetPermissionGroupPermissionsRequestType

type SetPermissionGroupPermissionsResponse SetPermissionGroupPermissionsResponseType

type RemovePermissionGroupPermissionsRequest RemovePermissionGroupPermissionsRequestType

type RemovePermissionGroupPermissionsResponse RemovePermissionGroupPermissionsResponseType

type AddPermissionGroupZonesRequest AddPermissionGroupZonesRequestType

type AddPermissionGroupZonesResponse AddPermissionGroupZonesResponseType

type SetPermissionGroupZonesRequest SetPermissionGroupZonesRequestType

type SetPermissionGroupZonesResponse SetPermissionGroupZonesResponseType

type RemovePermissionGroupZonesRequest RemovePermissionGroupZonesRequestType

type RemovePermissionGroupZonesResponse RemovePermissionGroupZonesResponseType

type AddUserGroupsRequest AddUserGroupsRequestType

type AddUserGroupsResponse AddUserGroupsResponseType

type SetUserGroupsRequest SetUserGroupsRequestType

type SetUserGroupsResponse SetUserGroupsResponseType

type RemoveUserGroupsRequest RemoveUserGroupsRequestType

type RemoveUserGroupsResponse RemoveUserGroupsResponseType

type AddUserZonesRequest AddUserZonesRequestType

type AddUserZonesResponse AddUserZonesResponseType

type SetUserZonesRequest SetUserZonesRequestType

type SetUserZonesResponse SetUserZonesResponseType

type RemoveUserZonesRequest RemoveUserZonesRequestType

type RemoveUserZonesResponse RemoveUserZonesResponseType

type AddUserPermissionsRequest AddUserPermissionsRequestType

type AddUserPermissionsResponse AddUserPermissionsResponseType

type SetUserPermissionsRequest SetUserPermissionsRequestType

type SetUserPermissionsResponse SetUserPermissionsResponseType

type RemoveUserPermissionsRequest RemoveUserPermissionsRequestType

type RemoveUserPermissionsResponse RemoveUserPermissionsResponseType

type AddUserForbidsRequest AddUserForbidsRequestType

type AddUserForbidsResponse AddUserForbidsResponseType

type SetUserForbidsRequest SetUserForbidsRequestType

type SetUserForbidsResponse SetUserForbidsResponseType

type RemoveUserForbidsRequest RemoveUserForbidsRequestType

type RemoveUserForbidsResponse RemoveUserForbidsResponseType

type AddCustomerPermissionsRequest AddCustomerPermissionsRequestType

type AddCustomerPermissionsResponse AddCustomerPermissionsResponseType

type SetCustomerPermissionsRequest SetCustomerPermissionsRequestType

type SetCustomerPermissionsResponse SetCustomerPermissionsResponseType

type RemoveCustomerPermissionsRequest RemoveCustomerPermissionsRequestType

type RemoveCustomerPermissionsResponse RemoveCustomerPermissionsResponseType

type AddCustomerForbidsRequest AddCustomerForbidsRequestType

type AddCustomerForbidsResponse AddCustomerForbidsResponseType

type SetCustomerForbidsRequest SetCustomerForbidsRequestType

type SetCustomerForbidsResponse SetCustomerForbidsResponseType

type RemoveCustomerForbidsRequest RemoveCustomerForbidsRequestType

type RemoveCustomerForbidsResponse RemoveCustomerForbidsResponseType

type GetHostStatsFlagsRequest GetHostStatsFlagsRequestType

type GetHostStatsFlagsResponse GetHostStatsFlagsResponseType

type SetHostStatsFlagsRequest SetHostStatsFlagsRequestType

type SetHostStatsFlagsResponse SetHostStatsFlagsResponseType

type CreateTSIGKeyRequest CreateTSIGKeyRequestType

type CreateTSIGKeyResponse CreateTSIGKeyResponseType

type GetOneTSIGKeyRequest GetOneTSIGKeyRequestType

type GetOneTSIGKeyResponse GetOneTSIGKeyResponseType

type GetTSIGKeysRequest GetTSIGKeysRequestType

type GetTSIGKeysResponse GetTSIGKeysResponseType

type UpdateTSIGKeyRequest UpdateTSIGKeyRequestType

type UpdateTSIGKeyResponse UpdateTSIGKeyResponseType

type DeleteOneTSIGKeyRequest DeleteOneTSIGKeyRequestType

type DeleteOneTSIGKeyResponse DeleteOneTSIGKeyResponseType

type CreateZoneRequest CreateZoneRequestType

type CreateZoneResponse CreateZoneResponseType

type GetOneZoneRequest GetOneZoneRequestType

type GetOneZoneResponse GetOneZoneResponseType

type GetZonesRequest GetZonesRequestType

type GetZonesResponse GetZonesResponseType

type DeleteOneZoneRequest DeleteOneZoneRequestType

type DeleteOneZoneResponse DeleteOneZoneResponseType

type CreateSecondaryZoneRequest CreateSecondaryZoneRequestType

type CreateSecondaryZoneResponse CreateSecondaryZoneResponseType

type UpdateSecondaryRequest UpdateSecondaryRequestType

type UpdateSecondaryResponse UpdateSecondaryResponseType

type ActivateSecondaryRequest ActivateSecondaryRequestType

type ActivateSecondaryResponse ActivateSecondaryResponseType

type DeactivateSecondaryRequest DeactivateSecondaryRequestType

type DeactivateSecondaryResponse DeactivateSecondaryResponseType

type RetransferSecondaryRequest RetransferSecondaryRequestType

type RetransferSecondaryResponse RetransferSecondaryResponseType

type GetOneSecondaryRequest GetOneSecondaryRequestType

type GetOneSecondaryResponse GetOneSecondaryResponseType

type GetSecondariesRequest GetSecondariesRequestType

type GetSecondariesResponse GetSecondariesResponseType

type GetZoneApexRequest GetZoneApexRequestType

type GetZoneApexResponse GetZoneApexResponseType

type CreateARecordRequest CreateARecordRequestType

type CreateARecordResponse CreateARecordResponseType

type GetOneARecordRequest GetOneARecordRequestType

type GetOneARecordResponse GetOneARecordResponseType

type GetARecordsRequest GetARecordsRequestType

type GetARecordsResponse GetARecordsResponseType

type UpdateARecordRequest UpdateARecordRequestType

type UpdateARecordResponse UpdateARecordResponseType

type DeleteARecordsRequest DeleteARecordsRequestType

type DeleteARecordsResponse DeleteARecordsResponseType

type DeleteOneARecordRequest DeleteOneARecordRequestType

type DeleteOneARecordResponse DeleteOneARecordResponseType

type CreateAAAARecordRequest CreateAAAARecordRequestType

type CreateAAAARecordResponse CreateAAAARecordResponseType

type GetOneAAAARecordRequest GetOneAAAARecordRequestType

type GetOneAAAARecordResponse GetOneAAAARecordResponseType

type GetAAAARecordsRequest GetAAAARecordsRequestType

type GetAAAARecordsResponse GetAAAARecordsResponseType

type UpdateAAAARecordRequest UpdateAAAARecordRequestType

type UpdateAAAARecordResponse UpdateAAAARecordResponseType

type DeleteAAAARecordsRequest DeleteAAAARecordsRequestType

type DeleteAAAARecordsResponse DeleteAAAARecordsResponseType

type DeleteOneAAAARecordRequest DeleteOneAAAARecordRequestType

type DeleteOneAAAARecordResponse DeleteOneAAAARecordResponseType

type CreateALIASRecordRequest CreateALIASRecordRequestType

type CreateALIASRecordResponse CreateALIASRecordResponseType

type GetOneALIASRecordRequest GetOneALIASRecordRequestType

type GetOneALIASRecordResponse GetOneALIASRecordResponseType

type GetALIASRecordsRequest GetALIASRecordsRequestType

type GetALIASRecordsResponse GetALIASRecordsResponseType

type UpdateALIASRecordRequest UpdateALIASRecordRequestType

type UpdateALIASRecordResponse UpdateALIASRecordResponseType

type DeleteALIASRecordsRequest DeleteALIASRecordsRequestType

type DeleteALIASRecordsResponse DeleteALIASRecordsResponseType

type DeleteOneALIASRecordRequest DeleteOneALIASRecordRequestType

type DeleteOneALIASRecordResponse DeleteOneALIASRecordResponseType

type CreateCAARecordRequest CreateCAARecordRequestType

type CreateCAARecordResponse CreateCAARecordResponseType

type GetOneCAARecordRequest GetOneCAARecordRequestType

type GetOneCAARecordResponse GetOneCAARecordResponseType

type GetCAARecordsRequest GetCAARecordsRequestType

type GetCAARecordsResponse GetCAARecordsResponseType

type UpdateCAARecordRequest UpdateCAARecordRequestType

type UpdateCAARecordResponse UpdateCAARecordResponseType

type DeleteCAARecordsRequest DeleteCAARecordsRequestType

type DeleteCAARecordsResponse DeleteCAARecordsResponseType

type DeleteOneCAARecordRequest DeleteOneCAARecordRequestType

type DeleteOneCAARecordResponse DeleteOneCAARecordResponseType

type CreateCDNSKEYRecordRequest CreateCDNSKEYRecordRequestType

type CreateCDNSKEYRecordResponse CreateCDNSKEYRecordResponseType

type GetOneCDNSKEYRecordRequest GetOneCDNSKEYRecordRequestType

type GetOneCDNSKEYRecordResponse GetOneCDNSKEYRecordResponseType

type GetCDNSKEYRecordsRequest GetCDNSKEYRecordsRequestType

type GetCDNSKEYRecordsResponse GetCDNSKEYRecordsResponseType

type UpdateCDNSKEYRecordRequest UpdateCDNSKEYRecordRequestType

type UpdateCDNSKEYRecordResponse UpdateCDNSKEYRecordResponseType

type DeleteCDNSKEYRecordsRequest DeleteCDNSKEYRecordsRequestType

type DeleteCDNSKEYRecordsResponse DeleteCDNSKEYRecordsResponseType

type DeleteOneCDNSKEYRecordRequest DeleteOneCDNSKEYRecordRequestType

type DeleteOneCDNSKEYRecordResponse DeleteOneCDNSKEYRecordResponseType

type CreateCDSRecordRequest CreateCDSRecordRequestType

type CreateCDSRecordResponse CreateCDSRecordResponseType

type GetOneCDSRecordRequest GetOneCDSRecordRequestType

type GetOneCDSRecordResponse GetOneCDSRecordResponseType

type GetCDSRecordsRequest GetCDSRecordsRequestType

type GetCDSRecordsResponse GetCDSRecordsResponseType

type UpdateCDSRecordRequest UpdateCDSRecordRequestType

type UpdateCDSRecordResponse UpdateCDSRecordResponseType

type DeleteCDSRecordsRequest DeleteCDSRecordsRequestType

type DeleteCDSRecordsResponse DeleteCDSRecordsResponseType

type DeleteOneCDSRecordRequest DeleteOneCDSRecordRequestType

type DeleteOneCDSRecordResponse DeleteOneCDSRecordResponseType

type CreateCERTRecordRequest CreateCERTRecordRequestType

type CreateCERTRecordResponse CreateCERTRecordResponseType

type GetOneCERTRecordRequest GetOneCERTRecordRequestType

type GetOneCERTRecordResponse GetOneCERTRecordResponseType

type GetCERTRecordsRequest GetCERTRecordsRequestType

type GetCERTRecordsResponse GetCERTRecordsResponseType

type UpdateCERTRecordRequest UpdateCERTRecordRequestType

type UpdateCERTRecordResponse UpdateCERTRecordResponseType

type DeleteCERTRecordsRequest DeleteCERTRecordsRequestType

type DeleteCERTRecordsResponse DeleteCERTRecordsResponseType

type DeleteOneCERTRecordRequest DeleteOneCERTRecordRequestType

type DeleteOneCERTRecordResponse DeleteOneCERTRecordResponseType

type CreateCNAMERecordRequest CreateCNAMERecordRequestType

type CreateCNAMERecordResponse CreateCNAMERecordResponseType

type GetOneCNAMERecordRequest GetOneCNAMERecordRequestType

type GetOneCNAMERecordResponse GetOneCNAMERecordResponseType

type GetCNAMERecordsRequest GetCNAMERecordsRequestType

type GetCNAMERecordsResponse GetCNAMERecordsResponseType

type UpdateCNAMERecordRequest UpdateCNAMERecordRequestType

type UpdateCNAMERecordResponse UpdateCNAMERecordResponseType

type DeleteCNAMERecordsRequest DeleteCNAMERecordsRequestType

type DeleteCNAMERecordsResponse DeleteCNAMERecordsResponseType

type DeleteOneCNAMERecordRequest DeleteOneCNAMERecordRequestType

type DeleteOneCNAMERecordResponse DeleteOneCNAMERecordResponseType

type CreateCSYNCRecordRequest CreateCSYNCRecordRequestType

type CreateCSYNCRecordResponse CreateCSYNCRecordResponseType

type GetOneCSYNCRecordRequest GetOneCSYNCRecordRequestType

type GetOneCSYNCRecordResponse GetOneCSYNCRecordResponseType

type GetCSYNCRecordsRequest GetCSYNCRecordsRequestType

type GetCSYNCRecordsResponse GetCSYNCRecordsResponseType

type UpdateCSYNCRecordRequest UpdateCSYNCRecordRequestType

type UpdateCSYNCRecordResponse UpdateCSYNCRecordResponseType

type DeleteCSYNCRecordsRequest DeleteCSYNCRecordsRequestType

type DeleteCSYNCRecordsResponse DeleteCSYNCRecordsResponseType

type DeleteOneCSYNCRecordRequest DeleteOneCSYNCRecordRequestType

type DeleteOneCSYNCRecordResponse DeleteOneCSYNCRecordResponseType

type CreateDHCIDRecordRequest CreateDHCIDRecordRequestType

type CreateDHCIDRecordResponse CreateDHCIDRecordResponseType

type GetOneDHCIDRecordRequest GetOneDHCIDRecordRequestType

type GetOneDHCIDRecordResponse GetOneDHCIDRecordResponseType

type GetDHCIDRecordsRequest GetDHCIDRecordsRequestType

type GetDHCIDRecordsResponse GetDHCIDRecordsResponseType

type UpdateDHCIDRecordRequest UpdateDHCIDRecordRequestType

type UpdateDHCIDRecordResponse UpdateDHCIDRecordResponseType

type DeleteDHCIDRecordsRequest DeleteDHCIDRecordsRequestType

type DeleteDHCIDRecordsResponse DeleteDHCIDRecordsResponseType

type DeleteOneDHCIDRecordRequest DeleteOneDHCIDRecordRequestType

type DeleteOneDHCIDRecordResponse DeleteOneDHCIDRecordResponseType

type CreateDNAMERecordRequest CreateDNAMERecordRequestType

type CreateDNAMERecordResponse CreateDNAMERecordResponseType

type GetOneDNAMERecordRequest GetOneDNAMERecordRequestType

type GetOneDNAMERecordResponse GetOneDNAMERecordResponseType

type GetDNAMERecordsRequest GetDNAMERecordsRequestType

type GetDNAMERecordsResponse GetDNAMERecordsResponseType

type UpdateDNAMERecordRequest UpdateDNAMERecordRequestType

type UpdateDNAMERecordResponse UpdateDNAMERecordResponseType

type DeleteDNAMERecordsRequest DeleteDNAMERecordsRequestType

type DeleteDNAMERecordsResponse DeleteDNAMERecordsResponseType

type DeleteOneDNAMERecordRequest DeleteOneDNAMERecordRequestType

type DeleteOneDNAMERecordResponse DeleteOneDNAMERecordResponseType

type CreateDNSKEYRecordRequest CreateDNSKEYRecordRequestType

type CreateDNSKEYRecordResponse CreateDNSKEYRecordResponseType

type GetOneDNSKEYRecordRequest GetOneDNSKEYRecordRequestType

type GetOneDNSKEYRecordResponse GetOneDNSKEYRecordResponseType

type GetDNSKEYRecordsRequest GetDNSKEYRecordsRequestType

type GetDNSKEYRecordsResponse GetDNSKEYRecordsResponseType

type UpdateDNSKEYRecordRequest UpdateDNSKEYRecordRequestType

type UpdateDNSKEYRecordResponse UpdateDNSKEYRecordResponseType

type DeleteDNSKEYRecordsRequest DeleteDNSKEYRecordsRequestType

type DeleteDNSKEYRecordsResponse DeleteDNSKEYRecordsResponseType

type DeleteOneDNSKEYRecordRequest DeleteOneDNSKEYRecordRequestType

type DeleteOneDNSKEYRecordResponse DeleteOneDNSKEYRecordResponseType

type CreateDSRecordRequest CreateDSRecordRequestType

type CreateDSRecordResponse CreateDSRecordResponseType

type GetOneDSRecordRequest GetOneDSRecordRequestType

type GetOneDSRecordResponse GetOneDSRecordResponseType

type GetDSRecordsRequest GetDSRecordsRequestType

type GetDSRecordsResponse GetDSRecordsResponseType

type UpdateDSRecordRequest UpdateDSRecordRequestType

type UpdateDSRecordResponse UpdateDSRecordResponseType

type DeleteDSRecordsRequest DeleteDSRecordsRequestType

type DeleteDSRecordsResponse DeleteDSRecordsResponseType

type DeleteOneDSRecordRequest DeleteOneDSRecordRequestType

type DeleteOneDSRecordResponse DeleteOneDSRecordResponseType

type CreateIPSECKEYRecordRequest CreateIPSECKEYRecordRequestType

type CreateIPSECKEYRecordResponse CreateIPSECKEYRecordResponseType

type GetOneIPSECKEYRecordRequest GetOneIPSECKEYRecordRequestType

type GetOneIPSECKEYRecordResponse GetOneIPSECKEYRecordResponseType

type GetIPSECKEYRecordsRequest GetIPSECKEYRecordsRequestType

type GetIPSECKEYRecordsResponse GetIPSECKEYRecordsResponseType

type UpdateIPSECKEYRecordRequest UpdateIPSECKEYRecordRequestType

type UpdateIPSECKEYRecordResponse UpdateIPSECKEYRecordResponseType

type DeleteIPSECKEYRecordsRequest DeleteIPSECKEYRecordsRequestType

type DeleteIPSECKEYRecordsResponse DeleteIPSECKEYRecordsResponseType

type DeleteOneIPSECKEYRecordRequest DeleteOneIPSECKEYRecordRequestType

type DeleteOneIPSECKEYRecordResponse DeleteOneIPSECKEYRecordResponseType

type CreateKEYRecordRequest CreateKEYRecordRequestType

type CreateKEYRecordResponse CreateKEYRecordResponseType

type GetOneKEYRecordRequest GetOneKEYRecordRequestType

type GetOneKEYRecordResponse GetOneKEYRecordResponseType

type GetKEYRecordsRequest GetKEYRecordsRequestType

type GetKEYRecordsResponse GetKEYRecordsResponseType

type UpdateKEYRecordRequest UpdateKEYRecordRequestType

type UpdateKEYRecordResponse UpdateKEYRecordResponseType

type DeleteKEYRecordsRequest DeleteKEYRecordsRequestType

type DeleteKEYRecordsResponse DeleteKEYRecordsResponseType

type DeleteOneKEYRecordRequest DeleteOneKEYRecordRequestType

type DeleteOneKEYRecordResponse DeleteOneKEYRecordResponseType

type CreateKXRecordRequest CreateKXRecordRequestType

type CreateKXRecordResponse CreateKXRecordResponseType

type GetOneKXRecordRequest GetOneKXRecordRequestType

type GetOneKXRecordResponse GetOneKXRecordResponseType

type GetKXRecordsRequest GetKXRecordsRequestType

type GetKXRecordsResponse GetKXRecordsResponseType

type UpdateKXRecordRequest UpdateKXRecordRequestType

type UpdateKXRecordResponse UpdateKXRecordResponseType

type DeleteKXRecordsRequest DeleteKXRecordsRequestType

type DeleteKXRecordsResponse DeleteKXRecordsResponseType

type DeleteOneKXRecordRequest DeleteOneKXRecordRequestType

type DeleteOneKXRecordResponse DeleteOneKXRecordResponseType

type CreateLOCRecordRequest CreateLOCRecordRequestType

type CreateLOCRecordResponse CreateLOCRecordResponseType

type GetOneLOCRecordRequest GetOneLOCRecordRequestType

type GetOneLOCRecordResponse GetOneLOCRecordResponseType

type GetLOCRecordsRequest GetLOCRecordsRequestType

type GetLOCRecordsResponse GetLOCRecordsResponseType

type UpdateLOCRecordRequest UpdateLOCRecordRequestType

type UpdateLOCRecordResponse UpdateLOCRecordResponseType

type DeleteLOCRecordsRequest DeleteLOCRecordsRequestType

type DeleteLOCRecordsResponse DeleteLOCRecordsResponseType

type DeleteOneLOCRecordRequest DeleteOneLOCRecordRequestType

type DeleteOneLOCRecordResponse DeleteOneLOCRecordResponseType

type CreateMXRecordRequest CreateMXRecordRequestType

type CreateMXRecordResponse CreateMXRecordResponseType

type GetOneMXRecordRequest GetOneMXRecordRequestType

type GetOneMXRecordResponse GetOneMXRecordResponseType

type GetMXRecordsRequest GetMXRecordsRequestType

type GetMXRecordsResponse GetMXRecordsResponseType

type UpdateMXRecordRequest UpdateMXRecordRequestType

type UpdateMXRecordResponse UpdateMXRecordResponseType

type DeleteMXRecordsRequest DeleteMXRecordsRequestType

type DeleteMXRecordsResponse DeleteMXRecordsResponseType

type DeleteOneMXRecordRequest DeleteOneMXRecordRequestType

type DeleteOneMXRecordResponse DeleteOneMXRecordResponseType

type CreateNAPTRRecordRequest CreateNAPTRRecordRequestType

type CreateNAPTRRecordResponse CreateNAPTRRecordResponseType

type GetOneNAPTRRecordRequest GetOneNAPTRRecordRequestType

type GetOneNAPTRRecordResponse GetOneNAPTRRecordResponseType

type GetNAPTRRecordsRequest GetNAPTRRecordsRequestType

type GetNAPTRRecordsResponse GetNAPTRRecordsResponseType

type UpdateNAPTRRecordRequest UpdateNAPTRRecordRequestType

type UpdateNAPTRRecordResponse UpdateNAPTRRecordResponseType

type DeleteNAPTRRecordsRequest DeleteNAPTRRecordsRequestType

type DeleteNAPTRRecordsResponse DeleteNAPTRRecordsResponseType

type DeleteOneNAPTRRecordRequest DeleteOneNAPTRRecordRequestType

type DeleteOneNAPTRRecordResponse DeleteOneNAPTRRecordResponseType

type CreateNSAPRecordRequest CreateNSAPRecordRequestType

type CreateNSAPRecordResponse CreateNSAPRecordResponseType

type GetOneNSAPRecordRequest GetOneNSAPRecordRequestType

type GetOneNSAPRecordResponse GetOneNSAPRecordResponseType

type GetNSAPRecordsRequest GetNSAPRecordsRequestType

type GetNSAPRecordsResponse GetNSAPRecordsResponseType

type UpdateNSAPRecordRequest UpdateNSAPRecordRequestType

type UpdateNSAPRecordResponse UpdateNSAPRecordResponseType

type DeleteNSAPRecordsRequest DeleteNSAPRecordsRequestType

type DeleteNSAPRecordsResponse DeleteNSAPRecordsResponseType

type DeleteOneNSAPRecordRequest DeleteOneNSAPRecordRequestType

type DeleteOneNSAPRecordResponse DeleteOneNSAPRecordResponseType

type CreatePOLICYRecordRequest CreatePOLICYRecordRequestType

type CreatePOLICYRecordResponse CreatePOLICYRecordResponseType

type GetOnePOLICYRecordRequest GetOnePOLICYRecordRequestType

type GetOnePOLICYRecordResponse GetOnePOLICYRecordResponseType

type GetPOLICYRecordsRequest GetPOLICYRecordsRequestType

type GetPOLICYRecordsResponse GetPOLICYRecordsResponseType

type UpdatePOLICYRecordRequest UpdatePOLICYRecordRequestType

type UpdatePOLICYRecordResponse UpdatePOLICYRecordResponseType

type DeletePOLICYRecordsRequest DeletePOLICYRecordsRequestType

type DeletePOLICYRecordsResponse DeletePOLICYRecordsResponseType

type DeleteOnePOLICYRecordRequest DeleteOnePOLICYRecordRequestType

type DeleteOnePOLICYRecordResponse DeleteOnePOLICYRecordResponseType

type CreatePTRRecordRequest CreatePTRRecordRequestType

type CreatePTRRecordResponse CreatePTRRecordResponseType

type GetOnePTRRecordRequest GetOnePTRRecordRequestType

type GetOnePTRRecordResponse GetOnePTRRecordResponseType

type GetPTRRecordsRequest GetPTRRecordsRequestType

type GetPTRRecordsResponse GetPTRRecordsResponseType

type UpdatePTRRecordRequest UpdatePTRRecordRequestType

type UpdatePTRRecordResponse UpdatePTRRecordResponseType

type DeletePTRRecordsRequest DeletePTRRecordsRequestType

type DeletePTRRecordsResponse DeletePTRRecordsResponseType

type DeleteOnePTRRecordRequest DeleteOnePTRRecordRequestType

type DeleteOnePTRRecordResponse DeleteOnePTRRecordResponseType

type CreatePXRecordRequest CreatePXRecordRequestType

type CreatePXRecordResponse CreatePXRecordResponseType

type GetOnePXRecordRequest GetOnePXRecordRequestType

type GetOnePXRecordResponse GetOnePXRecordResponseType

type GetPXRecordsRequest GetPXRecordsRequestType

type GetPXRecordsResponse GetPXRecordsResponseType

type UpdatePXRecordRequest UpdatePXRecordRequestType

type UpdatePXRecordResponse UpdatePXRecordResponseType

type DeletePXRecordsRequest DeletePXRecordsRequestType

type DeletePXRecordsResponse DeletePXRecordsResponseType

type DeleteOnePXRecordRequest DeleteOnePXRecordRequestType

type DeleteOnePXRecordResponse DeleteOnePXRecordResponseType

type CreateRPRecordRequest CreateRPRecordRequestType

type CreateRPRecordResponse CreateRPRecordResponseType

type GetOneRPRecordRequest GetOneRPRecordRequestType

type GetOneRPRecordResponse GetOneRPRecordResponseType

type GetRPRecordsRequest GetRPRecordsRequestType

type GetRPRecordsResponse GetRPRecordsResponseType

type UpdateRPRecordRequest UpdateRPRecordRequestType

type UpdateRPRecordResponse UpdateRPRecordResponseType

type DeleteRPRecordsRequest DeleteRPRecordsRequestType

type DeleteRPRecordsResponse DeleteRPRecordsResponseType

type DeleteOneRPRecordRequest DeleteOneRPRecordRequestType

type DeleteOneRPRecordResponse DeleteOneRPRecordResponseType

type CreateSPFRecordRequest CreateSPFRecordRequestType

type CreateSPFRecordResponse CreateSPFRecordResponseType

type GetOneSPFRecordRequest GetOneSPFRecordRequestType

type GetOneSPFRecordResponse GetOneSPFRecordResponseType

type GetSPFRecordsRequest GetSPFRecordsRequestType

type GetSPFRecordsResponse GetSPFRecordsResponseType

type UpdateSPFRecordRequest UpdateSPFRecordRequestType

type UpdateSPFRecordResponse UpdateSPFRecordResponseType

type DeleteSPFRecordsRequest DeleteSPFRecordsRequestType

type DeleteSPFRecordsResponse DeleteSPFRecordsResponseType

type DeleteOneSPFRecordRequest DeleteOneSPFRecordRequestType

type DeleteOneSPFRecordResponse DeleteOneSPFRecordResponseType

type CreateSRVRecordRequest CreateSRVRecordRequestType

type CreateSRVRecordResponse CreateSRVRecordResponseType

type GetOneSRVRecordRequest GetOneSRVRecordRequestType

type GetOneSRVRecordResponse GetOneSRVRecordResponseType

type GetSRVRecordsRequest GetSRVRecordsRequestType

type GetSRVRecordsResponse GetSRVRecordsResponseType

type UpdateSRVRecordRequest UpdateSRVRecordRequestType

type UpdateSRVRecordResponse UpdateSRVRecordResponseType

type DeleteSRVRecordsRequest DeleteSRVRecordsRequestType

type DeleteSRVRecordsResponse DeleteSRVRecordsResponseType

type DeleteOneSRVRecordRequest DeleteOneSRVRecordRequestType

type DeleteOneSRVRecordResponse DeleteOneSRVRecordResponseType

type CreateSSHFPRecordRequest CreateSSHFPRecordRequestType

type CreateSSHFPRecordResponse CreateSSHFPRecordResponseType

type GetOneSSHFPRecordRequest GetOneSSHFPRecordRequestType

type GetOneSSHFPRecordResponse GetOneSSHFPRecordResponseType

type GetSSHFPRecordsRequest GetSSHFPRecordsRequestType

type GetSSHFPRecordsResponse GetSSHFPRecordsResponseType

type UpdateSSHFPRecordRequest UpdateSSHFPRecordRequestType

type UpdateSSHFPRecordResponse UpdateSSHFPRecordResponseType

type DeleteSSHFPRecordsRequest DeleteSSHFPRecordsRequestType

type DeleteSSHFPRecordsResponse DeleteSSHFPRecordsResponseType

type DeleteOneSSHFPRecordRequest DeleteOneSSHFPRecordRequestType

type DeleteOneSSHFPRecordResponse DeleteOneSSHFPRecordResponseType

type CreateTLSARecordRequest CreateTLSARecordRequestType

type CreateTLSARecordResponse CreateTLSARecordResponseType

type GetOneTLSARecordRequest GetOneTLSARecordRequestType

type GetOneTLSARecordResponse GetOneTLSARecordResponseType

type GetTLSARecordsRequest GetTLSARecordsRequestType

type GetTLSARecordsResponse GetTLSARecordsResponseType

type UpdateTLSARecordRequest UpdateTLSARecordRequestType

type UpdateTLSARecordResponse UpdateTLSARecordResponseType

type DeleteTLSARecordsRequest DeleteTLSARecordsRequestType

type DeleteTLSARecordsResponse DeleteTLSARecordsResponseType

type DeleteOneTLSARecordRequest DeleteOneTLSARecordRequestType

type DeleteOneTLSARecordResponse DeleteOneTLSARecordResponseType

type CreateTXTRecordRequest CreateTXTRecordRequestType

type CreateTXTRecordResponse CreateTXTRecordResponseType

type GetOneTXTRecordRequest GetOneTXTRecordRequestType

type GetOneTXTRecordResponse GetOneTXTRecordResponseType

type GetTXTRecordsRequest GetTXTRecordsRequestType

type GetTXTRecordsResponse GetTXTRecordsResponseType

type UpdateTXTRecordRequest UpdateTXTRecordRequestType

type UpdateTXTRecordResponse UpdateTXTRecordResponseType

type DeleteTXTRecordsRequest DeleteTXTRecordsRequestType

type DeleteTXTRecordsResponse DeleteTXTRecordsResponseType

type DeleteOneTXTRecordRequest DeleteOneTXTRecordRequestType

type DeleteOneTXTRecordResponse DeleteOneTXTRecordResponseType

type GetOneSOARecordRequest GetOneSOARecordRequestType

type GetOneSOARecordResponse GetOneSOARecordResponseType

type GetSOARecordsRequest GetSOARecordsRequestType

type GetSOARecordsResponse GetSOARecordsResponseType

type UpdateSOARecordRequest UpdateSOARecordRequestType

type UpdateSOARecordResponse UpdateSOARecordResponseType

type CreateNSRecordRequest CreateNSRecordRequestType

type CreateNSRecordResponse CreateNSRecordResponseType

type GetOneNSRecordRequest GetOneNSRecordRequestType

type GetOneNSRecordResponse GetOneNSRecordResponseType

type GetNSRecordsRequest GetNSRecordsRequestType

type GetNSRecordsResponse GetNSRecordsResponseType

type UpdateNSRecordRequest UpdateNSRecordRequestType

type UpdateNSRecordResponse UpdateNSRecordResponseType

type DeleteNSRecordsRequest DeleteNSRecordsRequestType

type DeleteNSRecordsResponse DeleteNSRecordsResponseType

type DeleteOneNSRecordRequest DeleteOneNSRecordRequestType

type DeleteOneNSRecordResponse DeleteOneNSRecordResponseType

type ReplaceARecordsRequest ReplaceARecordsRequestType

type ReplaceARecordsResponse ReplaceARecordsResponseType

type ReplaceAAAARecordsRequest ReplaceAAAARecordsRequestType

type ReplaceAAAARecordsResponse ReplaceAAAARecordsResponseType

type ReplaceALIASRecordsRequest ReplaceALIASRecordsRequestType

type ReplaceALIASRecordsResponse ReplaceALIASRecordsResponseType

type ReplaceCAARecordsRequest ReplaceCAARecordsRequestType

type ReplaceCAARecordsResponse ReplaceCAARecordsResponseType

type ReplaceCDNSKEYRecordsRequest ReplaceCDNSKEYRecordsRequestType

type ReplaceCDNSKEYRecordsResponse ReplaceCDNSKEYRecordsResponseType

type ReplaceCDSRecordsRequest ReplaceCDSRecordsRequestType

type ReplaceCDSRecordsResponse ReplaceCDSRecordsResponseType

type ReplaceCERTRecordsRequest ReplaceCERTRecordsRequestType

type ReplaceCERTRecordsResponse ReplaceCERTRecordsResponseType

type ReplaceCNAMERecordsRequest ReplaceCNAMERecordsRequestType

type ReplaceCNAMERecordsResponse ReplaceCNAMERecordsResponseType

type ReplaceCSYNCRecordsRequest ReplaceCSYNCRecordsRequestType

type ReplaceCSYNCRecordsResponse ReplaceCSYNCRecordsResponseType

type ReplaceDHCIDRecordsRequest ReplaceDHCIDRecordsRequestType

type ReplaceDHCIDRecordsResponse ReplaceDHCIDRecordsResponseType

type ReplaceDNAMERecordsRequest ReplaceDNAMERecordsRequestType

type ReplaceDNAMERecordsResponse ReplaceDNAMERecordsResponseType

type ReplaceDNSKEYRecordsRequest ReplaceDNSKEYRecordsRequestType

type ReplaceDNSKEYRecordsResponse ReplaceDNSKEYRecordsResponseType

type ReplaceDSRecordsRequest ReplaceDSRecordsRequestType

type ReplaceDSRecordsResponse ReplaceDSRecordsResponseType

type ReplaceIPSECKEYRecordsRequest ReplaceIPSECKEYRecordsRequestType

type ReplaceIPSECKEYRecordsResponse ReplaceIPSECKEYRecordsResponseType

type ReplaceKEYRecordsRequest ReplaceKEYRecordsRequestType

type ReplaceKEYRecordsResponse ReplaceKEYRecordsResponseType

type ReplaceKXRecordsRequest ReplaceKXRecordsRequestType

type ReplaceKXRecordsResponse ReplaceKXRecordsResponseType

type ReplaceLOCRecordsRequest ReplaceLOCRecordsRequestType

type ReplaceLOCRecordsResponse ReplaceLOCRecordsResponseType

type ReplaceMXRecordsRequest ReplaceMXRecordsRequestType

type ReplaceMXRecordsResponse ReplaceMXRecordsResponseType

type ReplaceNAPTRRecordsRequest ReplaceNAPTRRecordsRequestType

type ReplaceNAPTRRecordsResponse ReplaceNAPTRRecordsResponseType

type ReplaceNSAPRecordsRequest ReplaceNSAPRecordsRequestType

type ReplaceNSAPRecordsResponse ReplaceNSAPRecordsResponseType

type ReplacePOLICYRecordsRequest ReplacePOLICYRecordsRequestType

type ReplacePOLICYRecordsResponse ReplacePOLICYRecordsResponseType

type ReplacePTRRecordsRequest ReplacePTRRecordsRequestType

type ReplacePTRRecordsResponse ReplacePTRRecordsResponseType

type ReplacePXRecordsRequest ReplacePXRecordsRequestType

type ReplacePXRecordsResponse ReplacePXRecordsResponseType

type ReplaceRPRecordsRequest ReplaceRPRecordsRequestType

type ReplaceRPRecordsResponse ReplaceRPRecordsResponseType

type ReplaceSPFRecordsRequest ReplaceSPFRecordsRequestType

type ReplaceSPFRecordsResponse ReplaceSPFRecordsResponseType

type ReplaceSRVRecordsRequest ReplaceSRVRecordsRequestType

type ReplaceSRVRecordsResponse ReplaceSRVRecordsResponseType

type ReplaceSSHFPRecordsRequest ReplaceSSHFPRecordsRequestType

type ReplaceSSHFPRecordsResponse ReplaceSSHFPRecordsResponseType

type ReplaceTLSARecordsRequest ReplaceTLSARecordsRequestType

type ReplaceTLSARecordsResponse ReplaceTLSARecordsResponseType

type ReplaceTXTRecordsRequest ReplaceTXTRecordsRequestType

type ReplaceTXTRecordsResponse ReplaceTXTRecordsResponseType

type ReplaceNSRecordsRequest ReplaceNSRecordsRequestType

type ReplaceNSRecordsResponse ReplaceNSRecordsResponseType

type GetANYRecordsRequest GetANYRecordsRequestType

type GetANYRecordsResponse GetANYRecordsResponseType

type GetAllRecordsRequest GetAllRecordsRequestType

type GetAllRecordsResponse GetAllRecordsResponseType

type GetAllAliasQNamesRequest GetAllAliasQNamesRequestType

type GetAllAliasQNamesResponse GetAllAliasQNamesResponseType

type GetOneUserRequest GetOneUserRequestType

type GetOneUserResponse GetOneUserResponseType

type DeleteOneUserRequest DeleteOneUserRequestType

type DeleteOneUserResponse DeleteOneUserResponseType

type CreateUserRequest CreateUserRequestType

type CreateUserResponse CreateUserResponseType

type UpdateUserRequest UpdateUserRequestType

type UpdateUserResponse UpdateUserResponseType

type GetUsersRequest GetUsersRequestType

type GetUsersResponse GetUsersResponseType

type GetUpdateUsersRequest GetUpdateUsersRequestType

type GetUpdateUsersResponse GetUpdateUsersResponseType

type UpdateUpdateUserRequest UpdateUpdateUserRequestType

type UpdateUpdateUserResponse UpdateUpdateUserResponseType

type DeleteOneUpdateUserRequest DeleteOneUpdateUserRequestType

type DeleteOneUpdateUserResponse DeleteOneUpdateUserResponseType

type UpdateUserPasswordRequest UpdateUserPasswordRequestType

type UpdateUserPasswordResponse UpdateUserPasswordResponseType

type BlockUserRequest BlockUserRequestType

type BlockUserResponse BlockUserResponseType

type UnblockUserRequest UnblockUserRequestType

type UnblockUserResponse UnblockUserResponseType

type CreateContactRequest CreateContactRequestType

type CreateContactResponse CreateContactResponseType

type GetOneContactRequest GetOneContactRequestType

type GetOneContactResponse GetOneContactResponseType

type GetContactsRequest GetContactsRequestType

type GetContactsResponse GetContactsResponseType

type DeleteOneContactRequest DeleteOneContactRequestType

type DeleteOneContactResponse DeleteOneContactResponseType

type UpdateContactRequest UpdateContactRequestType

type UpdateContactResponse UpdateContactResponseType

type CreateCustomerRequest CreateCustomerRequestType

type CreateCustomerResponse CreateCustomerResponseType

type UpdateCustomerRequest UpdateCustomerRequestType

type UpdateCustomerResponse UpdateCustomerResponseType

type GetOneCustomerRequest GetOneCustomerRequestType

type GetOneCustomerResponse GetOneCustomerResponseType

type GetCustomersRequest GetCustomersRequestType

type GetCustomersResponse GetCustomersResponseType

type DeleteOneCustomerRequest DeleteOneCustomerRequestType

type DeleteOneCustomerResponse DeleteOneCustomerResponseType

type GetCustomerPrefsRequest GetCustomerPrefsRequestType

type GetCustomerPrefsResponse GetCustomerPrefsResponseType

type SetCustomerPrefsRequest SetCustomerPrefsRequestType

type SetCustomerPrefsResponse SetCustomerPrefsResponseType

type GetCustomerIPACLRequest GetCustomerIPACLRequestType

type GetCustomerIPACLResponse GetCustomerIPACLResponseType

type SetCustomerIPACLRequest SetCustomerIPACLRequestType

type SetCustomerIPACLResponse SetCustomerIPACLResponseType

type CreateCustomerOracleMetadataRequest CreateCustomerOracleMetadataRequestType

type CreateCustomerOracleMetadataResponse CreateCustomerOracleMetadataResponseType

type UpdateCustomerOracleMetadataRequest UpdateCustomerOracleMetadataRequestType

type UpdateCustomerOracleMetadataResponse UpdateCustomerOracleMetadataResponseType

type GetCustomerOracleMetadataRequest GetCustomerOracleMetadataRequestType

type GetCustomerOracleMetadataResponse GetCustomerOracleMetadataResponseType

type DeleteCustomerOracleMetadataRequest DeleteCustomerOracleMetadataRequestType

type DeleteCustomerOracleMetadataResponse DeleteCustomerOracleMetadataResponseType

type CreateZoneOracleMetadataRequest CreateZoneOracleMetadataRequestType

type CreateZoneOracleMetadataResponse CreateZoneOracleMetadataResponseType

type UpdateZoneOracleMetadataRequest UpdateZoneOracleMetadataRequestType

type UpdateZoneOracleMetadataResponse UpdateZoneOracleMetadataResponseType

type GetZoneOracleMetadataRequest GetZoneOracleMetadataRequestType

type GetZoneOracleMetadataResponse GetZoneOracleMetadataResponseType

type DeleteZoneOracleMetadataRequest DeleteZoneOracleMetadataRequestType

type DeleteZoneOracleMetadataResponse DeleteZoneOracleMetadataResponseType

type OCIMigrateRequest OCIMigrateRequestType

type OCIMigrateResponse OCIMigrateResponseType

type CreateDDNSRequest CreateDDNSRequestType

type CreateDDNSResponse CreateDDNSResponseType

type GetOneDDNSRequest GetOneDDNSRequestType

type GetOneDDNSResponse GetOneDDNSResponseType

type GetDDNSsRequest GetDDNSsRequestType

type GetDDNSsResponse GetDDNSsResponseType

type UpdateDDNSRequest UpdateDDNSRequestType

type UpdateDDNSResponse UpdateDDNSResponseType

type DeleteOneDDNSRequest DeleteOneDDNSRequestType

type DeleteOneDDNSResponse DeleteOneDDNSResponseType

type ActivateDDNSRequest ActivateDDNSRequestType

type ActivateDDNSResponse ActivateDDNSResponseType

type DeactivateDDNSRequest DeactivateDDNSRequestType

type DeactivateDDNSResponse DeactivateDDNSResponseType

type ResetDDNSRequest ResetDDNSRequestType

type ResetDDNSResponse ResetDDNSResponseType

type GetUpdateUserPasswordRequest GetUpdateUserPasswordRequestType

type GetUpdateUserPasswordResponse GetUpdateUserPasswordResponseType

type CreateDDNSHostRequest CreateDDNSHostRequestType

type CreateDDNSHostResponse CreateDDNSHostResponseType

type CreateUpdateUserRequest CreateUpdateUserRequestType

type CreateUpdateUserResponse CreateUpdateUserResponseType

type AddDDNSRequest AddDDNSRequestType

type AddDDNSResponse AddDDNSResponseType

type CreateFailoverRequest CreateFailoverRequestType

type CreateFailoverResponse CreateFailoverResponseType

type GetOneFailoverRequest GetOneFailoverRequestType

type GetOneFailoverResponse GetOneFailoverResponseType

type GetFailoversRequest GetFailoversRequestType

type GetFailoversResponse GetFailoversResponseType

type UpdateFailoverRequest UpdateFailoverRequestType

type UpdateFailoverResponse UpdateFailoverResponseType

type DeleteOneFailoverRequest DeleteOneFailoverRequestType

type DeleteOneFailoverResponse DeleteOneFailoverResponseType

type ActivateFailoverRequest ActivateFailoverRequestType

type ActivateFailoverResponse ActivateFailoverResponseType

type DeactivateFailoverRequest DeactivateFailoverRequestType

type DeactivateFailoverResponse DeactivateFailoverResponseType

type RecoverFailoverRequest RecoverFailoverRequestType

type RecoverFailoverResponse RecoverFailoverResponseType

type CreateLoadBalanceRequest CreateLoadBalanceRequestType

type CreateLoadBalanceResponse CreateLoadBalanceResponseType

type GetOneLoadBalanceRequest GetOneLoadBalanceRequestType

type GetOneLoadBalanceResponse GetOneLoadBalanceResponseType

type GetLoadBalancesRequest GetLoadBalancesRequestType

type GetLoadBalancesResponse GetLoadBalancesResponseType

type UpdateLoadBalanceRequest UpdateLoadBalanceRequestType

type UpdateLoadBalanceResponse UpdateLoadBalanceResponseType

type DeleteOneLoadBalanceRequest DeleteOneLoadBalanceRequestType

type DeleteOneLoadBalanceResponse DeleteOneLoadBalanceResponseType

type ActivateLoadBalanceRequest ActivateLoadBalanceRequestType

type ActivateLoadBalanceResponse ActivateLoadBalanceResponseType

type DeactivateLoadBalanceRequest DeactivateLoadBalanceRequestType

type DeactivateLoadBalanceResponse DeactivateLoadBalanceResponseType

type RecoverLoadBalanceRequest RecoverLoadBalanceRequestType

type RecoverLoadBalanceResponse RecoverLoadBalanceResponseType

type RecoverLoadBalanceIPRequest RecoverLoadBalanceIPRequestType

type RecoverLoadBalanceIPResponse RecoverLoadBalanceIPResponseType

type CreateLoadBalancePoolEntryRequest CreateLoadBalancePoolEntryRequestType

type CreateLoadBalancePoolEntryResponse CreateLoadBalancePoolEntryResponseType

type UpdateLoadBalancePoolEntryRequest UpdateLoadBalancePoolEntryRequestType

type UpdateLoadBalancePoolEntryResponse UpdateLoadBalancePoolEntryResponseType

type GetOneLoadBalancePoolEntryRequest GetOneLoadBalancePoolEntryRequestType

type GetOneLoadBalancePoolEntryResponse GetOneLoadBalancePoolEntryResponseType

type GetLoadBalancePoolEntriesRequest GetLoadBalancePoolEntriesRequestType

type GetLoadBalancePoolEntriesResponse GetLoadBalancePoolEntriesResponseType

type DeleteOneLoadBalancePoolEntryRequest DeleteOneLoadBalancePoolEntryRequestType

type DeleteOneLoadBalancePoolEntryResponse DeleteOneLoadBalancePoolEntryResponseType

type CreateGSLBRequest CreateGSLBRequestType

type CreateGSLBResponse CreateGSLBResponseType

type GetOneGSLBRequest GetOneGSLBRequestType

type GetOneGSLBResponse GetOneGSLBResponseType

type GetGSLBsRequest GetGSLBsRequestType

type GetGSLBsResponse GetGSLBsResponseType

type UpdateGSLBRequest UpdateGSLBRequestType

type UpdateGSLBResponse UpdateGSLBResponseType

type DeleteOneGSLBRequest DeleteOneGSLBRequestType

type DeleteOneGSLBResponse DeleteOneGSLBResponseType

type ActivateGSLBRequest ActivateGSLBRequestType

type ActivateGSLBResponse ActivateGSLBResponseType

type DeactivateGSLBRequest DeactivateGSLBRequestType

type DeactivateGSLBResponse DeactivateGSLBResponseType

type RecoverGSLBRequest RecoverGSLBRequestType

type RecoverGSLBResponse RecoverGSLBResponseType

type RecoverGSLBIPRequest RecoverGSLBIPRequestType

type RecoverGSLBIPResponse RecoverGSLBIPResponseType

type CreateGSLBRegionRequest CreateGSLBRegionRequestType

type CreateGSLBRegionResponse CreateGSLBRegionResponseType

type GetOneGSLBRegionRequest GetOneGSLBRegionRequestType

type GetOneGSLBRegionResponse GetOneGSLBRegionResponseType

type GetGSLBRegionsRequest GetGSLBRegionsRequestType

type GetGSLBRegionsResponse GetGSLBRegionsResponseType

type UpdateGSLBRegionRequest UpdateGSLBRegionRequestType

type UpdateGSLBRegionResponse UpdateGSLBRegionResponseType

type DeleteOneGSLBRegionRequest DeleteOneGSLBRegionRequestType

type DeleteOneGSLBRegionResponse DeleteOneGSLBRegionResponseType

type CreateGSLBRegionPoolEntryRequest CreateGSLBRegionPoolEntryRequestType

type CreateGSLBRegionPoolEntryResponse CreateGSLBRegionPoolEntryResponseType

type UpdateGSLBRegionPoolEntryRequest UpdateGSLBRegionPoolEntryRequestType

type UpdateGSLBRegionPoolEntryResponse UpdateGSLBRegionPoolEntryResponseType

type GetOneGSLBRegionPoolEntryRequest GetOneGSLBRegionPoolEntryRequestType

type GetOneGSLBRegionPoolEntryResponse GetOneGSLBRegionPoolEntryResponseType

type GetGSLBRegionPoolEntriesRequest GetGSLBRegionPoolEntriesRequestType

type GetGSLBRegionPoolEntriesResponse GetGSLBRegionPoolEntriesResponseType

type DeleteOneGSLBRegionPoolEntryRequest DeleteOneGSLBRegionPoolEntryRequestType

type DeleteOneGSLBRegionPoolEntryResponse DeleteOneGSLBRegionPoolEntryResponseType

type CreateRTTMRequest CreateRTTMRequestType

type CreateRTTMResponse CreateRTTMResponseType

type GetOneRTTMRequest GetOneRTTMRequestType

type GetOneRTTMResponse GetOneRTTMResponseType

type GetRTTMsRequest GetRTTMsRequestType

type GetRTTMsResponse GetRTTMsResponseType

type UpdateRTTMRequest UpdateRTTMRequestType

type UpdateRTTMResponse UpdateRTTMResponseType

type DeleteOneRTTMRequest DeleteOneRTTMRequestType

type DeleteOneRTTMResponse DeleteOneRTTMResponseType

type ActivateRTTMRequest ActivateRTTMRequestType

type ActivateRTTMResponse ActivateRTTMResponseType

type DeactivateRTTMRequest DeactivateRTTMRequestType

type DeactivateRTTMResponse DeactivateRTTMResponseType

type RecoverRTTMRequest RecoverRTTMRequestType

type RecoverRTTMResponse RecoverRTTMResponseType

type RecoverRTTMIPRequest RecoverRTTMIPRequestType

type RecoverRTTMIPResponse RecoverRTTMIPResponseType

type GetRTTMLogsRequest GetRTTMLogsRequestType

type GetRTTMLogsResponse GetRTTMLogsResponseType

type GetRTTMRRSetsRequest GetRTTMRRSetsRequestType

type GetRTTMRRSetsResponse GetRTTMRRSetsResponseType

type CreateRTTMRegionRequest CreateRTTMRegionRequestType

type CreateRTTMRegionResponse CreateRTTMRegionResponseType

type GetOneRTTMRegionRequest GetOneRTTMRegionRequestType

type GetOneRTTMRegionResponse GetOneRTTMRegionResponseType

type GetRTTMRegionsRequest GetRTTMRegionsRequestType

type GetRTTMRegionsResponse GetRTTMRegionsResponseType

type UpdateRTTMRegionRequest UpdateRTTMRegionRequestType

type UpdateRTTMRegionResponse UpdateRTTMRegionResponseType

type DeleteOneRTTMRegionRequest DeleteOneRTTMRegionRequestType

type DeleteOneRTTMRegionResponse DeleteOneRTTMRegionResponseType

type CreateRTTMRegionPoolEntryRequest CreateRTTMRegionPoolEntryRequestType

type CreateRTTMRegionPoolEntryResponse CreateRTTMRegionPoolEntryResponseType

type UpdateRTTMRegionPoolEntryRequest UpdateRTTMRegionPoolEntryRequestType

type UpdateRTTMRegionPoolEntryResponse UpdateRTTMRegionPoolEntryResponseType

type GetOneRTTMRegionPoolEntryRequest GetOneRTTMRegionPoolEntryRequestType

type GetOneRTTMRegionPoolEntryResponse GetOneRTTMRegionPoolEntryResponseType

type GetRTTMRegionPoolEntriesRequest GetRTTMRegionPoolEntriesRequestType

type GetRTTMRegionPoolEntriesResponse GetRTTMRegionPoolEntriesResponseType

type DeleteOneRTTMRegionPoolEntryRequest DeleteOneRTTMRegionPoolEntryRequestType

type DeleteOneRTTMRegionPoolEntryResponse DeleteOneRTTMRegionPoolEntryResponseType

type CreateHTTPRedirectRequest CreateHTTPRedirectRequestType

type CreateHTTPRedirectResponse CreateHTTPRedirectResponseType

type GetOneHTTPRedirectRequest GetOneHTTPRedirectRequestType

type GetOneHTTPRedirectResponse GetOneHTTPRedirectResponseType

type GetHTTPRedirectsRequest GetHTTPRedirectsRequestType

type GetHTTPRedirectsResponse GetHTTPRedirectsResponseType

type UpdateHTTPRedirectRequest UpdateHTTPRedirectRequestType

type UpdateHTTPRedirectResponse UpdateHTTPRedirectResponseType

type DeleteOneHTTPRedirectRequest DeleteOneHTTPRedirectRequestType

type DeleteOneHTTPRedirectResponse DeleteOneHTTPRedirectResponseType

type CreateAdvRedirectRuleRequest CreateAdvRedirectRuleRequestType

type CreateAdvRedirectRuleResponse CreateAdvRedirectRuleResponseType

type UpdateAdvRedirectRuleRequest UpdateAdvRedirectRuleRequestType

type UpdateAdvRedirectRuleResponse UpdateAdvRedirectRuleResponseType

type GetOneAdvRedirectRuleRequest GetOneAdvRedirectRuleRequestType

type GetOneAdvRedirectRuleResponse GetOneAdvRedirectRuleResponseType

type GetAdvRedirectRulesRequest GetAdvRedirectRulesRequestType

type GetAdvRedirectRulesResponse GetAdvRedirectRulesResponseType

type DeleteOneAdvRedirectRuleRequest DeleteOneAdvRedirectRuleRequestType

type DeleteOneAdvRedirectRuleResponse DeleteOneAdvRedirectRuleResponseType

type CreateAdvRedirectRequest CreateAdvRedirectRequestType

type CreateAdvRedirectResponse CreateAdvRedirectResponseType

type GetOneAdvRedirectRequest GetOneAdvRedirectRequestType

type GetOneAdvRedirectResponse GetOneAdvRedirectResponseType

type GetAdvRedirectsRequest GetAdvRedirectsRequestType

type GetAdvRedirectsResponse GetAdvRedirectsResponseType

type UpdateAdvRedirectRequest UpdateAdvRedirectRequestType

type UpdateAdvRedirectResponse UpdateAdvRedirectResponseType

type DeleteOneAdvRedirectRequest DeleteOneAdvRedirectRequestType

type DeleteOneAdvRedirectResponse DeleteOneAdvRedirectResponseType

type GetNodeListRequest GetNodeListRequestType

type GetNodeListResponse GetNodeListResponseType

type PublishZoneRequest PublishZoneRequestType

type PublishZoneResponse PublishZoneResponseType

type PruneZoneRequest PruneZoneRequestType

type PruneZoneResponse PruneZoneResponseType

type FreezeZoneRequest FreezeZoneRequestType

type FreezeZoneResponse FreezeZoneResponseType

type ThawZoneRequest ThawZoneRequestType

type ThawZoneResponse ThawZoneResponseType

type RestoreZoneRequest RestoreZoneRequestType

type RestoreZoneResponse RestoreZoneResponseType

type BlockZoneRequest BlockZoneRequestType

type BlockZoneResponse BlockZoneResponseType

type DeleteZoneChangesetRequest DeleteZoneChangesetRequestType

type DeleteZoneChangesetResponse DeleteZoneChangesetResponseType

type GetZoneChangesetRequest GetZoneChangesetRequestType

type GetZoneChangesetResponse GetZoneChangesetResponseType

type GetZoneNotesRequest GetZoneNotesRequestType

type GetZoneNotesResponse GetZoneNotesResponseType

type UploadZoneFileRequest UploadZoneFileRequestType

type UploadZoneFileResponse UploadZoneFileResponseType

type TransferZoneInRequest TransferZoneInRequestType

type TransferZoneInResponse TransferZoneInResponseType

type GetTransferStatusRequest GetTransferStatusRequestType

type GetTransferStatusResponse GetTransferStatusResponseType

type GetZoneConfigOptionsRequest GetZoneConfigOptionsRequestType

type GetZoneConfigOptionsResponse GetZoneConfigOptionsResponseType

type SetZoneConfigOptionsRequest SetZoneConfigOptionsRequestType

type SetZoneConfigOptionsResponse SetZoneConfigOptionsResponseType

type CreateIPTrackRequest CreateIPTrackRequestType

type CreateIPTrackResponse CreateIPTrackResponseType

type GetOneIPTrackRequest GetOneIPTrackRequestType

type GetOneIPTrackResponse GetOneIPTrackResponseType

type GetIPTracksRequest GetIPTracksRequestType

type GetIPTracksResponse GetIPTracksResponseType

type UpdateIPTrackRequest UpdateIPTrackRequestType

type UpdateIPTrackResponse UpdateIPTrackResponseType

type DeleteOneIPTrackRequest DeleteOneIPTrackRequestType

type DeleteOneIPTrackResponse DeleteOneIPTrackResponseType

type ActivateIPTrackRequest ActivateIPTrackRequestType

type ActivateIPTrackResponse ActivateIPTrackResponseType

type DeactivateIPTrackRequest DeactivateIPTrackRequestType

type DeactivateIPTrackResponse DeactivateIPTrackResponseType

type CreateDNSSECRequest CreateDNSSECRequestType

type CreateDNSSECResponse CreateDNSSECResponseType

type GetOneDNSSECRequest GetOneDNSSECRequestType

type GetOneDNSSECResponse GetOneDNSSECResponseType

type GetDNSSECsRequest GetDNSSECsRequestType

type GetDNSSECsResponse GetDNSSECsResponseType

type UpdateDNSSECRequest UpdateDNSSECRequestType

type UpdateDNSSECResponse UpdateDNSSECResponseType

type DeleteOneDNSSECRequest DeleteOneDNSSECRequestType

type DeleteOneDNSSECResponse DeleteOneDNSSECResponseType

type ActivateDNSSECRequest ActivateDNSSECRequestType

type ActivateDNSSECResponse ActivateDNSSECResponseType

type DeactivateDNSSECRequest DeactivateDNSSECRequestType

type DeactivateDNSSECResponse DeactivateDNSSECResponseType

type GetDNSSECTimelineRequest GetDNSSECTimelineRequestType

type GetDNSSECTimelineResponse GetDNSSECTimelineResponseType

type GetTasksRequest GetTasksRequestType

type GetTasksResponse GetTasksResponseType

type GetOneTaskRequest GetOneTaskRequestType

type GetOneTaskResponse GetOneTaskResponseType

type CancelTaskRequest CancelTaskRequestType

type CancelTaskResponse CancelTaskResponseType

type CreateExtNameserverRequest CreateExtNameserverRequestType

type CreateExtNameserverResponse CreateExtNameserverResponseType

type GetOneExtNameserverRequest GetOneExtNameserverRequestType

type GetOneExtNameserverResponse GetOneExtNameserverResponseType

type GetExtNameserversRequest GetExtNameserversRequestType

type GetExtNameserversResponse GetExtNameserversResponseType

type UpdateExtNameserverRequest UpdateExtNameserverRequestType

type UpdateExtNameserverResponse UpdateExtNameserverResponseType

type DeleteOneExtNameserverRequest DeleteOneExtNameserverRequestType

type DeleteOneExtNameserverResponse DeleteOneExtNameserverResponseType

type Messages struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ messages"`

	Source string `xml:"source,omitempty" json:"source,omitempty"`

	Lvl string `xml:"lvl,omitempty" json:"lvl,omitempty"`

	Err_cd string `xml:"err_cd,omitempty" json:"err_cd,omitempty"`

	Info string `xml:"info,omitempty" json:"info,omitempty"`
}

type WeightData struct {
	A_weight []string `xml:"a_weight,omitempty" json:"a_weight,omitempty"`

	Aaaa_weight []string `xml:"aaaa_weight,omitempty" json:"aaaa_weight,omitempty"`

	Cname_weight []string `xml:"cname_weight,omitempty" json:"cname_weight,omitempty"`
}

type ServeCountData struct {
	A_serve_count string `xml:"a_serve_count,omitempty" json:"a_serve_count,omitempty"`

	Aaaa_serve_count string `xml:"aaaa_serve_count,omitempty" json:"aaaa_serve_count,omitempty"`
}

type TTLData struct {
	A_ttl int32 `xml:"a_ttl,omitempty" json:"a_ttl,omitempty"`

	Aaaa_ttl int32 `xml:"aaaa_ttl,omitempty" json:"aaaa_ttl,omitempty"`

	Cert_ttl int32 `xml:"cert_ttl,omitempty" json:"cert_ttl,omitempty"`

	Cname_ttl int32 `xml:"cname_ttl,omitempty" json:"cname_ttl,omitempty"`

	Mx_ttl int32 `xml:"mx_ttl,omitempty" json:"mx_ttl,omitempty"`

	Txt_ttl int32 `xml:"txt_ttl,omitempty" json:"txt_ttl,omitempty"`

	Spf_ttl int32 `xml:"spf_ttl,omitempty" json:"spf_ttl,omitempty"`

	Ptr_ttl int32 `xml:"ptr_ttl,omitempty" json:"ptr_ttl,omitempty"`

	Loc_ttl int32 `xml:"loc_ttl,omitempty" json:"loc_ttl,omitempty"`

	Srv_ttl int32 `xml:"srv_ttl,omitempty" json:"srv_ttl,omitempty"`

	Rp_ttl int32 `xml:"rp_ttl,omitempty" json:"rp_ttl,omitempty"`

	Key_ttl int32 `xml:"key_ttl,omitempty" json:"key_ttl,omitempty"`

	Dnskey_ttl int32 `xml:"dnskey_ttl,omitempty" json:"dnskey_ttl,omitempty"`

	Sshfp_ttl int32 `xml:"sshfp_ttl,omitempty" json:"sshfp_ttl,omitempty"`

	Dhcid_ttl int32 `xml:"dhcid_ttl,omitempty" json:"dhcid_ttl,omitempty"`

	Nsap_ttl int32 `xml:"nsap_ttl,omitempty" json:"nsap_ttl,omitempty"`

	Px_ttl int32 `xml:"px_ttl,omitempty" json:"px_ttl,omitempty"`
}

type LabelData struct {
	A_label []string `xml:"a_label,omitempty" json:"a_label,omitempty"`

	Aaaa_label []string `xml:"aaaa_label,omitempty" json:"aaaa_label,omitempty"`

	Cert_label []string `xml:"cert_label,omitempty" json:"cert_label,omitempty"`

	Cname_label []string `xml:"cname_label,omitempty" json:"cname_label,omitempty"`

	Mx_label []string `xml:"mx_label,omitempty" json:"mx_label,omitempty"`

	Txt_label []string `xml:"txt_label,omitempty" json:"txt_label,omitempty"`

	Spf_label []string `xml:"spf_label,omitempty" json:"spf_label,omitempty"`

	Ptr_label []string `xml:"ptr_label,omitempty" json:"ptr_label,omitempty"`

	Loc_label []string `xml:"loc_label,omitempty" json:"loc_label,omitempty"`

	Srv_label []string `xml:"srv_label,omitempty" json:"srv_label,omitempty"`

	Rp_label []string `xml:"rp_label,omitempty" json:"rp_label,omitempty"`

	Key_label []string `xml:"key_label,omitempty" json:"key_label,omitempty"`

	Dnskey_label []string `xml:"dnskey_label,omitempty" json:"dnskey_label,omitempty"`

	Sshfp_label []string `xml:"sshfp_label,omitempty" json:"sshfp_label,omitempty"`

	Dhcid_label []string `xml:"dhcid_label,omitempty" json:"dhcid_label,omitempty"`

	Nsap_label []string `xml:"nsap_label,omitempty" json:"nsap_label,omitempty"`

	Px_label []string `xml:"px_label,omitempty" json:"px_label,omitempty"`
}

type GeoRegionGroup struct {
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Rdata *ANYRData `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Countries []string `xml:"countries,omitempty" json:"countries,omitempty"`

	Serve_count *ServeCountData `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	Weight *WeightData `xml:"weight,omitempty" json:"weight,omitempty"`

	Ttl *TTLData `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Label *LabelData `xml:"label,omitempty" json:"label,omitempty"`
}

type GeoRegionGroupData struct {
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Rdata *ANYRData `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Countries []string `xml:"countries,omitempty" json:"countries,omitempty"`

	Serve_count *ServeCountData `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	Weight *WeightData `xml:"weight,omitempty" json:"weight,omitempty"`

	Ttl *TTLData `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Label *LabelData `xml:"label,omitempty" json:"label,omitempty"`

	Service_name string `xml:"service_name,omitempty" json:"service_name,omitempty"`
}

type GeoNode struct {
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type Geo struct {
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Groups []*GeoRegionGroup `xml:"groups,omitempty" json:"groups,omitempty"`

	Nodes []*GeoNode `xml:"nodes,omitempty" json:"nodes,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Active string `xml:"active,omitempty" json:"active,omitempty"`
}

type DSFRData struct {
	Type_ string `xml:"type,omitempty" json:"type,omitempty"`

	Data *GenericRData `xml:"data,omitempty" json:"data,omitempty"`

	Ttl string `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type DSFRecord struct {
	Master_line string `xml:"master_line,omitempty" json:"master_line,omitempty"`

	// Rdata to update the svc record with
	Rdata *ANYOneRData `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Label string `xml:"label,omitempty" json:"label,omitempty"`

	Weight string `xml:"weight,omitempty" json:"weight,omitempty"`

	Automation string `xml:"automation,omitempty" json:"automation,omitempty"`

	Endpoints []string `xml:"endpoints,omitempty" json:"endpoints,omitempty"`

	Endpoint_up_count string `xml:"endpoint_up_count,omitempty" json:"endpoint_up_count,omitempty"`

	Eligible string `xml:"eligible,omitempty" json:"eligible,omitempty"`
}

type DSFRecordData struct {
	Dsf_record_id string `xml:"dsf_record_id,omitempty" json:"dsf_record_id,omitempty"`

	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	Dsf_record_set_id string `xml:"dsf_record_set_id,omitempty" json:"dsf_record_set_id,omitempty"`

	Label string `xml:"label,omitempty" json:"label,omitempty"`

	Master_line string `xml:"master_line,omitempty" json:"master_line,omitempty"`

	Weight int32 `xml:"weight,omitempty" json:"weight,omitempty"`

	Automation string `xml:"automation,omitempty" json:"automation,omitempty"`

	Endpoints []string `xml:"endpoints,omitempty" json:"endpoints,omitempty"`

	Endpoint_up_count int32 `xml:"endpoint_up_count,omitempty" json:"endpoint_up_count,omitempty"`

	Eligible string `xml:"eligible,omitempty" json:"eligible,omitempty"`

	Rdata_class string `xml:"rdata_class,omitempty" json:"rdata_class,omitempty"`

	Ttl string `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata []*DSFRData `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Response_time int32 `xml:"response_time,omitempty" json:"response_time,omitempty"`

	Torpidity int32 `xml:"torpidity,omitempty" json:"torpidity,omitempty"`

	Last_monitored int32 `xml:"last_monitored,omitempty" json:"last_monitored,omitempty"`

	Pending_change string `xml:"pending_change,omitempty" json:"pending_change,omitempty"`
}

type DSFRecordSet struct {
	Dsf_record_set_id string `xml:"dsf_record_set_id,omitempty" json:"dsf_record_set_id,omitempty"`

	Failover string `xml:"failover,omitempty" json:"failover,omitempty"`

	Rdata_class string `xml:"rdata_class,omitempty" json:"rdata_class,omitempty"`

	Label string `xml:"label,omitempty" json:"label,omitempty"`

	Dsf_monitor_id string `xml:"dsf_monitor_id,omitempty" json:"dsf_monitor_id,omitempty"`

	Ttl string `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Automation string `xml:"automation,omitempty" json:"automation,omitempty"`

	Eligible string `xml:"eligible,omitempty" json:"eligible,omitempty"`

	Serve_count string `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	Fail_count string `xml:"fail_count,omitempty" json:"fail_count,omitempty"`

	Trouble_count string `xml:"trouble_count,omitempty" json:"trouble_count,omitempty"`

	Torpidity_max string `xml:"torpidity_max,omitempty" json:"torpidity_max,omitempty"`

	Index string `xml:"index,omitempty" json:"index,omitempty"`

	Records []*DSFRecord `xml:"records,omitempty" json:"records,omitempty"`
}

type DSFRecordSetData struct {
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	Dsf_record_set_id string `xml:"dsf_record_set_id,omitempty" json:"dsf_record_set_id,omitempty"`

	Label string `xml:"label,omitempty" json:"label,omitempty"`

	Rdata_class string `xml:"rdata_class,omitempty" json:"rdata_class,omitempty"`

	Ttl string `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Automation string `xml:"automation,omitempty" json:"automation,omitempty"`

	Serve_count string `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	Fail_count string `xml:"fail_count,omitempty" json:"fail_count,omitempty"`

	Trouble_count string `xml:"trouble_count,omitempty" json:"trouble_count,omitempty"`

	Torpidity_max string `xml:"torpidity_max,omitempty" json:"torpidity_max,omitempty"`

	Dsf_monitor_id string `xml:"dsf_monitor_id,omitempty" json:"dsf_monitor_id,omitempty"`

	Eligible string `xml:"eligible,omitempty" json:"eligible,omitempty"`

	Pending_change string `xml:"pending_change,omitempty" json:"pending_change,omitempty"`

	Ttl_derived string `xml:"ttl_derived,omitempty" json:"ttl_derived,omitempty"`

	Records []*DSFRecordData `xml:"records,omitempty" json:"records,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Last_monitored string `xml:"last_monitored,omitempty" json:"last_monitored,omitempty"`
}

type DSFRecordSetFailoverChain struct {
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	Core string `xml:"core,omitempty" json:"core,omitempty"`

	Record_sets []*DSFRecordSet `xml:"record_sets,omitempty" json:"record_sets,omitempty"`
}

type DSFRecordSetFailoverChainData struct {
	Dsf_record_set_failover_chain_id string `xml:"dsf_record_set_failover_chain_id,omitempty" json:"dsf_record_set_failover_chain_id,omitempty"`

	Dsf_response_pool_id string `xml:"dsf_response_pool_id,omitempty" json:"dsf_response_pool_id,omitempty"`

	Label string `xml:"label,omitempty" json:"label,omitempty"`

	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	Core string `xml:"core,omitempty" json:"core,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Pending_change string `xml:"pending_change,omitempty" json:"pending_change,omitempty"`

	Record_sets []*DSFRecordSetData `xml:"record_sets,omitempty" json:"record_sets,omitempty"`
}

type DSFCriteria struct {
	Geoip *DSFGeoIPCriteria `xml:"geoip,omitempty" json:"geoip,omitempty"`
}

type DSFGeoIPCriteria struct {
	Country []string `xml:"country,omitempty" json:"country,omitempty"`

	Region []string `xml:"region,omitempty" json:"region,omitempty"`

	Province []string `xml:"province,omitempty" json:"province,omitempty"`
}

type DSFRulesetData struct {
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	Dsf_ruleset_id string `xml:"dsf_ruleset_id,omitempty" json:"dsf_ruleset_id,omitempty"`

	Label string `xml:"label,omitempty" json:"label,omitempty"`

	Criteria_type string `xml:"criteria_type,omitempty" json:"criteria_type,omitempty"`

	Criteria *DSFCriteria `xml:"criteria,omitempty" json:"criteria,omitempty"`

	Ordering string `xml:"ordering,omitempty" json:"ordering,omitempty"`

	Eligible string `xml:"eligible,omitempty" json:"eligible,omitempty"`

	Response_pools []*DSFResponsePoolData `xml:"response_pools,omitempty" json:"response_pools,omitempty"`

	Pending_change string `xml:"pending_change,omitempty" json:"pending_change,omitempty"`
}

type DSFRuleset struct {
	Dsf_ruleset_id string `xml:"dsf_ruleset_id,omitempty" json:"dsf_ruleset_id,omitempty"`

	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// The type of criteria contained within this Pool
	Criteria_type string `xml:"criteria_type,omitempty" json:"criteria_type,omitempty"`

	// Required based on criteria_type. Filtered in API/BLL
	Criteria *DSFCriteria `xml:"criteria,omitempty" json:"criteria,omitempty"`

	// where in the list of rulesets this should be. Defaults to last.
	Ordering string `xml:"ordering,omitempty" json:"ordering,omitempty"`

	Response_pools []*DSFResponsePool `xml:"response_pools,omitempty" json:"response_pools,omitempty"`
}

type DSFResponsePoolData struct {
	Dsf_response_pool_id string `xml:"dsf_response_pool_id,omitempty" json:"dsf_response_pool_id,omitempty"`

	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// Notify Object
	Notifier string `xml:"notifier,omitempty" json:"notifier,omitempty"`

	Automation string `xml:"automation,omitempty" json:"automation,omitempty"`

	Eligible string `xml:"eligible,omitempty" json:"eligible,omitempty"`

	Core_set_count string `xml:"core_set_count,omitempty" json:"core_set_count,omitempty"`

	Pending_change string `xml:"pending_change,omitempty" json:"pending_change,omitempty"`

	Rs_chains []*DSFRecordSetFailoverChainData `xml:"rs_chains,omitempty" json:"rs_chains,omitempty"`

	Rulesets []*DSFRulesetData `xml:"rulesets,omitempty" json:"rulesets,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Last_monitored string `xml:"last_monitored,omitempty" json:"last_monitored,omitempty"`
}

type DSFResponsePool struct {
	Dsf_response_pool_id string `xml:"dsf_response_pool_id,omitempty" json:"dsf_response_pool_id,omitempty"`

	Failover string `xml:"failover,omitempty" json:"failover,omitempty"`

	Label string `xml:"label,omitempty" json:"label,omitempty"`

	Notifier string `xml:"notifier,omitempty" json:"notifier,omitempty"`

	Core_set_count string `xml:"core_set_count,omitempty" json:"core_set_count,omitempty"`

	Automation string `xml:"automation,omitempty" json:"automation,omitempty"`

	Eligible string `xml:"eligible,omitempty" json:"eligible,omitempty"`

	Rs_chains []*DSFRecordSetFailoverChain `xml:"rs_chains,omitempty" json:"rs_chains,omitempty"`

	Ruleset string `xml:"ruleset,omitempty" json:"ruleset,omitempty"`

	Index string `xml:"index,omitempty" json:"index,omitempty"`
}

type DSFData struct {
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	Active string `xml:"active,omitempty" json:"active,omitempty"`

	Label string `xml:"label,omitempty" json:"label,omitempty"`

	Ttl string `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Nodes []*DSFNode `xml:"nodes,omitempty" json:"nodes,omitempty"`

	Notifiers []*NotifierLinkData `xml:"notifiers,omitempty" json:"notifiers,omitempty"`

	Rulesets []*DSFRulesetData `xml:"rulesets,omitempty" json:"rulesets,omitempty"`

	Pending_change string `xml:"pending_change,omitempty" json:"pending_change,omitempty"`
}

type DSFNode struct {
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type DSFMonitorData struct {

	// ID
	Dsf_monitor_id string `xml:"dsf_monitor_id,omitempty" json:"dsf_monitor_id,omitempty"`

	// Label for the DSF Monitor
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// Indicates whether or not the DSF Monitor is active
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// Num of responses to determine status
	Response_count string `xml:"response_count,omitempty" json:"response_count,omitempty"`

	// Interval, in seconds, between probes
	Probe_interval string `xml:"probe_interval,omitempty" json:"probe_interval,omitempty"`

	// number of attempted retries on failure before giving up
	Retries string `xml:"retries,omitempty" json:"retries,omitempty"`

	// name of the protocol to monitor
	Protocol string `xml:"protocol,omitempty" json:"protocol,omitempty"`

	// options pertaining the monitor
	Options *DSFMonitorOptions `xml:"options,omitempty" json:"options,omitempty"`

	// IDs of attached notifiers
	Notifier []string `xml:"notifier,omitempty" json:"notifier,omitempty"`

	// Endpoints to monitor
	Endpoints []*DSFMonitorEndpoint `xml:"endpoints,omitempty" json:"endpoints,omitempty"`

	// how are agents chosen?
	Agent_scheme string `xml:"agent_scheme,omitempty" json:"agent_scheme,omitempty"`

	// IDs of attached services
	Services []string `xml:"services,omitempty" json:"services,omitempty"`
}

type DSFMonitorEndpoint struct {

	// Indicates whether or not the end point is active
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// label of the endpoint
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// address for the endpoint
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// ordered list of preferred sites for monitoring
	Site_prefs []string `xml:"site_prefs,omitempty" json:"site_prefs,omitempty"`
}

type DSFMonitorOptions struct {

	// time, in seconds, before the check timeout
	Timeout string `xml:"timeout,omitempty" json:"timeout,omitempty"`

	// an alternate port to connect to
	Port string `xml:"port,omitempty" json:"port,omitempty"`

	// a specific path to request
	Path string `xml:"path,omitempty" json:"path,omitempty"`

	// a value to pass into the `HOST:` header
	Host string `xml:"host,omitempty" json:"host,omitempty"`

	// additional header fields
	Header string `xml:"header,omitempty" json:"header,omitempty"`

	// a string to search for in the response
	Expected string `xml:"expected,omitempty" json:"expected,omitempty"`

	Host_override []*DSFMonitorHostOverride `xml:"host_override,omitempty" json:"host_override,omitempty"`
}

type DSFMonitorHostOverride struct {

	// address of an endpoint
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// host to use when checking that endpoint
	Host string `xml:"host,omitempty" json:"host,omitempty"`
}

type DSFMonitorSitesData struct {

	// information for a site performing DSF monitoring
	DSFMonitorSites []*DSFMonitorSite `xml:"DSFMonitorSites,omitempty" json:"DSFMonitorSites,omitempty"`
}

type DSFMonitorSite struct {

	// site code for the monitoring machine
	Code string `xml:"code,omitempty" json:"code,omitempty"`

	// description of the machine's location
	Description string `xml:"description,omitempty" json:"description,omitempty"`

	// CIDR of the monitoring machine(s)
	Address string `xml:"address,omitempty" json:"address,omitempty"`
}

type Notifier struct {

	// Label for the Notifier object
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// List of Recipients attached to the Notifier
	Recipients []*Recipient `xml:"recipients,omitempty" json:"recipients,omitempty"`

	// List of services attached to the Notifier
	Services []*Service `xml:"services,omitempty" json:"services,omitempty"`
}

type NotifierLink struct {

	// Public_id of the Notifier to link to
	Notifier_id string `xml:"notifier_id,omitempty" json:"notifier_id,omitempty"`

	// filters on when services should fire the notifier
	Filters []string `xml:"filters,omitempty" json:"filters,omitempty"`
}

type NotifierDataAlt struct {

	// Public ID of the Notifier object
	Notifier_id string `xml:"notifier_id,omitempty" json:"notifier_id,omitempty"`

	// Label for the Notifier object
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// Indicates whether or not the Notifier is active
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// List of Recepients attached to the Notifier
	Recipients []string `xml:"recipients,omitempty" json:"recipients,omitempty"`

	// List of services attached to the Notifier
	Services []*Service `xml:"services,omitempty" json:"services,omitempty"`
}

type NotifierData struct {

	// Public ID of the Notifier object
	Notifier_id string `xml:"notifier_id,omitempty" json:"notifier_id,omitempty"`

	// Label for the Notifier object
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// Indicates whether or not the Notifier is active
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// List of Recepients attached to the Notifier
	Recipients []*Recipient `xml:"recipients,omitempty" json:"recipients,omitempty"`

	// List of services attached to the Notifier
	Services []*Service `xml:"services,omitempty" json:"services,omitempty"`
}

type NotifierLinkData struct {

	// Public ID of the Notifier object
	Link_id string `xml:"link_id,omitempty" json:"link_id,omitempty"`

	// Indicates whether or not the Notifier link is active
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// filters on when services should fire the notifier
	Filters []string `xml:"filters,omitempty" json:"filters,omitempty"`

	Notifier *NotifierSummaryData `xml:"notifier,omitempty" json:"notifier,omitempty"`
}

type NotifierSummaryData struct {

	// Public ID of the Notifier object
	Notifier_id string `xml:"notifier_id,omitempty" json:"notifier_id,omitempty"`

	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// List of Recepients attached to the Notifier
	Recipients []string `xml:"recipients,omitempty" json:"recipients,omitempty"`

	// Indicates whether or not the Notifier is active
	Active string `xml:"active,omitempty" json:"active,omitempty"`
}

type Recipient struct {

	// email or syslog
	Format string `xml:"format,omitempty" json:"format,omitempty"`

	// For email, valid address or contact name. Syslog - address or hostname
	Recipient string `xml:"recipient,omitempty" json:"recipient,omitempty"`

	// hash of options
	Details *RecipientDetail `xml:"details,omitempty" json:"details,omitempty"`

	// List of string. For email - detail and summary are valid
	Features []string `xml:"features,omitempty" json:"features,omitempty"`
}

type RecipientDetail struct {

	// syslog port
	Port string `xml:"port,omitempty" json:"port,omitempty"`

	// syslog ident
	Ident string `xml:"ident,omitempty" json:"ident,omitempty"`

	// syslog facility
	Facility string `xml:"facility,omitempty" json:"facility,omitempty"`

	// syslog tls
	Tls string `xml:"tls,omitempty" json:"tls,omitempty"`
}

type Service struct {

	// Valid entries - DSF or Monitor
	Service_class string `xml:"service_class,omitempty" json:"service_class,omitempty"`

	// public_id of the specified service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// filters on when services should fire the notifier
	Filters []string `xml:"filters,omitempty" json:"filters,omitempty"`

	// Indicates whether or not the link to the service is active
	Active string `xml:"active,omitempty" json:"active,omitempty"`
}

type ConfigLimitData struct {
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type PermissionZone struct {
	Zone_name string `xml:"zone_name,omitempty" json:"zone_name,omitempty"`

	Recurse string `xml:"recurse,omitempty" json:"recurse,omitempty"`

	// This field is returned in responses from the API, it should not be included in requests.
	Reason []string `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PermissionResponse struct {
	Admin_override string `xml:"admin_override,omitempty" json:"admin_override,omitempty"`

	Allowed []*PermissionData `xml:"allowed,omitempty" json:"allowed,omitempty"`

	Forbidden []*PermissionData `xml:"forbidden,omitempty" json:"forbidden,omitempty"`
}

type PermissionData struct {
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Zone []*PermissionZone `xml:"zone,omitempty" json:"zone,omitempty"`

	Reason []string `xml:"reason,omitempty" json:"reason,omitempty"`
}

type PermissionGroupData struct {
	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	Type_ string `xml:"type,omitempty" json:"type,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`

	Permission []string `xml:"permission,omitempty" json:"permission,omitempty"`

	User_name []string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Subgroup []string `xml:"subgroup,omitempty" json:"subgroup,omitempty"`

	Zone []*PermissionZone `xml:"zone,omitempty" json:"zone,omitempty"`
}

type TSIGKeyData struct {
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Algorithm string `xml:"algorithm,omitempty" json:"algorithm,omitempty"`

	Secret string `xml:"secret,omitempty" json:"secret,omitempty"`
}

type HostStatFlagsData struct {

	// empty for customer-wide default
	Zone_name string `xml:"zone_name,omitempty" json:"zone_name,omitempty"`

	// Y or N
	Active string `xml:"active,omitempty" json:"active,omitempty"`
}

type ZoneData struct {

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// code indicating how serial numbers are constructed on publish
	Serial_style string `xml:"serial_style,omitempty" json:"serial_style,omitempty"`

	// current serial number
	Serial int32 `xml:"serial,omitempty" json:"serial,omitempty"`

	// Type of zone. Primary or Secondary
	Zone_type string `xml:"zone_type,omitempty" json:"zone_type,omitempty"`
}

type SecondaryData struct {
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Masters []string `xml:"masters,omitempty" json:"masters,omitempty"`

	Tsig_key_name string `xml:"tsig_key_name,omitempty" json:"tsig_key_name,omitempty"`

	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`

	Active string `xml:"active,omitempty" json:"active,omitempty"`

	Task_id string `xml:"task_id,omitempty" json:"task_id,omitempty"`
}

type SessionLoginData struct {
	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Version string `xml:"version,omitempty" json:"version,omitempty"`
}

type QueryStatsData struct {
	Csv string `xml:"csv,omitempty" json:"csv,omitempty"`
}

type ARecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataA `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type AAAARecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataAAAA `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type ALIASRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataALIAS `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type CAARecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCAA `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type CDNSKEYRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCDNSKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type CDSRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCDS `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type CERTRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCERT `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type CNAMERecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCNAME `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type CSYNCRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCSYNC `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DHCIDRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataDHCID `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DNAMERecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataDNAME `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DNSKEYRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataDNSKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DSRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataDS `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type IPSECKEYRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataIPSECKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type KEYRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type KXRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataKX `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type LOCRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataLOC `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type MXRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataMX `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type NAPTRRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataNAPTR `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type NSAPRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataNSAP `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type POLICYRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataPOLICY `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type PTRRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataPTR `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type PXRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataPX `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type RPRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataRP `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type SPFRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataSPF `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type SRVRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataSRV `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type SSHFPRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataSSHFP `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type TLSARecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataTLSA `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type TXTRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataTXT `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type SOARecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataSOA `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Serial_style string `xml:"serial_style,omitempty" json:"serial_style,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type RDataSOAUpdate struct {
	Rname string `xml:"rname,omitempty" json:"rname,omitempty"`

	Refresh string `xml:"refresh,omitempty" json:"refresh,omitempty"`

	Retry string `xml:"retry,omitempty" json:"retry,omitempty"`

	Expire string `xml:"expire,omitempty" json:"expire,omitempty"`

	Minimum string `xml:"minimum,omitempty" json:"minimum,omitempty"`
}

type NSRecordData struct {
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataNS `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Service_class string `xml:"service_class,omitempty" json:"service_class,omitempty"`

	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type UserData struct {
	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	User_id string `xml:"user_id,omitempty" json:"user_id,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	Group_name []string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	Nickname string `xml:"nickname,omitempty" json:"nickname,omitempty"`

	First_name string `xml:"first_name,omitempty" json:"first_name,omitempty"`

	Last_name string `xml:"last_name,omitempty" json:"last_name,omitempty"`

	Phone string `xml:"phone,omitempty" json:"phone,omitempty"`

	Fax string `xml:"fax,omitempty" json:"fax,omitempty"`

	Email string `xml:"email,omitempty" json:"email,omitempty"`

	Notify_email string `xml:"notify_email,omitempty" json:"notify_email,omitempty"`

	Pager_email string `xml:"pager_email,omitempty" json:"pager_email,omitempty"`

	Address string `xml:"address,omitempty" json:"address,omitempty"`

	Address_2 string `xml:"address_2,omitempty" json:"address_2,omitempty"`

	City string `xml:"city,omitempty" json:"city,omitempty"`

	State string `xml:"state,omitempty" json:"state,omitempty"`

	Post_code string `xml:"post_code,omitempty" json:"post_code,omitempty"`

	Country string `xml:"country,omitempty" json:"country,omitempty"`

	Website string `xml:"website,omitempty" json:"website,omitempty"`

	Organization string `xml:"organization,omitempty" json:"organization,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`
}

type ContactData struct {
	Nickname string `xml:"nickname,omitempty" json:"nickname,omitempty"`

	First_name string `xml:"first_name,omitempty" json:"first_name,omitempty"`

	Last_name string `xml:"last_name,omitempty" json:"last_name,omitempty"`

	Phone string `xml:"phone,omitempty" json:"phone,omitempty"`

	Fax string `xml:"fax,omitempty" json:"fax,omitempty"`

	Email string `xml:"email,omitempty" json:"email,omitempty"`

	Notify_email string `xml:"notify_email,omitempty" json:"notify_email,omitempty"`

	Pager_email string `xml:"pager_email,omitempty" json:"pager_email,omitempty"`

	Address string `xml:"address,omitempty" json:"address,omitempty"`

	Address_2 string `xml:"address_2,omitempty" json:"address_2,omitempty"`

	City string `xml:"city,omitempty" json:"city,omitempty"`

	State string `xml:"state,omitempty" json:"state,omitempty"`

	Post_code string `xml:"post_code,omitempty" json:"post_code,omitempty"`

	Country string `xml:"country,omitempty" json:"country,omitempty"`

	Website string `xml:"website,omitempty" json:"website,omitempty"`

	Organization string `xml:"organization,omitempty" json:"organization,omitempty"`
}

type CustomerNSData struct {
	Primary string `xml:"primary,omitempty" json:"primary,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type CustomerInterfaceData struct {
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Address []string `xml:"address,omitempty" json:"address,omitempty"`
}

type CustomerData struct {
	Id string `xml:"id,omitempty" json:"id,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	Organization string `xml:"organization,omitempty" json:"organization,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Pool_id string `xml:"pool_id,omitempty" json:"pool_id,omitempty"`

	Activated string `xml:"activated,omitempty" json:"activated,omitempty"`

	Type_ string `xml:"type,omitempty" json:"type,omitempty"`

	Level string `xml:"level,omitempty" json:"level,omitempty"`

	Owner_contact string `xml:"owner_contact,omitempty" json:"owner_contact,omitempty"`

	Billing_contact string `xml:"billing_contact,omitempty" json:"billing_contact,omitempty"`

	Primary_sales_agent string `xml:"primary_sales_agent,omitempty" json:"primary_sales_agent,omitempty"`

	Salesforce_id string `xml:"salesforce_id,omitempty" json:"salesforce_id,omitempty"`

	Default_ns []*CustomerNSData `xml:"default_ns,omitempty" json:"default_ns,omitempty"`

	Interfaces []*CustomerInterfaceData `xml:"interfaces,omitempty" json:"interfaces,omitempty"`

	Admin_user_id string `xml:"admin_user_id,omitempty" json:"admin_user_id,omitempty"`

	Compartment_id string `xml:"compartment_id,omitempty" json:"compartment_id,omitempty"`

	Tenant string `xml:"tenant,omitempty" json:"tenant,omitempty"`
}

type CustomerAdminData struct {
	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	Email string `xml:"email,omitempty" json:"email,omitempty"`

	First_name string `xml:"first_name,omitempty" json:"first_name,omitempty"`

	Last_name string `xml:"last_name,omitempty" json:"last_name,omitempty"`

	Phone string `xml:"phone,omitempty" json:"phone,omitempty"`

	Fax string `xml:"fax,omitempty" json:"fax,omitempty"`

	Notify_email string `xml:"notify_email,omitempty" json:"notify_email,omitempty"`

	Pager_email string `xml:"pager_email,omitempty" json:"pager_email,omitempty"`

	Address string `xml:"address,omitempty" json:"address,omitempty"`

	Address_2 string `xml:"address_2,omitempty" json:"address_2,omitempty"`

	City string `xml:"city,omitempty" json:"city,omitempty"`

	State string `xml:"state,omitempty" json:"state,omitempty"`

	Post_code string `xml:"post_code,omitempty" json:"post_code,omitempty"`

	Country string `xml:"country,omitempty" json:"country,omitempty"`

	Website string `xml:"website,omitempty" json:"website,omitempty"`

	Organization string `xml:"organization,omitempty" json:"organization,omitempty"`
}

type CustomerPrefData struct {

	// name of the pref setting
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	// value of the setting
	Value string `xml:"value,omitempty" json:"value,omitempty"`

	// Y/N: pref is not explicitly set, this is the default value
	Default_ string `xml:"default,omitempty" json:"default,omitempty"`
}

type CustomerIPACL struct {

	// comma or space-delimited list of netmasks, in CIDR form; no '/' assumes exact address
	Netmasks string `xml:"netmasks,omitempty" json:"netmasks,omitempty"`

	// 'Y'/'N', default 'Y'
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// 'web'/'api', default 'web'
	Scope string `xml:"scope,omitempty" json:"scope,omitempty"`
}

type CustomerOracleMetadataData struct {

	// compartment id
	Compartment_id string `xml:"compartment_id,omitempty" json:"compartment_id,omitempty"`

	// customer id
	Cust_id string `xml:"cust_id,omitempty" json:"cust_id,omitempty"`

	// tenant id
	Tenant string `xml:"tenant,omitempty" json:"tenant,omitempty"`
}

type ZoneOracleMetadataData struct {

	// compartment id
	Compartment_id string `xml:"compartment_id,omitempty" json:"compartment_id,omitempty"`

	// public id
	Public_id string `xml:"public_id,omitempty" json:"public_id,omitempty"`

	// zone id
	Zone_id string `xml:"zone_id,omitempty" json:"zone_id,omitempty"`
}

type RedirectData struct {
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl string `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata string `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Rtype string `xml:"rtype,omitempty" json:"rtype,omitempty"`

	SubstituteRtype string `xml:"substituteRtype,omitempty" json:"substituteRtype,omitempty"`
}

type Replacement struct {
	Redirects []*RedirectData `xml:"redirects,omitempty" json:"redirects,omitempty"`
}

type DDNSData struct {

	// an IP address, either v4 or v6
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// either A or AAAA
	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// last time this service was update by a Dynamic DNS client
	Last_updated string `xml:"last_updated,omitempty" json:"last_updated,omitempty"`

	// count of excessive updates
	Abuse_count string `xml:"abuse_count,omitempty" json:"abuse_count,omitempty"`

	// 'Y', 'N'
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type UpdateUserPasswordData struct {
	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type UpdateUser struct {
	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	Group_name []string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`
}

type DDNSHostData struct {
	Ddns *DDNSData `xml:"ddns,omitempty" json:"ddns,omitempty"`

	New_user *UpdateUser `xml:"new_user,omitempty" json:"new_user,omitempty"`
}

type FailoverData struct {

	// normally served address
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// TTL (time-to-live)
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// 'ip' or 'cname'
	Failover_mode string `xml:"failover_mode,omitempty" json:"failover_mode,omitempty"`

	// address or CNAME to serve on failover
	Failover_data string `xml:"failover_data,omitempty" json:"failover_data,omitempty"`

	// restore normal address automatically (Y)
	Auto_recover string `xml:"auto_recover,omitempty" json:"auto_recover,omitempty"`

	// The number of consecutive monitoring intervals to delay before placing an IP address back in service
	Recovery_delay int32 `xml:"recovery_delay,omitempty" json:"recovery_delay,omitempty"`

	// contact that gets status notification
	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`

	// when notifications are sent
	Notify_events string `xml:"notify_events,omitempty" json:"notify_events,omitempty"`

	// The IP or hostname of a syslog server to send monitor events to
	Syslog_server string `xml:"syslog_server,omitempty" json:"syslog_server,omitempty"`

	// The port of the syslog server. Defaults to 514 if not present
	Syslog_port string `xml:"syslog_port,omitempty" json:"syslog_port,omitempty"`

	// The syslog ident to use. Defaults to 'dynect'
	Syslog_ident string `xml:"syslog_ident,omitempty" json:"syslog_ident,omitempty"`

	// The syslog facility to use. Defaults to 'daemon'
	Syslog_facility string `xml:"syslog_facility,omitempty" json:"syslog_facility,omitempty"`

	// When to deliver syslog message; 'change' or 'all'
	Syslog_delivery string `xml:"syslog_delivery,omitempty" json:"syslog_delivery,omitempty"`

	// for custom syslog messages
	Syslog_probe_fmt string `xml:"syslog_probe_fmt,omitempty" json:"syslog_probe_fmt,omitempty"`

	// for custom syslog messages
	Syslog_status_fmt string `xml:"syslog_status_fmt,omitempty" json:"syslog_status_fmt,omitempty"`

	// details about monitoring
	Monitor *MonitorData `xml:"monitor,omitempty" json:"monitor,omitempty"`

	// 'ok', 'trouble', 'failover'
	Status string `xml:"status,omitempty" json:"status,omitempty"`

	// 'Y', 'N'
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// monitoring changes task
	Task_id string `xml:"task_id,omitempty" json:"task_id,omitempty"`

	// Recent monitoring results. This field is returned in responses from the API, it should not be included in requests.
	Log []*MonitorLogData `xml:"log,omitempty" json:"log,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type MonitorData struct {

	// HTTP, HTTPS, PING, SMTP, TCP, NONE
	Protocol string `xml:"protocol,omitempty" json:"protocol,omitempty"`

	// time between checks, in minutes
	Interval int32 `xml:"interval,omitempty" json:"interval,omitempty"`

	// times to retest on failure
	Retries int32 `xml:"retries,omitempty" json:"retries,omitempty"`

	// if different from service default
	Port int32 `xml:"port,omitempty" json:"port,omitempty"`

	// e.g: http://host/path
	Path string `xml:"path,omitempty" json:"path,omitempty"`

	// if different from fqdn
	Host string `xml:"host,omitempty" json:"host,omitempty"`

	// check response for specific text
	Expected string `xml:"expected,omitempty" json:"expected,omitempty"`

	// additional HTTP headers
	Header string `xml:"header,omitempty" json:"header,omitempty"`

	// test timeout
	Timeout int32 `xml:"timeout,omitempty" json:"timeout,omitempty"`
}

type MonitorLogData struct {

	// 'up', 'down', 'unk'
	Status string `xml:"status,omitempty" json:"status,omitempty"`

	// more details on error
	Message string `xml:"message,omitempty" json:"message,omitempty"`

	// unix timestamp of monitor
	Time int32 `xml:"time,omitempty" json:"time,omitempty"`

	// "airport" code
	Site_code string `xml:"site_code,omitempty" json:"site_code,omitempty"`
}

type LoadBalanceData struct {

	// pool of IP addresses to balance
	Pool []*LoadBalanceAddress `xml:"pool,omitempty" json:"pool,omitempty"`

	// TTL (time-to-live)
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// 'ip', 'global', or 'cname'
	Failover_mode string `xml:"failover_mode,omitempty" json:"failover_mode,omitempty"`

	// for 'ip' or 'cname', what to serve on failover
	Failover_data string `xml:"failover_data,omitempty" json:"failover_data,omitempty"`

	// restore normal address automatically (Y)
	Auto_recover string `xml:"auto_recover,omitempty" json:"auto_recover,omitempty"`

	// The number of consecutive monitoring intervals to delay before placing an IP address back in service
	Recovery_delay int32 `xml:"recovery_delay,omitempty" json:"recovery_delay,omitempty"`

	// contact that gets status notification
	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`

	// when notifications are sent
	Notify_events string `xml:"notify_events,omitempty" json:"notify_events,omitempty"`

	// The IP or hostname of a syslog server to send monitor events to
	Syslog_server string `xml:"syslog_server,omitempty" json:"syslog_server,omitempty"`

	// The port of the syslog server. Defaults to 514 if not present
	Syslog_port string `xml:"syslog_port,omitempty" json:"syslog_port,omitempty"`

	// The syslog ident to use. Defaults to 'dynect'
	Syslog_ident string `xml:"syslog_ident,omitempty" json:"syslog_ident,omitempty"`

	// The syslog facility to use. Defaults to 'daemon'
	Syslog_facility string `xml:"syslog_facility,omitempty" json:"syslog_facility,omitempty"`

	// When to deliver syslog message; 'change' or 'all'
	Syslog_delivery string `xml:"syslog_delivery,omitempty" json:"syslog_delivery,omitempty"`

	// for custom syslog messages
	Syslog_probe_fmt string `xml:"syslog_probe_fmt,omitempty" json:"syslog_probe_fmt,omitempty"`

	// for custom syslog messages
	Syslog_status_fmt string `xml:"syslog_status_fmt,omitempty" json:"syslog_status_fmt,omitempty"`

	// number of addresses in each DNS response
	Serve_count int32 `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	// details about monitoring
	Monitor *MonitorData `xml:"monitor,omitempty" json:"monitor,omitempty"`

	// 'ok', 'trouble', 'failover'
	Status string `xml:"status,omitempty" json:"status,omitempty"`

	// 'Y', 'N'
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type LoadBalanceAddress struct {

	// an IP address to monitor and publish
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// a human-readable label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// how often this is served relative to others in pool
	Weight int32 `xml:"weight,omitempty" json:"weight,omitempty"`

	// how this address reponds to monitoring: obey,remove,always,no
	Serve_mode string `xml:"serve_mode,omitempty" json:"serve_mode,omitempty"`

	// current monitoring status This field is returned in responses from the API, it should not be included in requests.
	Status string `xml:"status,omitempty" json:"status,omitempty"`

	// Recent monitoring results for this address. This field is returned in responses from the API, it should not be included in requests.
	Log []*MonitorLogData `xml:"log,omitempty" json:"log,omitempty"`
}

type LoadBalancePoolEntry struct {
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// an IP address to monitor and publish
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// a human-readable label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// how often this is served relative to others in pool
	Weight int32 `xml:"weight,omitempty" json:"weight,omitempty"`

	// how this address reponds to monitoring: obey,remove,always,no
	Serve_mode string `xml:"serve_mode,omitempty" json:"serve_mode,omitempty"`

	// current monitoring status This field is returned in responses from the API, it should not be included in requests.
	Status string `xml:"status,omitempty" json:"status,omitempty"`

	// Recent monitoring results for this address. This field is returned in responses from the API, it should not be included in requests.
	Log []*MonitorLogData `xml:"log,omitempty" json:"log,omitempty"`
}

type GSLBData struct {

	// per-region addresses and configuration
	Region []*GSLBRegion `xml:"region,omitempty" json:"region,omitempty"`

	// TTL (time-to-live)
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// restore normal address automatically (Y)
	Auto_recover string `xml:"auto_recover,omitempty" json:"auto_recover,omitempty"`

	// The number of consecutive monitoring intervals to delay before placing an IP address back in service
	Recovery_delay int32 `xml:"recovery_delay,omitempty" json:"recovery_delay,omitempty"`

	// contact that gets status notification
	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`

	// when notifications are sent
	Notify_events string `xml:"notify_events,omitempty" json:"notify_events,omitempty"`

	// The IP or hostname of a syslog server to send monitor events to
	Syslog_server string `xml:"syslog_server,omitempty" json:"syslog_server,omitempty"`

	// The port of the syslog server. Defaults to 514 if not present
	Syslog_port string `xml:"syslog_port,omitempty" json:"syslog_port,omitempty"`

	// The syslog ident to use. Defaults to 'dynect'
	Syslog_ident string `xml:"syslog_ident,omitempty" json:"syslog_ident,omitempty"`

	// The syslog facility to use. Defaults to 'daemon'
	Syslog_facility string `xml:"syslog_facility,omitempty" json:"syslog_facility,omitempty"`

	// When to deliver syslog message; 'change' or 'all'
	Syslog_delivery string `xml:"syslog_delivery,omitempty" json:"syslog_delivery,omitempty"`

	// for custom syslog messages
	Syslog_probe_fmt string `xml:"syslog_probe_fmt,omitempty" json:"syslog_probe_fmt,omitempty"`

	// for custom syslog messages
	Syslog_status_fmt string `xml:"syslog_status_fmt,omitempty" json:"syslog_status_fmt,omitempty"`

	// details about monitoring
	Monitor *MonitorData `xml:"monitor,omitempty" json:"monitor,omitempty"`

	// 'ok', 'trouble', 'failover'
	Status string `xml:"status,omitempty" json:"status,omitempty"`

	// 'Y', 'N'
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// monitoring changes task
	Task_id string `xml:"task_id,omitempty" json:"task_id,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GSLBRegion struct {

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// 'ip', 'global', or 'cname'
	Failover_mode string `xml:"failover_mode,omitempty" json:"failover_mode,omitempty"`

	// for 'ip' or 'cname', what to serve on failover
	Failover_data string `xml:"failover_data,omitempty" json:"failover_data,omitempty"`

	// number of addresses in each DNS response
	Serve_count int32 `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	// number of 'ok' addresses before region fails over
	Min_healthy int32 `xml:"min_healthy,omitempty" json:"min_healthy,omitempty"`

	// pool of IP addresses to balance
	Pool []*GSLBAddress `xml:"pool,omitempty" json:"pool,omitempty"`
}

type GSLBAddress struct {

	// an IP address or FQDN to monitor and publish
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// a human-readable label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// how often this is served relative to others in pool
	Weight int32 `xml:"weight,omitempty" json:"weight,omitempty"`

	// how this address reponds to monitoring: obey,remove,always,no
	Serve_mode string `xml:"serve_mode,omitempty" json:"serve_mode,omitempty"`

	// current monitoring status This field is returned in responses from the API, it should not be included in requests.
	Status string `xml:"status,omitempty" json:"status,omitempty"`

	// Recent monitoring results for this address. This field is returned in responses from the API, it should not be included in requests.
	Log []*MonitorLogData `xml:"log,omitempty" json:"log,omitempty"`
}

type GSLBRegionData struct {

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// 'ip', 'global', or 'cname'
	Failover_mode string `xml:"failover_mode,omitempty" json:"failover_mode,omitempty"`

	// for 'ip' or 'cname', what to serve on failover
	Failover_data string `xml:"failover_data,omitempty" json:"failover_data,omitempty"`

	// number of addresses in each DNS response
	Serve_count int32 `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	// number of 'ok' addresses before region fails over
	Min_healthy int32 `xml:"min_healthy,omitempty" json:"min_healthy,omitempty"`

	// pool of IP addresses to balance
	Pool []*GSLBAddress `xml:"pool,omitempty" json:"pool,omitempty"`

	// 'ok', 'trouble', 'failover'
	Status string `xml:"status,omitempty" json:"status,omitempty"`

	// monitoring changes task
	Task_id string `xml:"task_id,omitempty" json:"task_id,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GSLBRegionPoolEntry struct {
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// an IP address or FQDN to monitor and publish
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// a human-readable label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// how often this is served relative to others in pool
	Weight int32 `xml:"weight,omitempty" json:"weight,omitempty"`

	// how this address reponds to monitoring: obey,remove,always,no
	Serve_mode string `xml:"serve_mode,omitempty" json:"serve_mode,omitempty"`

	// current monitoring status This field is returned in responses from the API, it should not be included in requests.
	Status string `xml:"status,omitempty" json:"status,omitempty"`

	// monitoring changes task This field is returned in responses from the API, it should not be included in requests.
	Task_id string `xml:"task_id,omitempty" json:"task_id,omitempty"`

	// Recent monitoring results for this address. This field is returned in responses from the API, it should not be included in requests.
	Log []*MonitorLogData `xml:"log,omitempty" json:"log,omitempty"`
}

type RTTMData struct {

	// per-region addresses and configuration
	Region []*RTTMRegion `xml:"region,omitempty" json:"region,omitempty"`

	// TTL (time-to-live)
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// restore normal address automatically (Y)
	Auto_recover string `xml:"auto_recover,omitempty" json:"auto_recover,omitempty"`

	// The number of consecutive monitoring intervals to delay before placing an IP address back in service
	Recovery_delay int32 `xml:"recovery_delay,omitempty" json:"recovery_delay,omitempty"`

	// contact that gets status notification
	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`

	// when notifications are sent
	Notify_events string `xml:"notify_events,omitempty" json:"notify_events,omitempty"`

	// The IP or hostname of a syslog server to send monitor events to
	Syslog_server string `xml:"syslog_server,omitempty" json:"syslog_server,omitempty"`

	// The port of the syslog server. Defaults to 514 if not present
	Syslog_port string `xml:"syslog_port,omitempty" json:"syslog_port,omitempty"`

	// The syslog ident to use. Defaults to 'dynect'
	Syslog_ident string `xml:"syslog_ident,omitempty" json:"syslog_ident,omitempty"`

	// The syslog facility to use. Defaults to 'daemon'
	Syslog_facility string `xml:"syslog_facility,omitempty" json:"syslog_facility,omitempty"`

	// When to deliver syslog message; 'change' or 'all'
	Syslog_delivery string `xml:"syslog_delivery,omitempty" json:"syslog_delivery,omitempty"`

	// for custom syslog messages
	Syslog_probe_fmt string `xml:"syslog_probe_fmt,omitempty" json:"syslog_probe_fmt,omitempty"`

	// for custom syslog messages
	Syslog_status_fmt string `xml:"syslog_status_fmt,omitempty" json:"syslog_status_fmt,omitempty"`

	// for custom syslog messages
	Syslog_rttm_fmt string `xml:"syslog_rttm_fmt,omitempty" json:"syslog_rttm_fmt,omitempty"`

	// details about monitoring
	Monitor *MonitorData `xml:"monitor,omitempty" json:"monitor,omitempty"`

	// details about performance monitoring
	Performance_monitor *MonitorData `xml:"performance_monitor,omitempty" json:"performance_monitor,omitempty"`

	// 'ok', 'unk', 'trouble', 'failover'
	Status string `xml:"status,omitempty" json:"status,omitempty"`

	// 'Y', 'N'
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// monitoring changes task
	Task_id string `xml:"task_id,omitempty" json:"task_id,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type RTTMRegion struct {

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// 'Y' or 'N', if 'Y', region will filled in with global settings
	Autopopulate string `xml:"autopopulate,omitempty" json:"autopopulate,omitempty"`

	// number of addresses in each DNS response
	Serve_count int32 `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	// pool_count, number of addresses to be included in the serve pool
	Ep int32 `xml:"ep,omitempty" json:"ep,omitempty"`

	// 'ip', 'global', 'region', default 'global'
	Failover_mode string `xml:"failover_mode,omitempty" json:"failover_mode,omitempty"`

	// for 'ip' mode, address to serve on failover. For 'region' mode, region_code of the region to failover to.
	Failover_data string `xml:"failover_data,omitempty" json:"failover_data,omitempty"`

	// failover_count, number of addresses that must be 'ok', otherwise a region is considered 'failover'
	Apmc int32 `xml:"apmc,omitempty" json:"apmc,omitempty"`

	// failover_count2, number of addresses that must be 'ok', otherwise a region is considered 'failover'
	Epmc int32 `xml:"epmc,omitempty" json:"epmc,omitempty"`

	// pool of IP addresses to balance
	Pool []*RTTMAddress `xml:"pool,omitempty" json:"pool,omitempty"`

	// 'ok, 'unk', 'trouble', 'failover', This field is returned in responses from the API, it should not be included in requests.
	Status string `xml:"status,omitempty" json:"status,omitempty"`

	// monitoring changes task This field is returned in responses from the API, it should not be included in requests.
	Task_id string `xml:"task_id,omitempty" json:"task_id,omitempty"`
}

type RTTMAddress struct {

	// an IP address to monitor and publish
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// a human-readable label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// how often this is served relative to others in pool
	Weight int32 `xml:"weight,omitempty" json:"weight,omitempty"`

	// how this address reponds to monitoring: obey,remove,always,no
	Serve_mode string `xml:"serve_mode,omitempty" json:"serve_mode,omitempty"`

	// current monitoring status This field is returned in responses from the API, it should not be included in requests.
	Status string `xml:"status,omitempty" json:"status,omitempty"`

	// Recent monitoring results for this address. This field is returned in responses from the API, it should not be included in requests.
	Log []*MonitorLogData `xml:"log,omitempty" json:"log,omitempty"`
}

type RTTMLogData struct {

	// zone serial at which this status was made
	Serial string `xml:"serial,omitempty" json:"serial,omitempty"`

	// timestamp in UTC at which this status was made
	Change_ts string `xml:"change_ts,omitempty" json:"change_ts,omitempty"`

	// type of status change. 'health', 'perf', or 'user'
	Change_type string `xml:"change_type,omitempty" json:"change_type,omitempty"`

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// 'up', 'trouble', 'failover', or 'reg_remove'
	Region_status string `xml:"region_status,omitempty" json:"region_status,omitempty"`

	// If change_type is 'user', the user that made the change
	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	// number of addresses in each DNS response
	Serve_count string `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	// 'A', 'AAAA', or 'CNAME'
	Rdata_type string `xml:"rdata_type,omitempty" json:"rdata_type,omitempty"`

	// List of rdata being served for this region
	Region_rdata []*RTTMLogRData `xml:"region_rdata,omitempty" json:"region_rdata,omitempty"`
}

type RTTMLogRData struct {

	// how often this is served relative to others in pool
	Weight string `xml:"weight,omitempty" json:"weight,omitempty"`

	Rdata_a *RDataA `xml:"rdata_a,omitempty" json:"rdata_a,omitempty"`

	Rdata_aaaa *RDataAAAA `xml:"rdata_aaaa,omitempty" json:"rdata_aaaa,omitempty"`

	Rdata_cname *RDataCNAME `xml:"rdata_cname,omitempty" json:"rdata_cname,omitempty"`
}

type RTTMRegionData struct {

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// 'Y' or 'N', if 'Y', region will filled in with global settings
	Autopopulate string `xml:"autopopulate,omitempty" json:"autopopulate,omitempty"`

	// number of addresses in each DNS response
	Serve_count int32 `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	// pool_count, number of addresses to be included in the serve pool
	Ep int32 `xml:"ep,omitempty" json:"ep,omitempty"`

	// 'ip', 'global', 'region', default 'global'
	Failover_mode string `xml:"failover_mode,omitempty" json:"failover_mode,omitempty"`

	// for 'ip' mode, address to serve on failover. For 'region' mode, region_code of the region to failover to.
	Failover_data string `xml:"failover_data,omitempty" json:"failover_data,omitempty"`

	// failover_count, number of addresses that must be 'ok', otherwise a region is considered 'failover'
	Apmc int32 `xml:"apmc,omitempty" json:"apmc,omitempty"`

	// failover_count2, number of addresses that must be 'ok', otherwise a region is considered 'failover'
	Epmc int32 `xml:"epmc,omitempty" json:"epmc,omitempty"`

	// pool of IP addresses to balance
	Pool []*RTTMAddress `xml:"pool,omitempty" json:"pool,omitempty"`

	// monitoring changes task This field is returned in responses from the API, it should not be included in requests.
	Task_id string `xml:"task_id,omitempty" json:"task_id,omitempty"`

	// 'ok, 'unk', 'trouble', 'failover',
	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type RTTMRegionPoolEntry struct {
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// an IP address to monitor and publish
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// a human-readable label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// how often this is served relative to others in pool
	Weight int32 `xml:"weight,omitempty" json:"weight,omitempty"`

	// how this address reponds to monitoring: obey,remove,always,no
	Serve_mode string `xml:"serve_mode,omitempty" json:"serve_mode,omitempty"`

	// current monitoring status This field is returned in responses from the API, it should not be included in requests.
	Status string `xml:"status,omitempty" json:"status,omitempty"`

	// Recent monitoring results for this address. This field is returned in responses from the API, it should not be included in requests.
	Log []*MonitorLogData `xml:"log,omitempty" json:"log,omitempty"`

	// monitoring changes task This field is returned in responses from the API, it should not be included in requests.
	Task_id string `xml:"task_id,omitempty" json:"task_id,omitempty"`
}

type HTTPRedirectData struct {

	// URL requests are redirecto to
	Url string `xml:"url,omitempty" json:"url,omitempty"`

	// either '301' (temporary) or '302' (permanent)
	Code string `xml:"code,omitempty" json:"code,omitempty"`

	// should redirected URL include requested URL
	Keep_uri string `xml:"keep_uri,omitempty" json:"keep_uri,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type AdvRedirectRuleData struct {

	// Public ID of rule.
	Public_id string `xml:"public_id,omitempty" json:"public_id,omitempty"`

	// either '301' (temporary) or '302' (permanent)
	Code string `xml:"code,omitempty" json:"code,omitempty"`

	// host portion of URL to match
	Host_prefix string `xml:"host_prefix,omitempty" json:"host_prefix,omitempty"`

	// path portion of URL to match
	Path string `xml:"path,omitempty" json:"path,omitempty"`

	// replacement pattern
	Url_pattern string `xml:"url_pattern,omitempty" json:"url_pattern,omitempty"`

	// 'Y'/'N', default 'Y'
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// Public ID of next AdvRedirect rule to be processed. (default to end of list)
	Next_public_id string `xml:"next_public_id,omitempty" json:"next_public_id,omitempty"`
}

type AdvRedirectData struct {

	// 'Y'/'N', default 'Y'
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// List of AdvRedirectRules
	Rules []*AdvRedirectRuleData `xml:"rules,omitempty" json:"rules,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type RDataA struct {
	Address string `xml:"address,omitempty" json:"address,omitempty"`
}

type RDataAAAA struct {
	Address string `xml:"address,omitempty" json:"address,omitempty"`
}

type RDataALIAS struct {
	Alias string `xml:"alias,omitempty" json:"alias,omitempty"`
}

type RDataCAA struct {
	Flags int32 `xml:"flags,omitempty" json:"flags,omitempty"`

	Tag string `xml:"tag,omitempty" json:"tag,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type RDataCDNSKEY struct {
	Flags int32 `xml:"flags,omitempty" json:"flags,omitempty"`

	Algorithm int32 `xml:"algorithm,omitempty" json:"algorithm,omitempty"`

	Protocol int32 `xml:"protocol,omitempty" json:"protocol,omitempty"`

	Public_key string `xml:"public_key,omitempty" json:"public_key,omitempty"`
}

type RDataCDS struct {
	Keytag int32 `xml:"keytag,omitempty" json:"keytag,omitempty"`

	Algorithm int32 `xml:"algorithm,omitempty" json:"algorithm,omitempty"`

	Digtype int32 `xml:"digtype,omitempty" json:"digtype,omitempty"`

	Digest string `xml:"digest,omitempty" json:"digest,omitempty"`
}

type RDataCERT struct {
	Format int32 `xml:"format,omitempty" json:"format,omitempty"`

	Tag int32 `xml:"tag,omitempty" json:"tag,omitempty"`

	Algorithm int32 `xml:"algorithm,omitempty" json:"algorithm,omitempty"`

	Certificate string `xml:"certificate,omitempty" json:"certificate,omitempty"`
}

type RDataCNAME struct {
	Cname string `xml:"cname,omitempty" json:"cname,omitempty"`
}

type RDataCSYNC struct {
	Soa_serial int32 `xml:"soa_serial,omitempty" json:"soa_serial,omitempty"`

	Flags string `xml:"flags,omitempty" json:"flags,omitempty"`

	Types string `xml:"types,omitempty" json:"types,omitempty"`
}

type RDataDNSKEY struct {
	Flags int32 `xml:"flags,omitempty" json:"flags,omitempty"`

	Algorithm int32 `xml:"algorithm,omitempty" json:"algorithm,omitempty"`

	Protocol int32 `xml:"protocol,omitempty" json:"protocol,omitempty"`

	Public_key string `xml:"public_key,omitempty" json:"public_key,omitempty"`
}

type RDataDHCID struct {
	Digest string `xml:"digest,omitempty" json:"digest,omitempty"`
}

type RDataDNAME struct {
	Dname string `xml:"dname,omitempty" json:"dname,omitempty"`
}

type RDataDS struct {
	Keytag int32 `xml:"keytag,omitempty" json:"keytag,omitempty"`

	Algorithm int32 `xml:"algorithm,omitempty" json:"algorithm,omitempty"`

	Digtype int32 `xml:"digtype,omitempty" json:"digtype,omitempty"`

	Digest string `xml:"digest,omitempty" json:"digest,omitempty"`
}

type RDataIPSECKEY struct {
	Precedence int32 `xml:"precedence,omitempty" json:"precedence,omitempty"`

	Gatetype int32 `xml:"gatetype,omitempty" json:"gatetype,omitempty"`

	Algorithm int32 `xml:"algorithm,omitempty" json:"algorithm,omitempty"`

	Gateway string `xml:"gateway,omitempty" json:"gateway,omitempty"`

	Public_key string `xml:"public_key,omitempty" json:"public_key,omitempty"`
}

type RDataKEY struct {
	Flags int32 `xml:"flags,omitempty" json:"flags,omitempty"`

	Algorithm int32 `xml:"algorithm,omitempty" json:"algorithm,omitempty"`

	Protocol int32 `xml:"protocol,omitempty" json:"protocol,omitempty"`

	Public_key string `xml:"public_key,omitempty" json:"public_key,omitempty"`
}

type RDataKX struct {
	Preference int32 `xml:"preference,omitempty" json:"preference,omitempty"`

	Exchange string `xml:"exchange,omitempty" json:"exchange,omitempty"`
}

type RDataLOC struct {
	Latitude string `xml:"latitude,omitempty" json:"latitude,omitempty"`

	Longitude string `xml:"longitude,omitempty" json:"longitude,omitempty"`

	Altitude int32 `xml:"altitude,omitempty" json:"altitude,omitempty"`

	Horiz_pre int32 `xml:"horiz_pre,omitempty" json:"horiz_pre,omitempty"`

	Vert_pre int32 `xml:"vert_pre,omitempty" json:"vert_pre,omitempty"`

	Size int32 `xml:"size,omitempty" json:"size,omitempty"`

	Version int32 `xml:"version,omitempty" json:"version,omitempty"`
}

type RDataMX struct {
	Preference int32 `xml:"preference,omitempty" json:"preference,omitempty"`

	Exchange string `xml:"exchange,omitempty" json:"exchange,omitempty"`
}

type RDataNAPTR struct {
	Order int32 `xml:"order,omitempty" json:"order,omitempty"`

	Preference int32 `xml:"preference,omitempty" json:"preference,omitempty"`

	Flags string `xml:"flags,omitempty" json:"flags,omitempty"`

	Services string `xml:"services,omitempty" json:"services,omitempty"`

	Regexp string `xml:"regexp,omitempty" json:"regexp,omitempty"`

	Replacement string `xml:"replacement,omitempty" json:"replacement,omitempty"`
}

type RDataNS struct {
	Nsdname string `xml:"nsdname,omitempty" json:"nsdname,omitempty"`
}

type RDataNSAP struct {
	Nsap string `xml:"nsap,omitempty" json:"nsap,omitempty"`
}

type RDataPOLICY struct {
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Rtype string `xml:"rtype,omitempty" json:"rtype,omitempty"`

	Api_url string `xml:"api_url,omitempty" json:"api_url,omitempty"`

	Gui_url string `xml:"gui_url,omitempty" json:"gui_url,omitempty"`

	Policy string `xml:"policy,omitempty" json:"policy,omitempty"`
}

type RDataPTR struct {
	Ptrdname string `xml:"ptrdname,omitempty" json:"ptrdname,omitempty"`
}

type RDataPX struct {
	Preference int32 `xml:"preference,omitempty" json:"preference,omitempty"`

	Map822 string `xml:"map822,omitempty" json:"map822,omitempty"`

	Mapx400 string `xml:"mapx400,omitempty" json:"mapx400,omitempty"`
}

type RDataRP struct {
	Mbox string `xml:"mbox,omitempty" json:"mbox,omitempty"`

	Txtdname string `xml:"txtdname,omitempty" json:"txtdname,omitempty"`
}

type RDataSPF struct {
	Txtdata string `xml:"txtdata,omitempty" json:"txtdata,omitempty"`
}

type RDataSSHFP struct {
	Algorithm int32 `xml:"algorithm,omitempty" json:"algorithm,omitempty"`

	Fptype int32 `xml:"fptype,omitempty" json:"fptype,omitempty"`

	Fingerprint string `xml:"fingerprint,omitempty" json:"fingerprint,omitempty"`
}

type RDataSRV struct {
	Priority int32 `xml:"priority,omitempty" json:"priority,omitempty"`

	Weight int32 `xml:"weight,omitempty" json:"weight,omitempty"`

	Port int32 `xml:"port,omitempty" json:"port,omitempty"`

	Target string `xml:"target,omitempty" json:"target,omitempty"`
}

type RDataTLSA struct {
	Cert_usage int32 `xml:"cert_usage,omitempty" json:"cert_usage,omitempty"`

	Selector int32 `xml:"selector,omitempty" json:"selector,omitempty"`

	Match_type int32 `xml:"match_type,omitempty" json:"match_type,omitempty"`

	Certificate string `xml:"certificate,omitempty" json:"certificate,omitempty"`
}

type RDataTXT struct {
	Txtdata string `xml:"txtdata,omitempty" json:"txtdata,omitempty"`
}

type RDataSOA struct {
	Mname string `xml:"mname,omitempty" json:"mname,omitempty"`

	Rname string `xml:"rname,omitempty" json:"rname,omitempty"`

	Serial int32 `xml:"serial,omitempty" json:"serial,omitempty"`

	Refresh int32 `xml:"refresh,omitempty" json:"refresh,omitempty"`

	Retry int32 `xml:"retry,omitempty" json:"retry,omitempty"`

	Expire int32 `xml:"expire,omitempty" json:"expire,omitempty"`

	Minimum int32 `xml:"minimum,omitempty" json:"minimum,omitempty"`
}

type GenericRData struct {
	Rdata_a *RDataA `xml:"rdata_a,omitempty" json:"rdata_a,omitempty"`

	Rdata_aaaa *RDataAAAA `xml:"rdata_aaaa,omitempty" json:"rdata_aaaa,omitempty"`

	Rdata_alias *RDataALIAS `xml:"rdata_alias,omitempty" json:"rdata_alias,omitempty"`

	Rdata_caa *RDataCAA `xml:"rdata_caa,omitempty" json:"rdata_caa,omitempty"`

	Rdata_cdnskey *RDataCDNSKEY `xml:"rdata_cdnskey,omitempty" json:"rdata_cdnskey,omitempty"`

	Rdata_cds *RDataCDS `xml:"rdata_cds,omitempty" json:"rdata_cds,omitempty"`

	Rdata_cert *RDataCERT `xml:"rdata_cert,omitempty" json:"rdata_cert,omitempty"`

	Rdata_cname *RDataCNAME `xml:"rdata_cname,omitempty" json:"rdata_cname,omitempty"`

	Rdata_csync *RDataCSYNC `xml:"rdata_csync,omitempty" json:"rdata_csync,omitempty"`

	Rdata_dhcid *RDataDHCID `xml:"rdata_dhcid,omitempty" json:"rdata_dhcid,omitempty"`

	Rdata_dname *RDataDNAME `xml:"rdata_dname,omitempty" json:"rdata_dname,omitempty"`

	Rdata_dnskey *RDataDNSKEY `xml:"rdata_dnskey,omitempty" json:"rdata_dnskey,omitempty"`

	Rdata_ds *RDataDS `xml:"rdata_ds,omitempty" json:"rdata_ds,omitempty"`

	Rdata_ipseckey *RDataIPSECKEY `xml:"rdata_ipseckey,omitempty" json:"rdata_ipseckey,omitempty"`

	Rdata_key *RDataKEY `xml:"rdata_key,omitempty" json:"rdata_key,omitempty"`

	Rdata_kx *RDataKX `xml:"rdata_kx,omitempty" json:"rdata_kx,omitempty"`

	Rdata_loc *RDataLOC `xml:"rdata_loc,omitempty" json:"rdata_loc,omitempty"`

	Rdata_mx *RDataMX `xml:"rdata_mx,omitempty" json:"rdata_mx,omitempty"`

	Rdata_naptr *RDataNAPTR `xml:"rdata_naptr,omitempty" json:"rdata_naptr,omitempty"`

	Rdata_ns *RDataNS `xml:"rdata_ns,omitempty" json:"rdata_ns,omitempty"`

	Rdata_nsap *RDataNSAP `xml:"rdata_nsap,omitempty" json:"rdata_nsap,omitempty"`

	Rdata_policy *RDataPOLICY `xml:"rdata_policy,omitempty" json:"rdata_policy,omitempty"`

	Rdata_ptr *RDataPTR `xml:"rdata_ptr,omitempty" json:"rdata_ptr,omitempty"`

	Rdata_px *RDataPX `xml:"rdata_px,omitempty" json:"rdata_px,omitempty"`

	Rdata_rp *RDataRP `xml:"rdata_rp,omitempty" json:"rdata_rp,omitempty"`

	Rdata_spf *RDataSPF `xml:"rdata_spf,omitempty" json:"rdata_spf,omitempty"`

	Rdata_sshfp *RDataSSHFP `xml:"rdata_sshfp,omitempty" json:"rdata_sshfp,omitempty"`

	Rdata_srv *RDataSRV `xml:"rdata_srv,omitempty" json:"rdata_srv,omitempty"`

	Rdata_tlsa *RDataTLSA `xml:"rdata_tlsa,omitempty" json:"rdata_tlsa,omitempty"`

	Rdata_txt *RDataTXT `xml:"rdata_txt,omitempty" json:"rdata_txt,omitempty"`

	Rdata_soa *RDataSOA `xml:"rdata_soa,omitempty" json:"rdata_soa,omitempty"`
}

type QNames struct {
	Names []string `xml:"names,omitempty" json:"names,omitempty"`
}

type ANYRecordData struct {
	A_records []*ARecordData `xml:"a_records,omitempty" json:"a_records,omitempty"`

	Aaaa_records []*AAAARecordData `xml:"aaaa_records,omitempty" json:"aaaa_records,omitempty"`

	Alias_records []*ALIASRecordData `xml:"alias_records,omitempty" json:"alias_records,omitempty"`

	Caa_records []*CAARecordData `xml:"caa_records,omitempty" json:"caa_records,omitempty"`

	Cdnskey_records []*CDNSKEYRecordData `xml:"cdnskey_records,omitempty" json:"cdnskey_records,omitempty"`

	Cds_records []*CDSRecordData `xml:"cds_records,omitempty" json:"cds_records,omitempty"`

	Cert_records []*CERTRecordData `xml:"cert_records,omitempty" json:"cert_records,omitempty"`

	Cname_records []*CNAMERecordData `xml:"cname_records,omitempty" json:"cname_records,omitempty"`

	Csync_records []*CSYNCRecordData `xml:"csync_records,omitempty" json:"csync_records,omitempty"`

	Dhcid_records []*DHCIDRecordData `xml:"dhcid_records,omitempty" json:"dhcid_records,omitempty"`

	Dname_records []*DNAMERecordData `xml:"dname_records,omitempty" json:"dname_records,omitempty"`

	Dnskey_records []*DNSKEYRecordData `xml:"dnskey_records,omitempty" json:"dnskey_records,omitempty"`

	Ds_records []*DSRecordData `xml:"ds_records,omitempty" json:"ds_records,omitempty"`

	Ipseckey_records []*IPSECKEYRecordData `xml:"ipseckey_records,omitempty" json:"ipseckey_records,omitempty"`

	Key_records []*KEYRecordData `xml:"key_records,omitempty" json:"key_records,omitempty"`

	Kx_records []*KXRecordData `xml:"kx_records,omitempty" json:"kx_records,omitempty"`

	Loc_records []*LOCRecordData `xml:"loc_records,omitempty" json:"loc_records,omitempty"`

	Mx_records []*MXRecordData `xml:"mx_records,omitempty" json:"mx_records,omitempty"`

	Naptr_records []*NAPTRRecordData `xml:"naptr_records,omitempty" json:"naptr_records,omitempty"`

	Nsap_records []*NSAPRecordData `xml:"nsap_records,omitempty" json:"nsap_records,omitempty"`

	Policy_records []*POLICYRecordData `xml:"policy_records,omitempty" json:"policy_records,omitempty"`

	Ptr_records []*PTRRecordData `xml:"ptr_records,omitempty" json:"ptr_records,omitempty"`

	Px_records []*PXRecordData `xml:"px_records,omitempty" json:"px_records,omitempty"`

	Rp_records []*RPRecordData `xml:"rp_records,omitempty" json:"rp_records,omitempty"`

	Spf_records []*SPFRecordData `xml:"spf_records,omitempty" json:"spf_records,omitempty"`

	Srv_records []*SRVRecordData `xml:"srv_records,omitempty" json:"srv_records,omitempty"`

	Sshfp_records []*SSHFPRecordData `xml:"sshfp_records,omitempty" json:"sshfp_records,omitempty"`

	Tlsa_records []*TLSARecordData `xml:"tlsa_records,omitempty" json:"tlsa_records,omitempty"`

	Txt_records []*TXTRecordData `xml:"txt_records,omitempty" json:"txt_records,omitempty"`

	Soa_records []*SOARecordData `xml:"soa_records,omitempty" json:"soa_records,omitempty"`

	Ns_records []*NSRecordData `xml:"ns_records,omitempty" json:"ns_records,omitempty"`
}

type ANYRData struct {
	A_rdata []*RDataA `xml:"a_rdata,omitempty" json:"a_rdata,omitempty"`

	Aaaa_rdata []*RDataAAAA `xml:"aaaa_rdata,omitempty" json:"aaaa_rdata,omitempty"`

	Alias_rdata []*RDataALIAS `xml:"alias_rdata,omitempty" json:"alias_rdata,omitempty"`

	Caa_rdata []*RDataCAA `xml:"caa_rdata,omitempty" json:"caa_rdata,omitempty"`

	Cdnskey_rdata []*RDataCDNSKEY `xml:"cdnskey_rdata,omitempty" json:"cdnskey_rdata,omitempty"`

	Cds_rdata []*RDataCDS `xml:"cds_rdata,omitempty" json:"cds_rdata,omitempty"`

	Cert_rdata []*RDataCERT `xml:"cert_rdata,omitempty" json:"cert_rdata,omitempty"`

	Cname_rdata []*RDataCNAME `xml:"cname_rdata,omitempty" json:"cname_rdata,omitempty"`

	Csync_rdata []*RDataCSYNC `xml:"csync_rdata,omitempty" json:"csync_rdata,omitempty"`

	Dhcid_rdata []*RDataDHCID `xml:"dhcid_rdata,omitempty" json:"dhcid_rdata,omitempty"`

	Dname_rdata []*RDataDNAME `xml:"dname_rdata,omitempty" json:"dname_rdata,omitempty"`

	Dnskey_rdata []*RDataDNSKEY `xml:"dnskey_rdata,omitempty" json:"dnskey_rdata,omitempty"`

	Ds_rdata []*RDataDS `xml:"ds_rdata,omitempty" json:"ds_rdata,omitempty"`

	Ipseckey_rdata []*RDataIPSECKEY `xml:"ipseckey_rdata,omitempty" json:"ipseckey_rdata,omitempty"`

	Key_rdata []*RDataKEY `xml:"key_rdata,omitempty" json:"key_rdata,omitempty"`

	Kx_rdata []*RDataKX `xml:"kx_rdata,omitempty" json:"kx_rdata,omitempty"`

	Loc_rdata []*RDataLOC `xml:"loc_rdata,omitempty" json:"loc_rdata,omitempty"`

	Mx_rdata []*RDataMX `xml:"mx_rdata,omitempty" json:"mx_rdata,omitempty"`

	Naptr_rdata []*RDataNAPTR `xml:"naptr_rdata,omitempty" json:"naptr_rdata,omitempty"`

	Nsap_rdata []*RDataNSAP `xml:"nsap_rdata,omitempty" json:"nsap_rdata,omitempty"`

	Policy_rdata []*RDataPOLICY `xml:"policy_rdata,omitempty" json:"policy_rdata,omitempty"`

	Ptr_rdata []*RDataPTR `xml:"ptr_rdata,omitempty" json:"ptr_rdata,omitempty"`

	Px_rdata []*RDataPX `xml:"px_rdata,omitempty" json:"px_rdata,omitempty"`

	Rp_rdata []*RDataRP `xml:"rp_rdata,omitempty" json:"rp_rdata,omitempty"`

	Spf_rdata []*RDataSPF `xml:"spf_rdata,omitempty" json:"spf_rdata,omitempty"`

	Srv_rdata []*RDataSRV `xml:"srv_rdata,omitempty" json:"srv_rdata,omitempty"`

	Sshfp_rdata []*RDataSSHFP `xml:"sshfp_rdata,omitempty" json:"sshfp_rdata,omitempty"`

	Tlsa_rdata []*RDataTLSA `xml:"tlsa_rdata,omitempty" json:"tlsa_rdata,omitempty"`

	Txt_rdata []*RDataTXT `xml:"txt_rdata,omitempty" json:"txt_rdata,omitempty"`

	Soa_rdata []*RDataSOA `xml:"soa_rdata,omitempty" json:"soa_rdata,omitempty"`

	Ns_rdata []*RDataNS `xml:"ns_rdata,omitempty" json:"ns_rdata,omitempty"`
}

type ANYOneRData struct {
	A_rdata *RDataA `xml:"a_rdata,omitempty" json:"a_rdata,omitempty"`

	Aaaa_rdata *RDataAAAA `xml:"aaaa_rdata,omitempty" json:"aaaa_rdata,omitempty"`

	Alias_rdata *RDataALIAS `xml:"alias_rdata,omitempty" json:"alias_rdata,omitempty"`

	Caa_rdata *RDataCAA `xml:"caa_rdata,omitempty" json:"caa_rdata,omitempty"`

	Cdnskey_rdata *RDataCDNSKEY `xml:"cdnskey_rdata,omitempty" json:"cdnskey_rdata,omitempty"`

	Cds_rdata *RDataCDS `xml:"cds_rdata,omitempty" json:"cds_rdata,omitempty"`

	Cert_rdata *RDataCERT `xml:"cert_rdata,omitempty" json:"cert_rdata,omitempty"`

	Cname_rdata *RDataCNAME `xml:"cname_rdata,omitempty" json:"cname_rdata,omitempty"`

	Csync_rdata *RDataCSYNC `xml:"csync_rdata,omitempty" json:"csync_rdata,omitempty"`

	Dhcid_rdata *RDataDHCID `xml:"dhcid_rdata,omitempty" json:"dhcid_rdata,omitempty"`

	Dname_rdata *RDataDNAME `xml:"dname_rdata,omitempty" json:"dname_rdata,omitempty"`

	Dnskey_rdata *RDataDNSKEY `xml:"dnskey_rdata,omitempty" json:"dnskey_rdata,omitempty"`

	Ds_rdata *RDataDS `xml:"ds_rdata,omitempty" json:"ds_rdata,omitempty"`

	Ipseckey_rdata *RDataIPSECKEY `xml:"ipseckey_rdata,omitempty" json:"ipseckey_rdata,omitempty"`

	Key_rdata *RDataKEY `xml:"key_rdata,omitempty" json:"key_rdata,omitempty"`

	Kx_rdata *RDataKX `xml:"kx_rdata,omitempty" json:"kx_rdata,omitempty"`

	Loc_rdata *RDataLOC `xml:"loc_rdata,omitempty" json:"loc_rdata,omitempty"`

	Mx_rdata *RDataMX `xml:"mx_rdata,omitempty" json:"mx_rdata,omitempty"`

	Naptr_rdata *RDataNAPTR `xml:"naptr_rdata,omitempty" json:"naptr_rdata,omitempty"`

	Nsap_rdata *RDataNSAP `xml:"nsap_rdata,omitempty" json:"nsap_rdata,omitempty"`

	Policy_rdata *RDataPOLICY `xml:"policy_rdata,omitempty" json:"policy_rdata,omitempty"`

	Ptr_rdata *RDataPTR `xml:"ptr_rdata,omitempty" json:"ptr_rdata,omitempty"`

	Px_rdata *RDataPX `xml:"px_rdata,omitempty" json:"px_rdata,omitempty"`

	Rp_rdata *RDataRP `xml:"rp_rdata,omitempty" json:"rp_rdata,omitempty"`

	Spf_rdata *RDataSPF `xml:"spf_rdata,omitempty" json:"spf_rdata,omitempty"`

	Srv_rdata *RDataSRV `xml:"srv_rdata,omitempty" json:"srv_rdata,omitempty"`

	Sshfp_rdata *RDataSSHFP `xml:"sshfp_rdata,omitempty" json:"sshfp_rdata,omitempty"`

	Tlsa_rdata *RDataTLSA `xml:"tlsa_rdata,omitempty" json:"tlsa_rdata,omitempty"`

	Txt_rdata *RDataTXT `xml:"txt_rdata,omitempty" json:"txt_rdata,omitempty"`

	Soa_rdata *RDataSOA `xml:"soa_rdata,omitempty" json:"soa_rdata,omitempty"`

	Ns_rdata *RDataNS `xml:"ns_rdata,omitempty" json:"ns_rdata,omitempty"`
}

type ZoneChangeData struct {
	Id int64 `xml:"id,omitempty" json:"id,omitempty"`

	User_id int64 `xml:"user_id,omitempty" json:"user_id,omitempty"`

	Rdata_type string `xml:"rdata_type,omitempty" json:"rdata_type,omitempty"`

	Rdata *GenericRData `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Serial int32 `xml:"serial,omitempty" json:"serial,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type ZoneNoteData struct {
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Serial int32 `xml:"serial,omitempty" json:"serial,omitempty"`

	Type_ string `xml:"type,omitempty" json:"type,omitempty"`

	Note string `xml:"note,omitempty" json:"note,omitempty"`

	Timestamp string `xml:"timestamp,omitempty" json:"timestamp,omitempty"`
}

type ZoneTransferStatus struct {
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Master_ip string `xml:"master_ip,omitempty" json:"master_ip,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Message string `xml:"message,omitempty" json:"message,omitempty"`
}

type ZoneConfigOptionData struct {
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`

	Target string `xml:"target,omitempty" json:"target,omitempty"`
}

type PublishZoneData struct {
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Serial int32 `xml:"serial,omitempty" json:"serial,omitempty"`

	Serial_style string `xml:"serial_style,omitempty" json:"serial_style,omitempty"`

	Zone_type string `xml:"zone_type,omitempty" json:"zone_type,omitempty"`

	Task_id string `xml:"task_id,omitempty" json:"task_id,omitempty"`
}

type IPTrackData struct {

	// A, Dynamic_A, AAAA, Dynamic_AAAA
	Record_types []string `xml:"record_types,omitempty" json:"record_types,omitempty"`

	// List of hostnames to watch for records
	Hosts []string `xml:"hosts,omitempty" json:"hosts,omitempty"`

	// 'match', 'default', or a valid ttl
	Ttl string `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// Mask that records should match
	Netmask string `xml:"netmask,omitempty" json:"netmask,omitempty"`

	Iptrack_id int64 `xml:"iptrack_id,omitempty" json:"iptrack_id,omitempty"`

	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DNSSECData struct {
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// ,      contact that gets key notifications
	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`

	// when notifications are sent
	Notify_events string `xml:"notify_events,omitempty" json:"notify_events,omitempty"`

	Keys []*DNSSECKey `xml:"keys,omitempty" json:"keys,omitempty"`

	Active string `xml:"active,omitempty" json:"active,omitempty"`
}

type DNSSECKey struct {

	// 'KSK' or 'ZSK'
	Type_ string `xml:"type,omitempty" json:"type,omitempty"`

	// 'RSA/SHA-1', 'RSA/SHA-256', 'RSA/SHA-512', 'DSA'
	Algorithm string `xml:"algorithm,omitempty" json:"algorithm,omitempty"`

	Bits string `xml:"bits,omitempty" json:"bits,omitempty"`

	Start_ts int32 `xml:"start_ts,omitempty" json:"start_ts,omitempty"`

	Lifetime int32 `xml:"lifetime,omitempty" json:"lifetime,omitempty"`

	Overlap int32 `xml:"overlap,omitempty" json:"overlap,omitempty"`

	Expire_ts int32 `xml:"expire_ts,omitempty" json:"expire_ts,omitempty"`

	// Only for updates: 'rollover', 'rollover_now', 'remove'
	Action string `xml:"action,omitempty" json:"action,omitempty"`

	Dnssec_key_id int64 `xml:"dnssec_key_id,omitempty" json:"dnssec_key_id,omitempty"`

	// This field is returned in responses from the API, it should not be included in requests.
	Dnskey *RDataDNSKEY `xml:"dnskey,omitempty" json:"dnskey,omitempty"`

	// preserved for compatibility This field is returned in responses from the API, it should not be included in requests.
	Ds *RDataDS `xml:"ds,omitempty" json:"ds,omitempty"`

	All_ds []*RDataDS `xml:"all_ds,omitempty" json:"all_ds,omitempty"`
}

type DNSSECTimelineEvent struct {
	Scheduled_ts int32 `xml:"scheduled_ts,omitempty" json:"scheduled_ts,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Event string `xml:"event,omitempty" json:"event,omitempty"`

	Message string `xml:"message,omitempty" json:"message,omitempty"`

	Send_notify string `xml:"send_notify,omitempty" json:"send_notify,omitempty"`

	User string `xml:"user,omitempty" json:"user,omitempty"`

	Dnssec_key_id int64 `xml:"dnssec_key_id,omitempty" json:"dnssec_key_id,omitempty"`
}

type TaskArgData struct {
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type TaskIDData struct {
	Task_id string `xml:"task_id,omitempty" json:"task_id,omitempty"`
}

type TaskData struct {
	Task_id string `xml:"task_id,omitempty" json:"task_id,omitempty"`

	// identifies the task operation
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	Zone_name string `xml:"zone_name,omitempty" json:"zone_name,omitempty"`

	// ready running waiting complete failed canceled stalled
	Status string `xml:"status,omitempty" json:"status,omitempty"`

	// in a multi-step process, how far along
	Step_count int32 `xml:"step_count,omitempty" json:"step_count,omitempty"`

	// total number of steps in multi-step process
	Total_steps int32 `xml:"total_steps,omitempty" json:"total_steps,omitempty"`

	// Y/N - does this task block further zone operations?
	Blocking string `xml:"blocking,omitempty" json:"blocking,omitempty"`

	Message string `xml:"message,omitempty" json:"message,omitempty"`

	Debug string `xml:"debug,omitempty" json:"debug,omitempty"`

	Created_ts int64 `xml:"created_ts,omitempty" json:"created_ts,omitempty"`

	Modified_ts int64 `xml:"modified_ts,omitempty" json:"modified_ts,omitempty"`

	// other arguments passed to the task
	Args []*TaskArgData `xml:"args,omitempty" json:"args,omitempty"`
}

type ExtNameserverData struct {

	// can be empty or 'default'
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// Y/N - does this block requests or add them
	Deny string `xml:"deny,omitempty" json:"deny,omitempty"`

	Hosts []*ExtNSEntry `xml:"hosts,omitempty" json:"hosts,omitempty"`

	Tsig_key_name string `xml:"tsig_key_name,omitempty" json:"tsig_key_name,omitempty"`

	Active string `xml:"active,omitempty" json:"active,omitempty"`
}

type ExtNSEntry struct {

	// address or CIDR
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// Y/N - do we send NOTIFYs to this host?
	Notifies string `xml:"notifies,omitempty" json:"notifies,omitempty"`

	// Y/N - do we accept [AI]XFRs from this host?
	Transfers string `xml:"transfers,omitempty" json:"transfers,omitempty"`
}

type ErrorResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ErrorResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	// should be empty and can be ignored
	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type GetJobRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetJobRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`
}

type GetJobResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetJobResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	// Contains the response data.  Can be any type as GetJob is request-agnostic.
	Data interface{} `xml:"data,omitempty" json:"data,omitempty"`
}

type SessionLoginRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SessionLoginRequest"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type SessionLoginResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SessionLoginResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	// identifies your session token (needed for all other Dynect API calls) and the API protocol version
	Data *SessionLoginData `xml:"data,omitempty" json:"data,omitempty"`
}

type SessionLogoutRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SessionLogoutRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`
}

type SessionLogoutResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SessionLogoutResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type SessionIsAliveRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SessionIsAliveRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`
}

type SessionIsAliveResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SessionIsAliveResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type SessionKeepAliveRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SessionKeepAliveRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`
}

type SessionKeepAliveResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SessionKeepAliveResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type ScopeInRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ScopeInRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	// defaults to admin user
	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`
}

type ScopeInResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ScopeInResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type ScopeAsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ScopeAsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	// defaults to admin user
	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`
}

type ScopeAsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ScopeAsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type UnscopeRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UnscopeRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`
}

type UnscopeResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UnscopeResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type GetQueryStatsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetQueryStatsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// The timestamp indicating the beginning of the period to report on
	Start_ts int32 `xml:"start_ts,omitempty" json:"start_ts,omitempty"`

	// The timestamp indicating the end of the period to report on
	End_ts int32 `xml:"end_ts,omitempty" json:"end_ts,omitempty"`

	// The fields to break down the data with
	Breakdown []string `xml:"breakdown,omitempty" json:"breakdown,omitempty"`

	// A list of specific hostnames to report on.  A hostname beginning with '!' will cause that hostname to be excluded
	Hosts []string `xml:"hosts,omitempty" json:"hosts,omitempty"`

	// A list of specific nameservers to report on.  A nameserver beginning with '!' will cause that nameserver to be excluded
	Nameservers []string `xml:"nameservers,omitempty" json:"nameservers,omitempty"`

	// A list of record types to report on.  A record type beginning with '!' will cause that record type to be excluded
	Rrecs []string `xml:"rrecs,omitempty" json:"rrecs,omitempty"`

	// A list of zone names to report on.  A zone name beginning with '!' will cause that zone to be excluded.
	Zones []string `xml:"zones,omitempty" json:"zones,omitempty"`
}

type GetQueryStatsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetQueryStatsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	// The CSV data containing the requested statistics
	Data *QueryStatsData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateGeoRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateGeoRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Name of the service we want to create
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	// List of region groups that contain a list of countries and records to be served
	Groups []*GeoRegionGroup `xml:"groups,omitempty" json:"groups,omitempty"`

	// List of zone name, node name pairs to link a node to the Geo Service
	Nodes []*GeoNode `xml:"nodes,omitempty" json:"nodes,omitempty"`

	// Default TTL for records
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type CreateGeoResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateGeoResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *Geo `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateGeoRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateGeoRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Name of the Geo Service to update
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	// The new name to assign to the Geo Service
	New_name string `xml:"new_name,omitempty" json:"new_name,omitempty"`

	// List of region groups that contain a list of countries and records to be served
	Groups []*GeoRegionGroup `xml:"groups,omitempty" json:"groups,omitempty"`

	// List of zone name, node name pairs to link a node to the Geo Service
	Nodes []*GeoNode `xml:"nodes,omitempty" json:"nodes,omitempty"`

	// Default TTL for records
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateGeoResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateGeoResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *Geo `xml:"data,omitempty" json:"data,omitempty"`
}

type GetGeosRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetGeosRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Name (partial) of the Geo Service to find
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	// Name (partial) of the Geo Region Group to find
	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`
}

type GetGeosResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetGeosResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*Geo `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneGeoRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneGeoRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Name (partial) of the Geo Service to find
	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type GetOneGeoResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneGeoResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *Geo `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneGeoRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneGeoRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Name of the Geo Service to delete
	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type DeleteOneGeoResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneGeoResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type ActivateGeoRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateGeoRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Name of the Geo Service to activate
	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type ActivateGeoResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateGeoResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *Geo `xml:"data,omitempty" json:"data,omitempty"`
}

type DeactivateGeoRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateGeoRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Name of the Geo Service to deactivate
	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type DeactivateGeoResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateGeoResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *Geo `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateGeoRegionGroupRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateGeoRegionGroupRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Name of the Geo Service to update
	Service_name string `xml:"service_name,omitempty" json:"service_name,omitempty"`

	// ,				Name of the Region Group
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	// Rdata to update the Region Group with
	Rdata *ANYRData `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// List of countries to update the Region Group with
	Countries []string `xml:"countries,omitempty" json:"countries,omitempty"`

	// Optional weights to accompany the rdata
	Weight *WeightData `xml:"weight,omitempty" json:"weight,omitempty"`

	// Optional serve counts to accompany the rdata
	Serve_count *ServeCountData `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	// Optional Default TTL values for each record
	Ttl *TTLData `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// Optional labels for the rdata
	Label *LabelData `xml:"label,omitempty" json:"label,omitempty"`
}

type CreateGeoRegionGroupResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateGeoRegionGroupResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *Geo `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateGeoRegionGroupRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateGeoRegionGroupRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Name of the Geo Service to update
	Service_name string `xml:"service_name,omitempty" json:"service_name,omitempty"`

	// ,				Name of the Region Group
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	// Rdata to update the Region Group with
	Rdata *ANYRData `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// List of countries to update the Region Group with
	Countries []string `xml:"countries,omitempty" json:"countries,omitempty"`

	// Optional weights to accompany the rdata
	Weight *WeightData `xml:"weight,omitempty" json:"weight,omitempty"`

	// Optional serve counts to accompany the rdata
	Serve_count *ServeCountData `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	// Optional Default TTL values for each record
	Ttl *TTLData `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// Optional labels for the rdata
	Label *LabelData `xml:"label,omitempty" json:"label,omitempty"`
}

type UpdateGeoRegionGroupResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateGeoRegionGroupResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *Geo `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneGeoRegionGroupRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneGeoRegionGroupRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Name of the Geo Service to update
	Service_name string `xml:"service_name,omitempty" json:"service_name,omitempty"`

	// ,			Name of the Region Group
	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type DeleteOneGeoRegionGroupResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneGeoRegionGroupResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type GetGeoRegionGroupsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetGeoRegionGroupsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Name of the Geo Service to update
	Service_name string `xml:"service_name,omitempty" json:"service_name,omitempty"`
}

type GetGeoRegionGroupsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetGeoRegionGroupsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*GeoRegionGroupData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneGeoRegionGroupRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneGeoRegionGroupRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Name of the Geo Service to update
	Service_name string `xml:"service_name,omitempty" json:"service_name,omitempty"`

	// ,			Name of the Region Group
	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type GetOneGeoRegionGroupResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneGeoRegionGroupResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *GeoRegionGroupData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateGeoNodeRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateGeoNodeRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Name of the Geo Service to add the nodes to
	Service_name string `xml:"service_name,omitempty" json:"service_name,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type CreateGeoNodeResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateGeoNodeResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *Geo `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneGeoNodeRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneGeoNodeRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Name of the Geo Service to delete the nodes from
	Service_name string `xml:"service_name,omitempty" json:"service_name,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteOneGeoNodeResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneGeoNodeResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type GetGeoNodesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetGeoNodesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Name of the Geo Service
	Service_name string `xml:"service_name,omitempty" json:"service_name,omitempty"`
}

type GetGeoNodesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetGeoNodesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateDSFRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDSFRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// DSF Label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// Default TTL to be used in this service
	Ttl string `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// A list of fqdn,zone pairs to identify nodes to attach
	Nodes []*DSFNode `xml:"nodes,omitempty" json:"nodes,omitempty"`

	// A list of DSF Rulesets defined for the service
	Rulesets []*DSFRuleset `xml:"rulesets,omitempty" json:"rulesets,omitempty"`

	// A list of notifier links
	Notifiers []*NotifierLink `xml:"notifiers,omitempty" json:"notifiers,omitempty"`

	// If 'Y', service will be published on creation
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional Publish Notes.
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type CreateDSFResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDSFResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateDSFRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSFRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF service to update
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// A new label for the service
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// Default TTL to be used
	Ttl string `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// A list of fqdn,zone pairs to identify nodes to attach
	Nodes []*DSFNode `xml:"nodes,omitempty" json:"nodes,omitempty"`

	Rulesets []*DSFRuleset `xml:"rulesets,omitempty" json:"rulesets,omitempty"`

	// A list of notifier links
	Notifiers []*NotifierLink `xml:"notifiers,omitempty" json:"notifiers,omitempty"`

	// If true, the service is immediately published
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional Publish Notes.
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type UpdateDSFResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSFResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetDSFsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// label, ID, or wildcard
	Cust string `xml:"cust,omitempty" json:"cust,omitempty"`

	// label or ID
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// wildcard
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// linker
	Linker string `xml:"linker,omitempty" json:"linker,omitempty"`

	// response will include pending changes
	Pending_changes string `xml:"pending_changes,omitempty" json:"pending_changes,omitempty"`
}

type GetDSFsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DSFData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetDSFNotifiersRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFNotifiersRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Identifier for DSF service to search on
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`
}

type GetDSFNotifiersResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFNotifiersResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*NotifierDataAlt `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneDSFRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSFRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF service to delete
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`
}

type DeleteOneDSFResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSFResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneDSFRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDSFRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// label or ID
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// response will include pending changes
	Pending_changes string `xml:"pending_changes,omitempty" json:"pending_changes,omitempty"`
}

type GetOneDSFResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDSFResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFData `xml:"data,omitempty" json:"data,omitempty"`
}

type RevertDSFRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RevertDSFRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// label or ID
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`
}

type RevertDSFResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RevertDSFResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFData `xml:"data,omitempty" json:"data,omitempty"`
}

type PublishDSFRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ PublishDSFRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// label or ID
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// Optional notes
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type PublishDSFResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ PublishDSFResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFData `xml:"data,omitempty" json:"data,omitempty"`
}

type AddDSFNotifierRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddDSFNotifierRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Identifier for DSF service to search on
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// Public_id of the Notifier to link to
	Notifier_id string `xml:"notifier_id,omitempty" json:"notifier_id,omitempty"`

	// filters on when services should fire the notifier
	Filters []string `xml:"filters,omitempty" json:"filters,omitempty"`

	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional notes
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type AddDSFNotifierResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddDSFNotifierResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *NotifierLinkData `xml:"data,omitempty" json:"data,omitempty"`
}

type RemoveDSFNotifierRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemoveDSFNotifierRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Identifier for DSF service to search on
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// Public_id of the Notifier to link to
	Link_id string `xml:"link_id,omitempty" json:"link_id,omitempty"`

	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional notes
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type RemoveDSFNotifierResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemoveDSFNotifierResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *NotifierLinkData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateDSFRulesetRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDSFRulesetRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// Ruleset label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// The type of criteria contained within this Pool
	Criteria_type string `xml:"criteria_type,omitempty" json:"criteria_type,omitempty"`

	// Required based on criteria_type. Filtered in API/BLL
	Criteria *DSFCriteria `xml:"criteria,omitempty" json:"criteria,omitempty"`

	// Where in the chain does the ruleset land. Defautls to the last.
	Ordering string `xml:"ordering,omitempty" json:"ordering,omitempty"`

	// A list of DSF Reponse Pools that comprise the Ruleset
	Response_pools []*DSFResponsePool `xml:"response_pools,omitempty" json:"response_pools,omitempty"`

	// boolean - immediately save change and publish
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional notes
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type CreateDSFRulesetResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDSFRulesetResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFRulesetData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateDSFRulesetRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSFRulesetRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// ID of the ruleset to update
	Dsf_ruleset_id string `xml:"dsf_ruleset_id,omitempty" json:"dsf_ruleset_id,omitempty"`

	// Ruleset label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// The type of criteria contained within this Pool
	Criteria_type string `xml:"criteria_type,omitempty" json:"criteria_type,omitempty"`

	// Required based on criteria_type. Filtered in API/BLL
	Criteria *DSFCriteria `xml:"criteria,omitempty" json:"criteria,omitempty"`

	// Where in the chain does the ruleset land. Defautls to the last.
	Ordering string `xml:"ordering,omitempty" json:"ordering,omitempty"`

	// A list of DSF Reponse Pools that comprise the Ruleset
	Response_pools []*DSFResponsePool `xml:"response_pools,omitempty" json:"response_pools,omitempty"`

	// boolean - immediately save change and publish
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional Publish Notes.
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type UpdateDSFRulesetResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSFRulesetResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFRulesetData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetDSFRulesetsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFRulesetsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// Ruleset label to search on. Can be wildcarded
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// Can be wildcarded...must be string representation
	Criteria string `xml:"criteria,omitempty" json:"criteria,omitempty"`

	// The type of criteria contained within this Pool
	Criteria_type string `xml:"criteria_type,omitempty" json:"criteria_type,omitempty"`

	// Where in the chain does the ruleset land. Defautls to the last.
	Ordering string `xml:"ordering,omitempty" json:"ordering,omitempty"`

	// response will include pending changes
	Pending_changes string `xml:"pending_changes,omitempty" json:"pending_changes,omitempty"`
}

type GetDSFRulesetsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFRulesetsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DSFRulesetData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneDSFRulesetRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDSFRulesetRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// ID of the ruleset to update
	Dsf_ruleset_id string `xml:"dsf_ruleset_id,omitempty" json:"dsf_ruleset_id,omitempty"`

	// response will include pending changes
	Pending_changes string `xml:"pending_changes,omitempty" json:"pending_changes,omitempty"`
}

type GetOneDSFRulesetResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDSFRulesetResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFRulesetData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneDSFRulesetRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSFRulesetRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// ID of the ruleset to update
	Dsf_ruleset_id string `xml:"dsf_ruleset_id,omitempty" json:"dsf_ruleset_id,omitempty"`

	// boolean - immediately save change and publish
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional notes
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type DeleteOneDSFRulesetResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSFRulesetResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFRulesetData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateDSFResponsePoolRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDSFResponsePoolRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// Response Pool label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	Core_set_count string `xml:"core_set_count,omitempty" json:"core_set_count,omitempty"`

	Automation string `xml:"automation,omitempty" json:"automation,omitempty"`

	// Defaults to true
	Eligible string `xml:"eligible,omitempty" json:"eligible,omitempty"`

	// ID or label of the DSF Ruleset to join
	Dsf_ruleset_id string `xml:"dsf_ruleset_id,omitempty" json:"dsf_ruleset_id,omitempty"`

	// Index within the specified DSF Ruleset
	Index string `xml:"index,omitempty" json:"index,omitempty"`

	Rs_chains []*DSFRecordSetFailoverChain `xml:"rs_chains,omitempty" json:"rs_chains,omitempty"`

	// boolean - immediately save change and publish
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional notes
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type CreateDSFResponsePoolResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDSFResponsePoolResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFResponsePoolData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateDSFResponsePoolRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSFResponsePoolRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// ID or label of the Response Pool to update
	Dsf_response_pool_id string `xml:"dsf_response_pool_id,omitempty" json:"dsf_response_pool_id,omitempty"`

	// Response Pool label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	Core_set_count string `xml:"core_set_count,omitempty" json:"core_set_count,omitempty"`

	Automation string `xml:"automation,omitempty" json:"automation,omitempty"`

	// Defaults to true
	Eligible string `xml:"eligible,omitempty" json:"eligible,omitempty"`

	// Entire chain must be specified
	Rs_chains []*DSFRecordSetFailoverChain `xml:"rs_chains,omitempty" json:"rs_chains,omitempty"`

	// ID or label of the DSF Ruleset to join
	Dsf_ruleset_id string `xml:"dsf_ruleset_id,omitempty" json:"dsf_ruleset_id,omitempty"`

	// If true, removes record-sets that are no longer referenced by anyone
	Remove_orphans string `xml:"remove_orphans,omitempty" json:"remove_orphans,omitempty"`

	// boolean - immediately save change and publish
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional Publish Notes.
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type UpdateDSFResponsePoolResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSFResponsePoolResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFResponsePoolData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetDSFResponsePoolsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFResponsePoolsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// ID or label of a DSF Ruleset that could contain
	Dsf_ruleset_id string `xml:"dsf_ruleset_id,omitempty" json:"dsf_ruleset_id,omitempty"`

	Core_set_count string `xml:"core_set_count,omitempty" json:"core_set_count,omitempty"`

	Automation string `xml:"automation,omitempty" json:"automation,omitempty"`

	Eligible string `xml:"eligible,omitempty" json:"eligible,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	// bool, if true, finds pools that do not exist in any Rulesets
	No_ruleset string `xml:"no_ruleset,omitempty" json:"no_ruleset,omitempty"`

	// response will include pending changes
	Pending_changes string `xml:"pending_changes,omitempty" json:"pending_changes,omitempty"`
}

type GetDSFResponsePoolsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFResponsePoolsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DSFResponsePoolData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneDSFResponsePoolRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDSFResponsePoolRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or the label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// ID or label of the desired response pool
	Dsf_response_pool_id string `xml:"dsf_response_pool_id,omitempty" json:"dsf_response_pool_id,omitempty"`

	// response will include pending changes
	Pending_changes string `xml:"pending_changes,omitempty" json:"pending_changes,omitempty"`
}

type GetOneDSFResponsePoolResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDSFResponsePoolResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFResponsePoolData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneDSFResponsePoolRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSFResponsePoolRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or the label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// ID or label of the desired response pool
	Dsf_response_pool_id string `xml:"dsf_response_pool_id,omitempty" json:"dsf_response_pool_id,omitempty"`

	// If 'Y', Pool will be deleted on execution
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional notes
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type DeleteOneDSFResponsePoolResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSFResponsePoolResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFResponsePoolData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateDSFRecordSetFailoverChainRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDSFRecordSetFailoverChainRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// ID of the DSF Response Pool that the Rec Set Fail chain belongs to
	Dsf_response_pool_id string `xml:"dsf_response_pool_id,omitempty" json:"dsf_response_pool_id,omitempty"`

	// Label of the DSF Record Set Failover Chain
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// Optional, defaults to false, indicates whether enclosed Record Sets are Core
	Core string `xml:"core,omitempty" json:"core,omitempty"`

	// A list of record sets to be included in this chain
	Record_sets []*DSFRecordSet `xml:"record_sets,omitempty" json:"record_sets,omitempty"`

	// If 'Y', RS Chain will be deleted on execution
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional notes
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type CreateDSFRecordSetFailoverChainResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDSFRecordSetFailoverChainResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFRecordSetFailoverChainData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateDSFRecordSetFailoverChainRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSFRecordSetFailoverChainRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// ID or label of the DSF Rec Set Failover Chain
	Dsf_record_set_failover_chain_id string `xml:"dsf_record_set_failover_chain_id,omitempty" json:"dsf_record_set_failover_chain_id,omitempty"`

	// Label of the DSF Record Set Failover Chain
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// Optional, defaults to false, indicates whether enclosed Record Sets are Core
	Core string `xml:"core,omitempty" json:"core,omitempty"`

	// A list of record sets to be included in this chain
	Record_sets []*DSFRecordSet `xml:"record_sets,omitempty" json:"record_sets,omitempty"`

	// If 'Y', RS Chain will be deleted on execution
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional Publish Notes.
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type UpdateDSFRecordSetFailoverChainResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSFRecordSetFailoverChainResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFRecordSetFailoverChainData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetDSFRecordSetFailoverChainsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFRecordSetFailoverChainsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// ID or label of the DSF Response Pool that the Rec Set Fail chain belongs to
	Dsf_response_pool_id string `xml:"dsf_response_pool_id,omitempty" json:"dsf_response_pool_id,omitempty"`

	// Label of the DSF Record Set Failover Chain
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// Search for core DSF Record Set Failover Chains that are core
	Core string `xml:"core,omitempty" json:"core,omitempty"`

	// response will include pending changes
	Pending_changes string `xml:"pending_changes,omitempty" json:"pending_changes,omitempty"`
}

type GetDSFRecordSetFailoverChainsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFRecordSetFailoverChainsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DSFRecordSetFailoverChainData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneDSFRecordSetFailoverChainRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDSFRecordSetFailoverChainRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// ID or label of the DSF Rec Set Failover Chain
	Dsf_record_set_failover_chain_id string `xml:"dsf_record_set_failover_chain_id,omitempty" json:"dsf_record_set_failover_chain_id,omitempty"`

	// response will include pending changes
	Pending_changes string `xml:"pending_changes,omitempty" json:"pending_changes,omitempty"`
}

type GetOneDSFRecordSetFailoverChainResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDSFRecordSetFailoverChainResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFRecordSetFailoverChainData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneDSFRecordSetFailoverChainRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSFRecordSetFailoverChainRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// ID or label of the DSF Rec Set Failover Chain
	Dsf_record_set_failover_chain_id string `xml:"dsf_record_set_failover_chain_id,omitempty" json:"dsf_record_set_failover_chain_id,omitempty"`

	// If 'Y', Pool will be deleted on execution
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional notes
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type DeleteOneDSFRecordSetFailoverChainResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSFRecordSetFailoverChainResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFRecordSetFailoverChainData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateDSFRecordSetRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDSFRecordSetRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// class of rdata that the set will contain
	Rdata_class string `xml:"rdata_class,omitempty" json:"rdata_class,omitempty"`

	// Record Set label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// ID or label of the associated monitor
	Dsf_monitor_id string `xml:"dsf_monitor_id,omitempty" json:"dsf_monitor_id,omitempty"`

	Ttl string `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Automation string `xml:"automation,omitempty" json:"automation,omitempty"`

	Serve_count string `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	Fail_count string `xml:"fail_count,omitempty" json:"fail_count,omitempty"`

	Trouble_count string `xml:"trouble_count,omitempty" json:"trouble_count,omitempty"`

	Torpidity_max string `xml:"torpidity_max,omitempty" json:"torpidity_max,omitempty"`

	// list of hashes that contain information to create DSF Records
	Records []*DSFRecord `xml:"records,omitempty" json:"records,omitempty"`

	// ID or label to associate the new RS with an existing RP
	Dsf_record_set_failover_chain_id string `xml:"dsf_record_set_failover_chain_id,omitempty" json:"dsf_record_set_failover_chain_id,omitempty"`

	// Index of the RS in the specified chain
	Index string `xml:"index,omitempty" json:"index,omitempty"`

	// ID or label to associate the new RS with an existing RP
	Dsf_response_pool_id string `xml:"dsf_response_pool_id,omitempty" json:"dsf_response_pool_id,omitempty"`

	// Defaults to true
	Eligible string `xml:"eligible,omitempty" json:"eligible,omitempty"`

	// boolean - immediately save change and publish
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional notes
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type CreateDSFRecordSetResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDSFRecordSetResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFRecordSetData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateDSFRecordSetRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSFRecordSetRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// ID or label of the DSF Record Set
	Dsf_record_set_id string `xml:"dsf_record_set_id,omitempty" json:"dsf_record_set_id,omitempty"`

	// new label for the DSF Record Set
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// ID or label of the associated monitor
	Dsf_monitor_id string `xml:"dsf_monitor_id,omitempty" json:"dsf_monitor_id,omitempty"`

	Ttl string `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Automation string `xml:"automation,omitempty" json:"automation,omitempty"`

	Serve_count string `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	Fail_count string `xml:"fail_count,omitempty" json:"fail_count,omitempty"`

	Trouble_count string `xml:"trouble_count,omitempty" json:"trouble_count,omitempty"`

	Torpidity_max string `xml:"torpidity_max,omitempty" json:"torpidity_max,omitempty"`

	// Defaults to true
	Eligible string `xml:"eligible,omitempty" json:"eligible,omitempty"`

	// hash of information to create DSF Records
	Records []*DSFRecord `xml:"records,omitempty" json:"records,omitempty"`

	// boolean - immediately save change and publish
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional Publish Notes.
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type UpdateDSFRecordSetResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSFRecordSetResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFRecordSetData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneDSFRecordSetRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDSFRecordSetRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// ID or label of the DSF Record Set
	Dsf_record_set_id string `xml:"dsf_record_set_id,omitempty" json:"dsf_record_set_id,omitempty"`

	// response will include pending changes
	Pending_changes string `xml:"pending_changes,omitempty" json:"pending_changes,omitempty"`
}

type GetOneDSFRecordSetResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDSFRecordSetResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFRecordSetData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetDSFRecordSetsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFRecordSetsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// Record Set label - can be wildcarded
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	Ttl string `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Automation string `xml:"automation,omitempty" json:"automation,omitempty"`

	Serve_count string `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	Fail_count string `xml:"fail_count,omitempty" json:"fail_count,omitempty"`

	Trouble_count string `xml:"trouble_count,omitempty" json:"trouble_count,omitempty"`

	Torpidity_max string `xml:"torpidity_max,omitempty" json:"torpidity_max,omitempty"`

	Eligible string `xml:"eligible,omitempty" json:"eligible,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	// class of rdata that the set will contain
	Rdata_class string `xml:"rdata_class,omitempty" json:"rdata_class,omitempty"`

	// ID or label to associate the RS with an existing DSF Record Set Failover Chain
	Dsf_record_set_failover_chain_id string `xml:"dsf_record_set_failover_chain_id,omitempty" json:"dsf_record_set_failover_chain_id,omitempty"`

	// ID or label of the associated monitor
	Dsf_monitor_id string `xml:"dsf_monitor_id,omitempty" json:"dsf_monitor_id,omitempty"`

	// response will include pending changes
	Pending_changes string `xml:"pending_changes,omitempty" json:"pending_changes,omitempty"`
}

type GetDSFRecordSetsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFRecordSetsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DSFRecordSetData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneDSFRecordSetRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSFRecordSetRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID or label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// ID or label of the DSF Record Set
	Dsf_record_set_id string `xml:"dsf_record_set_id,omitempty" json:"dsf_record_set_id,omitempty"`

	// If 'Y', Record Set will be deleted on execution
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional notes
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type DeleteOneDSFRecordSetResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSFRecordSetResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFRecordSetData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateDSFRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDSFRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// label of the DSF Record Set
	Dsf_record_set_id string `xml:"dsf_record_set_id,omitempty" json:"dsf_record_set_id,omitempty"`

	Master_line string `xml:"master_line,omitempty" json:"master_line,omitempty"`

	// Rdata to create the svc record with
	Rdata *ANYOneRData `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of the DSF record
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	Weight string `xml:"weight,omitempty" json:"weight,omitempty"`

	Automation string `xml:"automation,omitempty" json:"automation,omitempty"`

	Endpoints []string `xml:"endpoints,omitempty" json:"endpoints,omitempty"`

	// number of endpoints that need to be up
	Endpoint_up_count string `xml:"endpoint_up_count,omitempty" json:"endpoint_up_count,omitempty"`

	Eligible string `xml:"eligible,omitempty" json:"eligible,omitempty"`

	// boolean, if true add and immediately publish
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional notes
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type CreateDSFRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDSFRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateDSFRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSFRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// label of the DSF Record
	Dsf_record_id string `xml:"dsf_record_id,omitempty" json:"dsf_record_id,omitempty"`

	Master_line string `xml:"master_line,omitempty" json:"master_line,omitempty"`

	// Rdata to update the svc record with
	Rdata *ANYOneRData `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of the DSF record
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	Weight string `xml:"weight,omitempty" json:"weight,omitempty"`

	Automation string `xml:"automation,omitempty" json:"automation,omitempty"`

	Endpoints []string `xml:"endpoints,omitempty" json:"endpoints,omitempty"`

	// number of endpoints that need to be up
	Endpoint_up_count string `xml:"endpoint_up_count,omitempty" json:"endpoint_up_count,omitempty"`

	Eligible string `xml:"eligible,omitempty" json:"eligible,omitempty"`

	// boolean, if true add and immediately publish
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional Publish Notes.
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type UpdateDSFRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSFRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneDSFRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDSFRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// label of the DSF Record
	Dsf_record_id string `xml:"dsf_record_id,omitempty" json:"dsf_record_id,omitempty"`

	// response will include pending changes
	Pending_changes string `xml:"pending_changes,omitempty" json:"pending_changes,omitempty"`
}

type GetOneDSFRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDSFRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetDSFRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// DSF Record Set Failover Chain ID to search on
	Dsf_record_set_failover_chain_id string `xml:"dsf_record_set_failover_chain_id,omitempty" json:"dsf_record_set_failover_chain_id,omitempty"`

	// Record set id to search on
	Dsf_record_set_id string `xml:"dsf_record_set_id,omitempty" json:"dsf_record_set_id,omitempty"`

	// Wildcard allowed
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// Wildcard allowed
	Master_line string `xml:"master_line,omitempty" json:"master_line,omitempty"`

	// Wildcard allowed
	Endpoints string `xml:"endpoints,omitempty" json:"endpoints,omitempty"`

	Endpoint_up_count string `xml:"endpoint_up_count,omitempty" json:"endpoint_up_count,omitempty"`

	Weight string `xml:"weight,omitempty" json:"weight,omitempty"`

	Automation string `xml:"automation,omitempty" json:"automation,omitempty"`

	Eligible string `xml:"eligible,omitempty" json:"eligible,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	// response will include pending changes
	Pending_changes string `xml:"pending_changes,omitempty" json:"pending_changes,omitempty"`
}

type GetDSFRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DSFRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneDSFRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSFRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// label of the DSF Record
	Dsf_record_id string `xml:"dsf_record_id,omitempty" json:"dsf_record_id,omitempty"`

	// If 'Y', Record will be deleted on execution
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional notes
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type DeleteOneDSFRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSFRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type AddDSFNodeRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddDSFNodeRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// an fqdn, zone pair
	Node *DSFNode `xml:"node,omitempty" json:"node,omitempty"`

	// If 'Y', change is published immediately
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional notes
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type AddDSFNodeResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddDSFNodeResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DSFNode `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateDSFNodesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSFNodesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// A list of fqdn, zone pairs
	Nodes []*DSFNode `xml:"nodes,omitempty" json:"nodes,omitempty"`

	// If 'Y', change is published immediately
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional Publish Notes.
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type UpdateDSFNodesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSFNodesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DSFNode `xml:"data,omitempty" json:"data,omitempty"`
}

type GetDSFNodesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFNodesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// response will include pending changes
	Pending_changes string `xml:"pending_changes,omitempty" json:"pending_changes,omitempty"`
}

type GetDSFNodesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFNodesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DSFNode `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneDSFNodeRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSFNodeRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// label of the DSF Service
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// an fqdn, zone pair
	Node *DSFNode `xml:"node,omitempty" json:"node,omitempty"`

	// If 'Y', change is published immediately
	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`

	// Optional notes
	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type DeleteOneDSFNodeResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSFNodeResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DSFNode `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateDSFMonitorRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDSFMonitorRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Label for the DSF Monitor
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// Num of responses to determine status
	Response_count string `xml:"response_count,omitempty" json:"response_count,omitempty"`

	// Interval, in seconds, between probes
	Probe_interval string `xml:"probe_interval,omitempty" json:"probe_interval,omitempty"`

	// number of attempted retries on failure before giving up
	Retries string `xml:"retries,omitempty" json:"retries,omitempty"`

	// name of the protocol to monitor
	Protocol string `xml:"protocol,omitempty" json:"protocol,omitempty"`

	// indicates if the monitor is active, default is N
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// options pertaining the monitor
	Options *DSFMonitorOptions `xml:"options,omitempty" json:"options,omitempty"`

	// Endpoints to monitor
	Endpoints []*DSFMonitorEndpoint `xml:"endpoints,omitempty" json:"endpoints,omitempty"`
}

type CreateDSFMonitorResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDSFMonitorResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFMonitorData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateDSFMonitorRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSFMonitorRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID
	Dsf_monitor_id string `xml:"dsf_monitor_id,omitempty" json:"dsf_monitor_id,omitempty"`

	// New label for the DSF Monitor
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// Num of responses to determine status
	Response_count string `xml:"response_count,omitempty" json:"response_count,omitempty"`

	// Interval, in seconds, between probes
	Probe_interval string `xml:"probe_interval,omitempty" json:"probe_interval,omitempty"`

	// number of attempted retries on failure before giving up
	Retries string `xml:"retries,omitempty" json:"retries,omitempty"`

	// name of the protocol to monitor
	Protocol string `xml:"protocol,omitempty" json:"protocol,omitempty"`

	// indicates if the monitor is active
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// options pertaining the monitor
	Options *DSFMonitorOptions `xml:"options,omitempty" json:"options,omitempty"`

	// Endpoints to monitor
	Endpoints []*DSFMonitorEndpoint `xml:"endpoints,omitempty" json:"endpoints,omitempty"`
}

type UpdateDSFMonitorResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSFMonitorResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFMonitorData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneDSFMonitorRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDSFMonitorRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID
	Dsf_monitor_id string `xml:"dsf_monitor_id,omitempty" json:"dsf_monitor_id,omitempty"`
}

type GetOneDSFMonitorResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDSFMonitorResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFMonitorData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetDSFMonitorsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFMonitorsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Label for the DSF Monitor
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// Interval, in seconds, between probes
	Probe_interval string `xml:"probe_interval,omitempty" json:"probe_interval,omitempty"`

	// number of attempted retries on failure before giving up
	Retries string `xml:"retries,omitempty" json:"retries,omitempty"`

	// name of the protocol to monitor
	Protocol string `xml:"protocol,omitempty" json:"protocol,omitempty"`
}

type GetDSFMonitorsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFMonitorsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DSFMonitorData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneDSFMonitorRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSFMonitorRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// ID
	Dsf_monitor_id string `xml:"dsf_monitor_id,omitempty" json:"dsf_monitor_id,omitempty"`
}

type DeleteOneDSFMonitorResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSFMonitorResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type AddDSFMonitorNotifierRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddDSFMonitorNotifierRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Monitor ID
	Dsf_monitor_id string `xml:"dsf_monitor_id,omitempty" json:"dsf_monitor_id,omitempty"`

	// Notifier ID passed in for existing Notifier, or the follow params used to create
	Dsf_notify_id string `xml:"dsf_notify_id,omitempty" json:"dsf_notify_id,omitempty"`

	// filters on when services should fire the notifier
	Filters []string `xml:"filters,omitempty" json:"filters,omitempty"`
}

type AddDSFMonitorNotifierResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddDSFMonitorNotifierResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *NotifierData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetDSFMonitorSitesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFMonitorSitesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`
}

type GetDSFMonitorSitesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSFMonitorSitesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSFMonitorSitesData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateNotifierRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateNotifierRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Label for the Notifier
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// List of Recipients attached to the Notifier
	Recipients []*Recipient `xml:"recipients,omitempty" json:"recipients,omitempty"`

	// List of Services attached to the Notifier
	Services []*Service `xml:"services,omitempty" json:"services,omitempty"`
}

type CreateNotifierResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateNotifierResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *NotifierData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateNotifierRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateNotifierRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Public_id of the Notifier to update
	Notifier_id string `xml:"notifier_id,omitempty" json:"notifier_id,omitempty"`

	// Label for the DSF Notify
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// List of Recipients attached to the Notifier
	Recipients []*Recipient `xml:"recipients,omitempty" json:"recipients,omitempty"`

	// List of Services attached to the Notifier
	Services []*Service `xml:"services,omitempty" json:"services,omitempty"`
}

type UpdateNotifierResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateNotifierResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *NotifierData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneNotifierRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneNotifierRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Public_id of the Notifier to retrieve
	Notifier_id string `xml:"notifier_id,omitempty" json:"notifier_id,omitempty"`
}

type GetOneNotifierResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneNotifierResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *NotifierData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetNotifiersRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetNotifiersRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Label for the DSF Notify
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// Search for active or inactive notifiers
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// Search for email or syslog recipients
	Format string `xml:"format,omitempty" json:"format,omitempty"`

	// Search on the recipient email, hostname, or contact
	Recipient string `xml:"recipient,omitempty" json:"recipient,omitempty"`

	// Search for active or inactive recipients
	Recipient_active string `xml:"recipient_active,omitempty" json:"recipient_active,omitempty"`

	// Must be specified with service public id
	Service_class string `xml:"service_class,omitempty" json:"service_class,omitempty"`

	// Public_id of the service_class item to search for
	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	// Search for active or inactive services
	Service_active string `xml:"service_active,omitempty" json:"service_active,omitempty"`
}

type GetNotifiersResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetNotifiersResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*NotifierDataAlt `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneNotifierRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneNotifierRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// Public_id of the Notifier to delete
	Notifier_id string `xml:"notifier_id,omitempty" json:"notifier_id,omitempty"`
}

type DeleteOneNotifierResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneNotifierResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateConfigLimitRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateConfigLimitRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type CreateConfigLimitResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateConfigLimitResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ConfigLimitData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneConfigLimitRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneConfigLimitRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type GetOneConfigLimitResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneConfigLimitResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ConfigLimitData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetConfigLimitsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetConfigLimitsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`
}

type GetConfigLimitsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetConfigLimitsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*ConfigLimitData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateConfigLimitRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateConfigLimitRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type UpdateConfigLimitResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateConfigLimitResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ConfigLimitData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneConfigLimitRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneConfigLimitRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Service_id string `xml:"service_id,omitempty" json:"service_id,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type DeleteOneConfigLimitResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneConfigLimitResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreatePermissionGroupRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreatePermissionGroupRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	Type_ string `xml:"type,omitempty" json:"type,omitempty"`

	All_users string `xml:"all_users,omitempty" json:"all_users,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`

	Permission []string `xml:"permission,omitempty" json:"permission,omitempty"`

	User_name []string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Subgroup []string `xml:"subgroup,omitempty" json:"subgroup,omitempty"`

	Zone []*PermissionZone `xml:"zone,omitempty" json:"zone,omitempty"`
}

type CreatePermissionGroupResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreatePermissionGroupResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *PermissionGroupData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOnePermissionGroupRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOnePermissionGroupRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`
}

type GetOnePermissionGroupResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOnePermissionGroupResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *PermissionGroupData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetPermissionGroupsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetPermissionGroupsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`
}

type GetPermissionGroupsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetPermissionGroupsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*PermissionGroupData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOnePermissionGroupRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOnePermissionGroupRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`
}

type DeleteOnePermissionGroupResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOnePermissionGroupResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdatePermissionGroupRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdatePermissionGroupRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	New_group_name string `xml:"new_group_name,omitempty" json:"new_group_name,omitempty"`

	Type_ string `xml:"type,omitempty" json:"type,omitempty"`

	All_users string `xml:"all_users,omitempty" json:"all_users,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`

	Permission []string `xml:"permission,omitempty" json:"permission,omitempty"`

	User_name []string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Subgroup []string `xml:"subgroup,omitempty" json:"subgroup,omitempty"`

	Zone []*PermissionZone `xml:"zone,omitempty" json:"zone,omitempty"`
}

type UpdatePermissionGroupResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdatePermissionGroupResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *PermissionGroupData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetCustomerPermissionsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCustomerPermissionsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`
}

type GetCustomerPermissionsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCustomerPermissionsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *PermissionResponse `xml:"data,omitempty" json:"data,omitempty"`
}

type GetUserPermissionsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetUserPermissionsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`
}

type GetUserPermissionsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetUserPermissionsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *PermissionResponse `xml:"data,omitempty" json:"data,omitempty"`
}

type CheckPermissionsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CheckPermissionsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Permission []string `xml:"permission,omitempty" json:"permission,omitempty"`

	Zone_name string `xml:"zone_name,omitempty" json:"zone_name,omitempty"`
}

type CheckPermissionsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CheckPermissionsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *PermissionResponse `xml:"data,omitempty" json:"data,omitempty"`
}

type AddPermissionGroupUsersRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddPermissionGroupUsersRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	User_name []string `xml:"user_name,omitempty" json:"user_name,omitempty"`
}

type AddPermissionGroupUsersResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddPermissionGroupUsersResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type SetPermissionGroupUsersRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetPermissionGroupUsersRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	User_name []string `xml:"user_name,omitempty" json:"user_name,omitempty"`
}

type SetPermissionGroupUsersResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetPermissionGroupUsersResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type RemovePermissionGroupUsersRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemovePermissionGroupUsersRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	User_name []string `xml:"user_name,omitempty" json:"user_name,omitempty"`
}

type RemovePermissionGroupUsersResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemovePermissionGroupUsersResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type AddPermissionGroupSubgroupsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddPermissionGroupSubgroupsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	Subgroup []string `xml:"subgroup,omitempty" json:"subgroup,omitempty"`
}

type AddPermissionGroupSubgroupsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddPermissionGroupSubgroupsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type SetPermissionGroupSubgroupsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetPermissionGroupSubgroupsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	Subgroup []string `xml:"subgroup,omitempty" json:"subgroup,omitempty"`
}

type SetPermissionGroupSubgroupsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetPermissionGroupSubgroupsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type RemovePermissionGroupSubgroupsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemovePermissionGroupSubgroupsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	Subgroup []string `xml:"subgroup,omitempty" json:"subgroup,omitempty"`
}

type RemovePermissionGroupSubgroupsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemovePermissionGroupSubgroupsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type AddPermissionGroupPermissionsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddPermissionGroupPermissionsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	Permission []string `xml:"permission,omitempty" json:"permission,omitempty"`
}

type AddPermissionGroupPermissionsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddPermissionGroupPermissionsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type SetPermissionGroupPermissionsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetPermissionGroupPermissionsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	Permission []string `xml:"permission,omitempty" json:"permission,omitempty"`
}

type SetPermissionGroupPermissionsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetPermissionGroupPermissionsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type RemovePermissionGroupPermissionsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemovePermissionGroupPermissionsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	Permission []string `xml:"permission,omitempty" json:"permission,omitempty"`
}

type RemovePermissionGroupPermissionsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemovePermissionGroupPermissionsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type AddPermissionGroupZonesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddPermissionGroupZonesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	Zone []*PermissionZone `xml:"zone,omitempty" json:"zone,omitempty"`
}

type AddPermissionGroupZonesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddPermissionGroupZonesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type SetPermissionGroupZonesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetPermissionGroupZonesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	Zone []*PermissionZone `xml:"zone,omitempty" json:"zone,omitempty"`
}

type SetPermissionGroupZonesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetPermissionGroupZonesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type RemovePermissionGroupZonesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemovePermissionGroupZonesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Group_name string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	Zone []*PermissionZone `xml:"zone,omitempty" json:"zone,omitempty"`
}

type RemovePermissionGroupZonesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemovePermissionGroupZonesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type AddUserGroupsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddUserGroupsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Group []string `xml:"group,omitempty" json:"group,omitempty"`
}

type AddUserGroupsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddUserGroupsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type SetUserGroupsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetUserGroupsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Group []string `xml:"group,omitempty" json:"group,omitempty"`
}

type SetUserGroupsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetUserGroupsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type RemoveUserGroupsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemoveUserGroupsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Group []string `xml:"group,omitempty" json:"group,omitempty"`
}

type RemoveUserGroupsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemoveUserGroupsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type AddUserZonesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddUserZonesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Zone []*PermissionZone `xml:"zone,omitempty" json:"zone,omitempty"`
}

type AddUserZonesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddUserZonesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type SetUserZonesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetUserZonesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Zone []*PermissionZone `xml:"zone,omitempty" json:"zone,omitempty"`
}

type SetUserZonesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetUserZonesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type RemoveUserZonesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemoveUserZonesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Zone []*PermissionZone `xml:"zone,omitempty" json:"zone,omitempty"`
}

type RemoveUserZonesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemoveUserZonesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type AddUserPermissionsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddUserPermissionsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Permission []string `xml:"permission,omitempty" json:"permission,omitempty"`
}

type AddUserPermissionsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddUserPermissionsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type SetUserPermissionsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetUserPermissionsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Permission []string `xml:"permission,omitempty" json:"permission,omitempty"`
}

type SetUserPermissionsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetUserPermissionsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type RemoveUserPermissionsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemoveUserPermissionsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Permission []string `xml:"permission,omitempty" json:"permission,omitempty"`
}

type RemoveUserPermissionsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemoveUserPermissionsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type AddUserForbidsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddUserForbidsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Forbid []*PermissionData `xml:"forbid,omitempty" json:"forbid,omitempty"`
}

type AddUserForbidsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddUserForbidsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type SetUserForbidsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetUserForbidsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Forbid []*PermissionData `xml:"forbid,omitempty" json:"forbid,omitempty"`
}

type SetUserForbidsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetUserForbidsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type RemoveUserForbidsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemoveUserForbidsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Forbid []*PermissionData `xml:"forbid,omitempty" json:"forbid,omitempty"`
}

type RemoveUserForbidsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemoveUserForbidsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type AddCustomerPermissionsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddCustomerPermissionsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	Permission []string `xml:"permission,omitempty" json:"permission,omitempty"`
}

type AddCustomerPermissionsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddCustomerPermissionsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type SetCustomerPermissionsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetCustomerPermissionsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	Permission []string `xml:"permission,omitempty" json:"permission,omitempty"`
}

type SetCustomerPermissionsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetCustomerPermissionsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type RemoveCustomerPermissionsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemoveCustomerPermissionsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	Permission []string `xml:"permission,omitempty" json:"permission,omitempty"`
}

type RemoveCustomerPermissionsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemoveCustomerPermissionsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type AddCustomerForbidsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddCustomerForbidsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	Forbid []string `xml:"forbid,omitempty" json:"forbid,omitempty"`
}

type AddCustomerForbidsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddCustomerForbidsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type SetCustomerForbidsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetCustomerForbidsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	Forbid []string `xml:"forbid,omitempty" json:"forbid,omitempty"`
}

type SetCustomerForbidsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetCustomerForbidsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type RemoveCustomerForbidsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemoveCustomerForbidsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	Forbid []string `xml:"forbid,omitempty" json:"forbid,omitempty"`
}

type RemoveCustomerForbidsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RemoveCustomerForbidsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type GetHostStatsFlagsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetHostStatsFlagsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`
}

type GetHostStatsFlagsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetHostStatsFlagsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*HostStatFlagsData `xml:"data,omitempty" json:"data,omitempty"`
}

type SetHostStatsFlagsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetHostStatsFlagsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	Host_stats []*HostStatFlagsData `xml:"host_stats,omitempty" json:"host_stats,omitempty"`
}

type SetHostStatsFlagsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetHostStatsFlagsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*HostStatFlagsData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateTSIGKeyRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateTSIGKeyRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Algorithm string `xml:"algorithm,omitempty" json:"algorithm,omitempty"`

	Secret string `xml:"secret,omitempty" json:"secret,omitempty"`

	Tsig_ocid string `xml:"tsig_ocid,omitempty" json:"tsig_ocid,omitempty"`

	Compartment string `xml:"compartment,omitempty" json:"compartment,omitempty"`
}

type CreateTSIGKeyResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateTSIGKeyResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *TSIGKeyData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneTSIGKeyRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneTSIGKeyRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type GetOneTSIGKeyResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneTSIGKeyResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *TSIGKeyData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetTSIGKeysRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetTSIGKeysRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`
}

type GetTSIGKeysResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetTSIGKeysResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*TSIGKeyData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateTSIGKeyRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateTSIGKeyRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	New_name string `xml:"new_name,omitempty" json:"new_name,omitempty"`

	Secret string `xml:"secret,omitempty" json:"secret,omitempty"`

	Algorithm string `xml:"algorithm,omitempty" json:"algorithm,omitempty"`

	Tsig_ocid string `xml:"tsig_ocid,omitempty" json:"tsig_ocid,omitempty"`

	Compartment string `xml:"compartment,omitempty" json:"compartment,omitempty"`
}

type UpdateTSIGKeyResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateTSIGKeyResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *TSIGKeyData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneTSIGKeyRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneTSIGKeyRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type DeleteOneTSIGKeyResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneTSIGKeyResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateZoneRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateZoneRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// address of responsible party, per SOA
	Rname string `xml:"rname,omitempty" json:"rname,omitempty"`

	// default TTL (Time-to-Live) for records
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// code indicating how serial numbers are constructed on publish
	Serial_style string `xml:"serial_style,omitempty" json:"serial_style,omitempty"`
}

type CreateZoneResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateZoneResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ZoneData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneZoneRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneZoneRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetOneZoneResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneZoneResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ZoneData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetZonesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetZonesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`
}

type GetZonesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetZonesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*ZoneData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneZoneRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneZoneRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteOneZoneResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneZoneResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateSecondaryZoneRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateSecondaryZoneRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Masters []string `xml:"masters,omitempty" json:"masters,omitempty"`

	Tsig_key_name string `xml:"tsig_key_name,omitempty" json:"tsig_key_name,omitempty"`

	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`
}

type CreateSecondaryZoneResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateSecondaryZoneResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *SecondaryData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateSecondaryRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateSecondaryRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Masters []string `xml:"masters,omitempty" json:"masters,omitempty"`

	Tsig_key_name string `xml:"tsig_key_name,omitempty" json:"tsig_key_name,omitempty"`

	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`
}

type UpdateSecondaryResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateSecondaryResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *SecondaryData `xml:"data,omitempty" json:"data,omitempty"`
}

type ActivateSecondaryRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateSecondaryRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type ActivateSecondaryResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateSecondaryResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *SecondaryData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeactivateSecondaryRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateSecondaryRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeactivateSecondaryResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateSecondaryResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *SecondaryData `xml:"data,omitempty" json:"data,omitempty"`
}

type RetransferSecondaryRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RetransferSecondaryRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type RetransferSecondaryResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RetransferSecondaryResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *SecondaryData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneSecondaryRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneSecondaryRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetOneSecondaryResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneSecondaryResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *SecondaryData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetSecondariesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetSecondariesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`
}

type GetSecondariesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetSecondariesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*SecondaryData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetZoneApexRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetZoneApexRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// FQDN of a node
	Node string `xml:"node,omitempty" json:"node,omitempty"`
}

type GetZoneApexResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetZoneApexResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ZoneData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataA `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataA `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetARecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetARecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetARecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetARecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*ARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataA `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteARecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteARecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteARecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteARecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataA `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateAAAARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateAAAARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataAAAA `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateAAAARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateAAAARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *AAAARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneAAAARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneAAAARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataAAAA `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneAAAARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneAAAARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *AAAARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetAAAARecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetAAAARecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetAAAARecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetAAAARecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*AAAARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateAAAARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateAAAARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataAAAA `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateAAAARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateAAAARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *AAAARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteAAAARecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteAAAARecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteAAAARecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteAAAARecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneAAAARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneAAAARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataAAAA `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneAAAARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneAAAARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateALIASRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateALIASRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataALIAS `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateALIASRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateALIASRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ALIASRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneALIASRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneALIASRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataALIAS `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneALIASRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneALIASRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ALIASRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetALIASRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetALIASRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetALIASRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetALIASRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*ALIASRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateALIASRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateALIASRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataALIAS `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateALIASRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateALIASRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ALIASRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteALIASRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteALIASRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteALIASRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteALIASRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneALIASRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneALIASRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataALIAS `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneALIASRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneALIASRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateCAARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateCAARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataCAA `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateCAARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateCAARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CAARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneCAARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneCAARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCAA `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneCAARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneCAARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CAARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetCAARecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCAARecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetCAARecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCAARecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*CAARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateCAARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateCAARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCAA `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateCAARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateCAARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CAARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteCAARecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteCAARecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteCAARecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteCAARecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneCAARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneCAARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCAA `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneCAARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneCAARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateCDNSKEYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateCDNSKEYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataCDNSKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateCDNSKEYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateCDNSKEYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CDNSKEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneCDNSKEYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneCDNSKEYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCDNSKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneCDNSKEYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneCDNSKEYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CDNSKEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetCDNSKEYRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCDNSKEYRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetCDNSKEYRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCDNSKEYRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*CDNSKEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateCDNSKEYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateCDNSKEYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCDNSKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateCDNSKEYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateCDNSKEYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CDNSKEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteCDNSKEYRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteCDNSKEYRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteCDNSKEYRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteCDNSKEYRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneCDNSKEYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneCDNSKEYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCDNSKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneCDNSKEYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneCDNSKEYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateCDSRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateCDSRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataCDS `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateCDSRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateCDSRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CDSRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneCDSRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneCDSRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCDS `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneCDSRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneCDSRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CDSRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetCDSRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCDSRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetCDSRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCDSRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*CDSRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateCDSRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateCDSRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCDS `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateCDSRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateCDSRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CDSRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteCDSRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteCDSRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteCDSRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteCDSRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneCDSRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneCDSRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCDS `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneCDSRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneCDSRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateCERTRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateCERTRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataCERT `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateCERTRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateCERTRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CERTRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneCERTRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneCERTRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCERT `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneCERTRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneCERTRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CERTRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetCERTRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCERTRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetCERTRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCERTRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*CERTRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateCERTRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateCERTRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCERT `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateCERTRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateCERTRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CERTRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteCERTRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteCERTRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteCERTRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteCERTRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneCERTRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneCERTRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCERT `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneCERTRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneCERTRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateCNAMERecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateCNAMERecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataCNAME `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateCNAMERecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateCNAMERecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CNAMERecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneCNAMERecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneCNAMERecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCNAME `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneCNAMERecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneCNAMERecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CNAMERecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetCNAMERecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCNAMERecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetCNAMERecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCNAMERecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*CNAMERecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateCNAMERecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateCNAMERecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCNAME `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateCNAMERecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateCNAMERecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CNAMERecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteCNAMERecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteCNAMERecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteCNAMERecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteCNAMERecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneCNAMERecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneCNAMERecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCNAME `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneCNAMERecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneCNAMERecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateCSYNCRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateCSYNCRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataCSYNC `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateCSYNCRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateCSYNCRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CSYNCRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneCSYNCRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneCSYNCRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCSYNC `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneCSYNCRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneCSYNCRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CSYNCRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetCSYNCRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCSYNCRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetCSYNCRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCSYNCRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*CSYNCRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateCSYNCRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateCSYNCRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCSYNC `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateCSYNCRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateCSYNCRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CSYNCRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteCSYNCRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteCSYNCRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteCSYNCRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteCSYNCRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneCSYNCRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneCSYNCRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataCSYNC `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneCSYNCRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneCSYNCRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateDHCIDRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDHCIDRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataDHCID `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateDHCIDRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDHCIDRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DHCIDRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneDHCIDRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDHCIDRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataDHCID `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneDHCIDRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDHCIDRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DHCIDRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetDHCIDRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDHCIDRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetDHCIDRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDHCIDRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DHCIDRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateDHCIDRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDHCIDRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataDHCID `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateDHCIDRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDHCIDRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DHCIDRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteDHCIDRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteDHCIDRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteDHCIDRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteDHCIDRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneDHCIDRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDHCIDRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataDHCID `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneDHCIDRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDHCIDRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateDNAMERecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDNAMERecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataDNAME `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateDNAMERecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDNAMERecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DNAMERecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneDNAMERecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDNAMERecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataDNAME `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneDNAMERecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDNAMERecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DNAMERecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetDNAMERecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDNAMERecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetDNAMERecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDNAMERecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DNAMERecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateDNAMERecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDNAMERecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataDNAME `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateDNAMERecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDNAMERecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DNAMERecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteDNAMERecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteDNAMERecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteDNAMERecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteDNAMERecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneDNAMERecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDNAMERecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataDNAME `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneDNAMERecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDNAMERecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateDNSKEYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDNSKEYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataDNSKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateDNSKEYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDNSKEYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DNSKEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneDNSKEYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDNSKEYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataDNSKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneDNSKEYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDNSKEYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DNSKEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetDNSKEYRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDNSKEYRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetDNSKEYRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDNSKEYRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DNSKEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateDNSKEYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDNSKEYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataDNSKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateDNSKEYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDNSKEYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DNSKEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteDNSKEYRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteDNSKEYRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteDNSKEYRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteDNSKEYRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneDNSKEYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDNSKEYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataDNSKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneDNSKEYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDNSKEYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateDSRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDSRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataDS `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateDSRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDSRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneDSRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDSRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataDS `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneDSRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDSRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetDSRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetDSRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDSRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DSRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateDSRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataDS `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateDSRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDSRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DSRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteDSRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteDSRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteDSRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteDSRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneDSRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataDS `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneDSRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDSRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateIPSECKEYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateIPSECKEYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataIPSECKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateIPSECKEYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateIPSECKEYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *IPSECKEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneIPSECKEYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneIPSECKEYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataIPSECKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneIPSECKEYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneIPSECKEYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *IPSECKEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetIPSECKEYRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetIPSECKEYRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetIPSECKEYRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetIPSECKEYRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*IPSECKEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateIPSECKEYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateIPSECKEYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataIPSECKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateIPSECKEYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateIPSECKEYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *IPSECKEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteIPSECKEYRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteIPSECKEYRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteIPSECKEYRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteIPSECKEYRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneIPSECKEYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneIPSECKEYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataIPSECKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneIPSECKEYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneIPSECKEYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateKEYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateKEYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateKEYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateKEYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *KEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneKEYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneKEYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneKEYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneKEYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *KEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetKEYRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetKEYRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetKEYRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetKEYRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*KEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateKEYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateKEYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateKEYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateKEYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *KEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteKEYRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteKEYRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteKEYRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteKEYRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneKEYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneKEYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataKEY `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneKEYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneKEYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateKXRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateKXRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataKX `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateKXRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateKXRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *KXRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneKXRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneKXRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataKX `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneKXRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneKXRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *KXRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetKXRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetKXRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetKXRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetKXRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*KXRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateKXRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateKXRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataKX `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateKXRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateKXRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *KXRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteKXRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteKXRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteKXRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteKXRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneKXRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneKXRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataKX `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneKXRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneKXRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateLOCRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateLOCRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataLOC `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateLOCRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateLOCRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *LOCRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneLOCRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneLOCRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataLOC `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneLOCRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneLOCRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *LOCRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetLOCRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetLOCRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetLOCRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetLOCRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*LOCRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateLOCRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateLOCRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataLOC `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateLOCRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateLOCRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *LOCRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteLOCRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteLOCRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteLOCRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteLOCRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneLOCRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneLOCRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataLOC `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneLOCRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneLOCRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateMXRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateMXRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataMX `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateMXRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateMXRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *MXRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneMXRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneMXRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataMX `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneMXRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneMXRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *MXRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetMXRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetMXRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetMXRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetMXRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*MXRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateMXRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateMXRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataMX `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateMXRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateMXRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *MXRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteMXRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteMXRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteMXRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteMXRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneMXRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneMXRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataMX `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneMXRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneMXRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateNAPTRRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateNAPTRRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataNAPTR `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateNAPTRRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateNAPTRRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *NAPTRRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneNAPTRRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneNAPTRRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataNAPTR `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneNAPTRRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneNAPTRRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *NAPTRRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetNAPTRRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetNAPTRRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetNAPTRRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetNAPTRRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*NAPTRRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateNAPTRRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateNAPTRRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataNAPTR `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateNAPTRRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateNAPTRRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *NAPTRRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteNAPTRRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteNAPTRRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteNAPTRRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteNAPTRRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneNAPTRRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneNAPTRRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataNAPTR `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneNAPTRRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneNAPTRRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateNSAPRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateNSAPRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataNSAP `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateNSAPRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateNSAPRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *NSAPRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneNSAPRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneNSAPRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataNSAP `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneNSAPRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneNSAPRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *NSAPRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetNSAPRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetNSAPRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetNSAPRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetNSAPRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*NSAPRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateNSAPRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateNSAPRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataNSAP `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateNSAPRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateNSAPRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *NSAPRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteNSAPRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteNSAPRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteNSAPRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteNSAPRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneNSAPRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneNSAPRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataNSAP `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneNSAPRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneNSAPRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreatePOLICYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreatePOLICYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataPOLICY `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreatePOLICYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreatePOLICYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *POLICYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOnePOLICYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOnePOLICYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataPOLICY `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOnePOLICYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOnePOLICYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *POLICYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetPOLICYRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetPOLICYRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetPOLICYRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetPOLICYRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*POLICYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdatePOLICYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdatePOLICYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataPOLICY `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdatePOLICYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdatePOLICYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *POLICYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeletePOLICYRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeletePOLICYRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeletePOLICYRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeletePOLICYRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOnePOLICYRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOnePOLICYRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataPOLICY `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOnePOLICYRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOnePOLICYRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreatePTRRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreatePTRRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataPTR `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreatePTRRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreatePTRRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *PTRRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOnePTRRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOnePTRRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataPTR `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOnePTRRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOnePTRRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *PTRRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetPTRRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetPTRRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetPTRRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetPTRRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*PTRRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdatePTRRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdatePTRRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataPTR `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdatePTRRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdatePTRRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *PTRRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeletePTRRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeletePTRRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeletePTRRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeletePTRRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOnePTRRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOnePTRRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataPTR `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOnePTRRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOnePTRRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreatePXRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreatePXRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataPX `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreatePXRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreatePXRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *PXRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOnePXRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOnePXRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataPX `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOnePXRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOnePXRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *PXRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetPXRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetPXRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetPXRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetPXRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*PXRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdatePXRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdatePXRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataPX `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdatePXRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdatePXRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *PXRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeletePXRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeletePXRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeletePXRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeletePXRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOnePXRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOnePXRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataPX `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOnePXRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOnePXRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateRPRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateRPRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataRP `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateRPRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateRPRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *RPRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneRPRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneRPRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataRP `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneRPRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneRPRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *RPRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetRPRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetRPRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetRPRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetRPRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*RPRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateRPRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateRPRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataRP `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateRPRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateRPRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *RPRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteRPRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteRPRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteRPRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteRPRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneRPRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneRPRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataRP `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneRPRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneRPRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateSPFRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateSPFRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataSPF `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateSPFRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateSPFRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *SPFRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneSPFRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneSPFRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataSPF `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneSPFRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneSPFRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *SPFRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetSPFRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetSPFRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetSPFRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetSPFRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*SPFRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateSPFRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateSPFRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataSPF `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateSPFRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateSPFRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *SPFRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteSPFRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteSPFRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteSPFRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteSPFRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneSPFRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneSPFRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataSPF `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneSPFRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneSPFRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateSRVRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateSRVRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataSRV `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateSRVRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateSRVRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *SRVRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneSRVRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneSRVRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataSRV `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneSRVRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneSRVRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *SRVRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetSRVRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetSRVRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetSRVRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetSRVRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*SRVRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateSRVRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateSRVRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataSRV `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateSRVRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateSRVRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *SRVRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteSRVRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteSRVRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteSRVRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteSRVRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneSRVRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneSRVRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataSRV `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneSRVRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneSRVRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateSSHFPRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateSSHFPRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataSSHFP `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateSSHFPRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateSSHFPRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *SSHFPRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneSSHFPRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneSSHFPRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataSSHFP `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneSSHFPRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneSSHFPRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *SSHFPRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetSSHFPRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetSSHFPRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetSSHFPRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetSSHFPRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*SSHFPRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateSSHFPRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateSSHFPRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataSSHFP `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateSSHFPRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateSSHFPRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *SSHFPRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteSSHFPRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteSSHFPRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteSSHFPRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteSSHFPRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneSSHFPRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneSSHFPRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataSSHFP `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneSSHFPRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneSSHFPRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateTLSARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateTLSARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataTLSA `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateTLSARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateTLSARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *TLSARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneTLSARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneTLSARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataTLSA `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneTLSARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneTLSARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *TLSARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetTLSARecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetTLSARecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetTLSARecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetTLSARecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*TLSARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateTLSARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateTLSARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataTLSA `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateTLSARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateTLSARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *TLSARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteTLSARecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteTLSARecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteTLSARecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteTLSARecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneTLSARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneTLSARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataTLSA `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneTLSARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneTLSARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateTXTRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateTXTRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataTXT `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type CreateTXTRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateTXTRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *TXTRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneTXTRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneTXTRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataTXT `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneTXTRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneTXTRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *TXTRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetTXTRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetTXTRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetTXTRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetTXTRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*TXTRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateTXTRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateTXTRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataTXT `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`
}

type UpdateTXTRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateTXTRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *TXTRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteTXTRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteTXTRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteTXTRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteTXTRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneTXTRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneTXTRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataTXT `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneTXTRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneTXTRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneSOARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneSOARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataSOA `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneSOARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneSOARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *SOARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetSOARecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetSOARecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetSOARecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetSOARecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*SOARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateSOARecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateSOARecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Serial_style string `xml:"serial_style,omitempty" json:"serial_style,omitempty"`

	Rdata *RDataSOAUpdate `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type UpdateSOARecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateSOARecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *SOARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateNSRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateNSRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Rdata *RDataNS `xml:"rdata,omitempty" json:"rdata,omitempty"`

	Service_class string `xml:"service_class,omitempty" json:"service_class,omitempty"`
}

type CreateNSRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateNSRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *NSRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneNSRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneNSRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataNS `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneNSRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneNSRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *NSRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetNSRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetNSRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetNSRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetNSRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*NSRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateNSRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateNSRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataNS `xml:"rdata,omitempty" json:"rdata,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	Service_class string `xml:"service_class,omitempty" json:"service_class,omitempty"`
}

type UpdateNSRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateNSRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *NSRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteNSRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteNSRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteNSRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteNSRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneNSRecordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneNSRecordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`

	Rdata *RDataNS `xml:"rdata,omitempty" json:"rdata,omitempty"`
}

type DeleteOneNSRecordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneNSRecordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceARecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceARecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	ARecords []*ARecordData `xml:"ARecords,omitempty" json:"ARecords,omitempty"`
}

type ReplaceARecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceARecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*ARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceAAAARecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceAAAARecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	AAAARecords []*AAAARecordData `xml:"AAAARecords,omitempty" json:"AAAARecords,omitempty"`
}

type ReplaceAAAARecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceAAAARecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*AAAARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceALIASRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceALIASRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	ALIASRecords []*ALIASRecordData `xml:"ALIASRecords,omitempty" json:"ALIASRecords,omitempty"`
}

type ReplaceALIASRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceALIASRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*ALIASRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceCAARecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceCAARecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	CAARecords []*CAARecordData `xml:"CAARecords,omitempty" json:"CAARecords,omitempty"`
}

type ReplaceCAARecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceCAARecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*CAARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceCDNSKEYRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceCDNSKEYRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	CDNSKEYRecords []*CDNSKEYRecordData `xml:"CDNSKEYRecords,omitempty" json:"CDNSKEYRecords,omitempty"`
}

type ReplaceCDNSKEYRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceCDNSKEYRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*CDNSKEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceCDSRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceCDSRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	CDSRecords []*CDSRecordData `xml:"CDSRecords,omitempty" json:"CDSRecords,omitempty"`
}

type ReplaceCDSRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceCDSRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*CDSRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceCERTRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceCERTRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	CERTRecords []*CERTRecordData `xml:"CERTRecords,omitempty" json:"CERTRecords,omitempty"`
}

type ReplaceCERTRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceCERTRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*CERTRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceCNAMERecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceCNAMERecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	CNAMERecords []*CNAMERecordData `xml:"CNAMERecords,omitempty" json:"CNAMERecords,omitempty"`
}

type ReplaceCNAMERecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceCNAMERecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*CNAMERecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceCSYNCRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceCSYNCRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	CSYNCRecords []*CSYNCRecordData `xml:"CSYNCRecords,omitempty" json:"CSYNCRecords,omitempty"`
}

type ReplaceCSYNCRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceCSYNCRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*CSYNCRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceDHCIDRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceDHCIDRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	DHCIDRecords []*DHCIDRecordData `xml:"DHCIDRecords,omitempty" json:"DHCIDRecords,omitempty"`
}

type ReplaceDHCIDRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceDHCIDRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DHCIDRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceDNAMERecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceDNAMERecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	DNAMERecords []*DNAMERecordData `xml:"DNAMERecords,omitempty" json:"DNAMERecords,omitempty"`
}

type ReplaceDNAMERecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceDNAMERecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DNAMERecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceDNSKEYRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceDNSKEYRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	DNSKEYRecords []*DNSKEYRecordData `xml:"DNSKEYRecords,omitempty" json:"DNSKEYRecords,omitempty"`
}

type ReplaceDNSKEYRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceDNSKEYRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DNSKEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceDSRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceDSRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	DSRecords []*DSRecordData `xml:"DSRecords,omitempty" json:"DSRecords,omitempty"`
}

type ReplaceDSRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceDSRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DSRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceIPSECKEYRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceIPSECKEYRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	IPSECKEYRecords []*IPSECKEYRecordData `xml:"IPSECKEYRecords,omitempty" json:"IPSECKEYRecords,omitempty"`
}

type ReplaceIPSECKEYRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceIPSECKEYRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*IPSECKEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceKEYRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceKEYRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	KEYRecords []*KEYRecordData `xml:"KEYRecords,omitempty" json:"KEYRecords,omitempty"`
}

type ReplaceKEYRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceKEYRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*KEYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceKXRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceKXRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	KXRecords []*KXRecordData `xml:"KXRecords,omitempty" json:"KXRecords,omitempty"`
}

type ReplaceKXRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceKXRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*KXRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceLOCRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceLOCRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	LOCRecords []*LOCRecordData `xml:"LOCRecords,omitempty" json:"LOCRecords,omitempty"`
}

type ReplaceLOCRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceLOCRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*LOCRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceMXRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceMXRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	MXRecords []*MXRecordData `xml:"MXRecords,omitempty" json:"MXRecords,omitempty"`
}

type ReplaceMXRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceMXRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*MXRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceNAPTRRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceNAPTRRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	NAPTRRecords []*NAPTRRecordData `xml:"NAPTRRecords,omitempty" json:"NAPTRRecords,omitempty"`
}

type ReplaceNAPTRRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceNAPTRRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*NAPTRRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceNSAPRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceNSAPRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	NSAPRecords []*NSAPRecordData `xml:"NSAPRecords,omitempty" json:"NSAPRecords,omitempty"`
}

type ReplaceNSAPRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceNSAPRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*NSAPRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplacePOLICYRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplacePOLICYRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	POLICYRecords []*POLICYRecordData `xml:"POLICYRecords,omitempty" json:"POLICYRecords,omitempty"`
}

type ReplacePOLICYRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplacePOLICYRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*POLICYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplacePTRRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplacePTRRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	PTRRecords []*PTRRecordData `xml:"PTRRecords,omitempty" json:"PTRRecords,omitempty"`
}

type ReplacePTRRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplacePTRRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*PTRRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplacePXRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplacePXRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	PXRecords []*PXRecordData `xml:"PXRecords,omitempty" json:"PXRecords,omitempty"`
}

type ReplacePXRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplacePXRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*PXRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceRPRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceRPRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	RPRecords []*RPRecordData `xml:"RPRecords,omitempty" json:"RPRecords,omitempty"`
}

type ReplaceRPRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceRPRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*RPRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceSPFRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceSPFRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	SPFRecords []*SPFRecordData `xml:"SPFRecords,omitempty" json:"SPFRecords,omitempty"`
}

type ReplaceSPFRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceSPFRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*SPFRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceSRVRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceSRVRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	SRVRecords []*SRVRecordData `xml:"SRVRecords,omitempty" json:"SRVRecords,omitempty"`
}

type ReplaceSRVRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceSRVRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*SRVRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceSSHFPRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceSSHFPRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	SSHFPRecords []*SSHFPRecordData `xml:"SSHFPRecords,omitempty" json:"SSHFPRecords,omitempty"`
}

type ReplaceSSHFPRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceSSHFPRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*SSHFPRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceTLSARecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceTLSARecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	TLSARecords []*TLSARecordData `xml:"TLSARecords,omitempty" json:"TLSARecords,omitempty"`
}

type ReplaceTLSARecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceTLSARecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*TLSARecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceTXTRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceTXTRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	TXTRecords []*TXTRecordData `xml:"TXTRecords,omitempty" json:"TXTRecords,omitempty"`
}

type ReplaceTXTRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceTXTRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*TXTRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type ReplaceNSRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceNSRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	NSRecords []*NSRecordData `xml:"NSRecords,omitempty" json:"NSRecords,omitempty"`
}

type ReplaceNSRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ReplaceNSRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*NSRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetANYRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetANYRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetANYRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetANYRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ANYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetAllRecordsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetAllRecordsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetAllRecordsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetAllRecordsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ANYRecordData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetAllAliasQNamesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetAllAliasQNamesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`
}

type GetAllAliasQNamesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetAllAliasQNamesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *QNames `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneUserRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneUserRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of user
	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`
}

type GetOneUserResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneUserResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *UserData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneUserRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneUserRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of user
	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`
}

type DeleteOneUserResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneUserResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateUserRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateUserRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	Permission []string `xml:"permission,omitempty" json:"permission,omitempty"`

	Group_name []string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	Zone []*PermissionZone `xml:"zone,omitempty" json:"zone,omitempty"`

	Forbid []*PermissionData `xml:"forbid,omitempty" json:"forbid,omitempty"`

	Nickname string `xml:"nickname,omitempty" json:"nickname,omitempty"`

	First_name string `xml:"first_name,omitempty" json:"first_name,omitempty"`

	Last_name string `xml:"last_name,omitempty" json:"last_name,omitempty"`

	Phone string `xml:"phone,omitempty" json:"phone,omitempty"`

	Fax string `xml:"fax,omitempty" json:"fax,omitempty"`

	Email string `xml:"email,omitempty" json:"email,omitempty"`

	Notify_email string `xml:"notify_email,omitempty" json:"notify_email,omitempty"`

	Pager_email string `xml:"pager_email,omitempty" json:"pager_email,omitempty"`

	Address string `xml:"address,omitempty" json:"address,omitempty"`

	Address_2 string `xml:"address_2,omitempty" json:"address_2,omitempty"`

	City string `xml:"city,omitempty" json:"city,omitempty"`

	State string `xml:"state,omitempty" json:"state,omitempty"`

	Post_code string `xml:"post_code,omitempty" json:"post_code,omitempty"`

	Country string `xml:"country,omitempty" json:"country,omitempty"`

	Website string `xml:"website,omitempty" json:"website,omitempty"`

	Organization string `xml:"organization,omitempty" json:"organization,omitempty"`
}

type CreateUserResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateUserResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *UserData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateUserRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateUserRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	New_user_name string `xml:"new_user_name,omitempty" json:"new_user_name,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	Require_pw_change string `xml:"require_pw_change,omitempty" json:"require_pw_change,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Permission []string `xml:"permission,omitempty" json:"permission,omitempty"`

	Group_name []string `xml:"group_name,omitempty" json:"group_name,omitempty"`

	Zone []*PermissionZone `xml:"zone,omitempty" json:"zone,omitempty"`

	Forbid []*PermissionData `xml:"forbid,omitempty" json:"forbid,omitempty"`

	Nickname string `xml:"nickname,omitempty" json:"nickname,omitempty"`

	First_name string `xml:"first_name,omitempty" json:"first_name,omitempty"`

	Last_name string `xml:"last_name,omitempty" json:"last_name,omitempty"`

	Phone string `xml:"phone,omitempty" json:"phone,omitempty"`

	Fax string `xml:"fax,omitempty" json:"fax,omitempty"`

	Email string `xml:"email,omitempty" json:"email,omitempty"`

	Notify_email string `xml:"notify_email,omitempty" json:"notify_email,omitempty"`

	Pager_email string `xml:"pager_email,omitempty" json:"pager_email,omitempty"`

	Address string `xml:"address,omitempty" json:"address,omitempty"`

	Address_2 string `xml:"address_2,omitempty" json:"address_2,omitempty"`

	City string `xml:"city,omitempty" json:"city,omitempty"`

	State string `xml:"state,omitempty" json:"state,omitempty"`

	Post_code string `xml:"post_code,omitempty" json:"post_code,omitempty"`

	Country string `xml:"country,omitempty" json:"country,omitempty"`

	Website string `xml:"website,omitempty" json:"website,omitempty"`

	Organization string `xml:"organization,omitempty" json:"organization,omitempty"`
}

type UpdateUserResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateUserResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *UserData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetUsersRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetUsersRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Search string `xml:"search,omitempty" json:"search,omitempty"`
}

type GetUsersResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetUsersResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*UserData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetUpdateUsersRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetUpdateUsersRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`
}

type GetUpdateUsersResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetUpdateUsersResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*UserData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateUpdateUserRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateUpdateUserRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type UpdateUpdateUserResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateUpdateUserResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *UserData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneUpdateUserRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneUpdateUserRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`
}

type DeleteOneUpdateUserResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneUpdateUserResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateUserPasswordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateUserPasswordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type UpdateUserPasswordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateUserPasswordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *UserData `xml:"data,omitempty" json:"data,omitempty"`
}

type BlockUserRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ BlockUserRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`
}

type BlockUserResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ BlockUserResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *UserData `xml:"data,omitempty" json:"data,omitempty"`
}

type UnblockUserRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UnblockUserRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`
}

type UnblockUserResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UnblockUserResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *UserData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateContactRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateContactRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Nickname string `xml:"nickname,omitempty" json:"nickname,omitempty"`

	First_name string `xml:"first_name,omitempty" json:"first_name,omitempty"`

	Last_name string `xml:"last_name,omitempty" json:"last_name,omitempty"`

	Phone string `xml:"phone,omitempty" json:"phone,omitempty"`

	Fax string `xml:"fax,omitempty" json:"fax,omitempty"`

	Email string `xml:"email,omitempty" json:"email,omitempty"`

	Notify_email string `xml:"notify_email,omitempty" json:"notify_email,omitempty"`

	Pager_email string `xml:"pager_email,omitempty" json:"pager_email,omitempty"`

	Address string `xml:"address,omitempty" json:"address,omitempty"`

	Address_2 string `xml:"address_2,omitempty" json:"address_2,omitempty"`

	City string `xml:"city,omitempty" json:"city,omitempty"`

	State string `xml:"state,omitempty" json:"state,omitempty"`

	Post_code string `xml:"post_code,omitempty" json:"post_code,omitempty"`

	Country string `xml:"country,omitempty" json:"country,omitempty"`

	Website string `xml:"website,omitempty" json:"website,omitempty"`

	Organization string `xml:"organization,omitempty" json:"organization,omitempty"`
}

type CreateContactResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateContactResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ContactData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneContactRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneContactRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Nickname string `xml:"nickname,omitempty" json:"nickname,omitempty"`
}

type GetOneContactResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneContactResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ContactData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetContactsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetContactsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`
}

type GetContactsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetContactsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*ContactData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneContactRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneContactRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Nickname string `xml:"nickname,omitempty" json:"nickname,omitempty"`
}

type DeleteOneContactResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneContactResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateContactRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateContactRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Nickname string `xml:"nickname,omitempty" json:"nickname,omitempty"`

	New_nickname string `xml:"new_nickname,omitempty" json:"new_nickname,omitempty"`

	First_name string `xml:"first_name,omitempty" json:"first_name,omitempty"`

	Last_name string `xml:"last_name,omitempty" json:"last_name,omitempty"`

	Phone string `xml:"phone,omitempty" json:"phone,omitempty"`

	Fax string `xml:"fax,omitempty" json:"fax,omitempty"`

	Email string `xml:"email,omitempty" json:"email,omitempty"`

	Notify_email string `xml:"notify_email,omitempty" json:"notify_email,omitempty"`

	Pager_email string `xml:"pager_email,omitempty" json:"pager_email,omitempty"`

	Address string `xml:"address,omitempty" json:"address,omitempty"`

	Address_2 string `xml:"address_2,omitempty" json:"address_2,omitempty"`

	City string `xml:"city,omitempty" json:"city,omitempty"`

	State string `xml:"state,omitempty" json:"state,omitempty"`

	Post_code string `xml:"post_code,omitempty" json:"post_code,omitempty"`

	Country string `xml:"country,omitempty" json:"country,omitempty"`

	Website string `xml:"website,omitempty" json:"website,omitempty"`

	Organization string `xml:"organization,omitempty" json:"organization,omitempty"`
}

type UpdateContactResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateContactResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ContactData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateCustomerRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateCustomerRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	Organization string `xml:"organization,omitempty" json:"organization,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Pool_id string `xml:"pool_id,omitempty" json:"pool_id,omitempty"`

	Type_ string `xml:"type,omitempty" json:"type,omitempty"`

	Level string `xml:"level,omitempty" json:"level,omitempty"`

	Primary_sales_agent string `xml:"primary_sales_agent,omitempty" json:"primary_sales_agent,omitempty"`

	Salesforce_id string `xml:"salesforce_id,omitempty" json:"salesforce_id,omitempty"`

	Owner *CustomerAdminData `xml:"owner,omitempty" json:"owner,omitempty"`

	Billing *CustomerAdminData `xml:"billing,omitempty" json:"billing,omitempty"`

	Permission []string `xml:"permission,omitempty" json:"permission,omitempty"`

	Forbid []string `xml:"forbid,omitempty" json:"forbid,omitempty"`
}

type CreateCustomerResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateCustomerResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CustomerData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateCustomerRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateCustomerRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	New_customer_name string `xml:"new_customer_name,omitempty" json:"new_customer_name,omitempty"`

	Organization string `xml:"organization,omitempty" json:"organization,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Note string `xml:"note,omitempty" json:"note,omitempty"`

	Pool_id string `xml:"pool_id,omitempty" json:"pool_id,omitempty"`

	Activated string `xml:"activated,omitempty" json:"activated,omitempty"`

	Type_ string `xml:"type,omitempty" json:"type,omitempty"`

	Level string `xml:"level,omitempty" json:"level,omitempty"`

	Primary_sales_agent string `xml:"primary_sales_agent,omitempty" json:"primary_sales_agent,omitempty"`

	Salesforce_id string `xml:"salesforce_id,omitempty" json:"salesforce_id,omitempty"`

	Owner_contact string `xml:"owner_contact,omitempty" json:"owner_contact,omitempty"`

	Billing_contact string `xml:"billing_contact,omitempty" json:"billing_contact,omitempty"`

	Permission []string `xml:"permission,omitempty" json:"permission,omitempty"`

	Forbid []string `xml:"forbid,omitempty" json:"forbid,omitempty"`
}

type UpdateCustomerResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateCustomerResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CustomerData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneCustomerRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneCustomerRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`
}

type GetOneCustomerResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneCustomerResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CustomerData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetCustomersRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCustomersRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Simple string `xml:"simple,omitempty" json:"simple,omitempty"`

	Search string `xml:"search,omitempty" json:"search,omitempty"`
}

type GetCustomersResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCustomersResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*CustomerData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneCustomerRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneCustomerRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	Note string `xml:"note,omitempty" json:"note,omitempty"`
}

type DeleteOneCustomerResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneCustomerResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type GetCustomerPrefsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCustomerPrefsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// preference name; may be '*' to list all
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`
}

type GetCustomerPrefsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCustomerPrefsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*CustomerPrefData `xml:"data,omitempty" json:"data,omitempty"`
}

type SetCustomerPrefsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetCustomerPrefsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Prefs []*CustomerPrefData `xml:"prefs,omitempty" json:"prefs,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`
}

type SetCustomerPrefsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetCustomerPrefsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type GetCustomerIPACLRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCustomerIPACLRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// customer name or ID to see ACLs for, defaults to current customer
	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	// scope of the ACL to retrieve
	Scope string `xml:"scope,omitempty" json:"scope,omitempty"`
}

type GetCustomerIPACLResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCustomerIPACLResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*CustomerIPACL `xml:"data,omitempty" json:"data,omitempty"`
}

type SetCustomerIPACLRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetCustomerIPACLRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// customer name or ID to set ACLs for, defaults to current customer
	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	Acl *CustomerIPACL `xml:"acl,omitempty" json:"acl,omitempty"`
}

type SetCustomerIPACLResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetCustomerIPACLResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*CustomerIPACL `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateCustomerOracleMetadataRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateCustomerOracleMetadataRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of customer
	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	// compartment id
	Compartment_id string `xml:"compartment_id,omitempty" json:"compartment_id,omitempty"`

	// tenant id
	Tenant string `xml:"tenant,omitempty" json:"tenant,omitempty"`
}

type CreateCustomerOracleMetadataResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateCustomerOracleMetadataResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CustomerOracleMetadataData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateCustomerOracleMetadataRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateCustomerOracleMetadataRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of customer
	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	// compartment id
	Compartment_id string `xml:"compartment_id,omitempty" json:"compartment_id,omitempty"`

	// tenant id
	Tenant string `xml:"tenant,omitempty" json:"tenant,omitempty"`
}

type UpdateCustomerOracleMetadataResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateCustomerOracleMetadataResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CustomerOracleMetadataData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetCustomerOracleMetadataRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCustomerOracleMetadataRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of customer
	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	// compartment id
	Compartment_id string `xml:"compartment_id,omitempty" json:"compartment_id,omitempty"`

	// tenant id
	Tenant string `xml:"tenant,omitempty" json:"tenant,omitempty"`
}

type GetCustomerOracleMetadataResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetCustomerOracleMetadataResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*CustomerOracleMetadataData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteCustomerOracleMetadataRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteCustomerOracleMetadataRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of customer
	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`
}

type DeleteCustomerOracleMetadataResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteCustomerOracleMetadataResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *CustomerOracleMetadataData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateZoneOracleMetadataRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateZoneOracleMetadataRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// compartment id
	Compartment_id string `xml:"compartment_id,omitempty" json:"compartment_id,omitempty"`

	// public_id
	Public_id string `xml:"public_id,omitempty" json:"public_id,omitempty"`
}

type CreateZoneOracleMetadataResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateZoneOracleMetadataResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ZoneOracleMetadataData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateZoneOracleMetadataRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateZoneOracleMetadataRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// compartment id
	Compartment_id string `xml:"compartment_id,omitempty" json:"compartment_id,omitempty"`

	// public_id
	Public_id string `xml:"public_id,omitempty" json:"public_id,omitempty"`
}

type UpdateZoneOracleMetadataResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateZoneOracleMetadataResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ZoneOracleMetadataData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetZoneOracleMetadataRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetZoneOracleMetadataRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// compartment id
	Compartment_id string `xml:"compartment_id,omitempty" json:"compartment_id,omitempty"`

	// public id
	Public_id string `xml:"public_id,omitempty" json:"public_id,omitempty"`
}

type GetZoneOracleMetadataResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetZoneOracleMetadataResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*ZoneOracleMetadataData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteZoneOracleMetadataRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteZoneOracleMetadataRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteZoneOracleMetadataResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteZoneOracleMetadataResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ZoneOracleMetadataData `xml:"data,omitempty" json:"data,omitempty"`
}

type OCIMigrateRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ OCIMigrateRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// , req
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// public_id
	Zone_ocid string `xml:"zone_ocid,omitempty" json:"zone_ocid,omitempty"`

	// compartment id
	Compartment_id string `xml:"compartment_id,omitempty" json:"compartment_id,omitempty"`

	// tenant id
	Tenancy_id string `xml:"tenancy_id,omitempty" json:"tenancy_id,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	Replacements *Replacement `xml:"replacements,omitempty" json:"replacements,omitempty"`
}

type OCIMigrateResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ OCIMigrateResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateDDNSRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDDNSRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// an IP address, either v4 or v6
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// either A or AAAA
	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type CreateDDNSResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDDNSResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DDNSData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneDDNSRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDDNSRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// either A or AAAA
	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneDDNSResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDDNSResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DDNSData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetDDNSsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDDNSsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetDDNSsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDDNSsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DDNSData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateDDNSRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDDNSRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// either A or AAAA
	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// an IP address, either v4 or v6
	Address string `xml:"address,omitempty" json:"address,omitempty"`
}

type UpdateDDNSResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDDNSResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DDNSData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneDDNSRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDDNSRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// either A or AAAA
	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type DeleteOneDDNSResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDDNSResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type ActivateDDNSRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateDDNSRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// either A or AAAA
	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`
}

type ActivateDDNSResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateDDNSResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DDNSData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeactivateDDNSRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateDDNSRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// either A or AAAA
	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`
}

type DeactivateDDNSResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateDDNSResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DDNSData `xml:"data,omitempty" json:"data,omitempty"`
}

type ResetDDNSRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ResetDDNSRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// either A or AAAA
	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`
}

type ResetDDNSResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ResetDDNSResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DDNSData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetUpdateUserPasswordRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetUpdateUserPasswordRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	User_name string `xml:"user_name,omitempty" json:"user_name,omitempty"`
}

type GetUpdateUserPasswordResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetUpdateUserPasswordResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *UpdateUserPasswordData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateDDNSHostRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDDNSHostRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// an IP address, either v4 or v6
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// either A or AAAA
	Record_type string `xml:"record_type,omitempty" json:"record_type,omitempty"`

	// name of update user
	User string `xml:"user,omitempty" json:"user,omitempty"`
}

type CreateDDNSHostResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDDNSHostResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DDNSHostData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateUpdateUserRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateUpdateUserRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Nickname string `xml:"nickname,omitempty" json:"nickname,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type CreateUpdateUserResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateUpdateUserResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *UpdateUser `xml:"data,omitempty" json:"data,omitempty"`
}

type AddDDNSRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddDDNSRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Record_id int64 `xml:"record_id,omitempty" json:"record_id,omitempty"`
}

type AddDDNSResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ AddDDNSResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DDNSData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateFailoverRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateFailoverRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// normally served address
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// TTL (time-to-live)
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// 'ip' or 'cname'
	Failover_mode string `xml:"failover_mode,omitempty" json:"failover_mode,omitempty"`

	// address or CNAME to serve on failover
	Failover_data string `xml:"failover_data,omitempty" json:"failover_data,omitempty"`

	// restore normal address automatically (Y)
	Auto_recover string `xml:"auto_recover,omitempty" json:"auto_recover,omitempty"`

	// The number of consecutive monitoring intervals to delay before placing an IP address back in service
	Recovery_delay int32 `xml:"recovery_delay,omitempty" json:"recovery_delay,omitempty"`

	// contact that gets status notification
	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`

	// when notifications are sent
	Notify_events string `xml:"notify_events,omitempty" json:"notify_events,omitempty"`

	// The IP or hostname of a syslog server to send monitor events to
	Syslog_server string `xml:"syslog_server,omitempty" json:"syslog_server,omitempty"`

	// The port of the syslog server. Defaults to 514 if not present
	Syslog_port string `xml:"syslog_port,omitempty" json:"syslog_port,omitempty"`

	// The syslog ident to use. Defaults to 'dynect'
	Syslog_ident string `xml:"syslog_ident,omitempty" json:"syslog_ident,omitempty"`

	// The syslog facility to use. Defaults to 'daemon'
	Syslog_facility string `xml:"syslog_facility,omitempty" json:"syslog_facility,omitempty"`

	// When to deliver syslog message; 'change' or 'all'
	Syslog_delivery string `xml:"syslog_delivery,omitempty" json:"syslog_delivery,omitempty"`

	// for custom syslog messages
	Syslog_probe_fmt string `xml:"syslog_probe_fmt,omitempty" json:"syslog_probe_fmt,omitempty"`

	// for custom syslog messages
	Syslog_status_fmt string `xml:"syslog_status_fmt,omitempty" json:"syslog_status_fmt,omitempty"`

	// details about monitoring
	Monitor *MonitorData `xml:"monitor,omitempty" json:"monitor,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type CreateFailoverResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateFailoverResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *FailoverData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneFailoverRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneFailoverRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneFailoverResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneFailoverResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *FailoverData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetFailoversRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetFailoversRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetFailoversResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetFailoversResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*FailoverData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateFailoverRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateFailoverRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// normally served address
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// TTL (time-to-live)
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// 'ip' or 'cname'
	Failover_mode string `xml:"failover_mode,omitempty" json:"failover_mode,omitempty"`

	// address or CNAME to serve on failover
	Failover_data string `xml:"failover_data,omitempty" json:"failover_data,omitempty"`

	// restore normal address automatically (Y)
	Auto_recover string `xml:"auto_recover,omitempty" json:"auto_recover,omitempty"`

	// The number of consecutive monitoring intervals to delay before placing an IP address back in service
	Recovery_delay int32 `xml:"recovery_delay,omitempty" json:"recovery_delay,omitempty"`

	// contact that gets status notification
	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`

	// when notifications are sent
	Notify_events string `xml:"notify_events,omitempty" json:"notify_events,omitempty"`

	// The IP or hostname of a syslog server to send monitor events to
	Syslog_server string `xml:"syslog_server,omitempty" json:"syslog_server,omitempty"`

	// The port of the syslog server. Defaults to 514 if not present
	Syslog_port string `xml:"syslog_port,omitempty" json:"syslog_port,omitempty"`

	// The syslog ident to use. Defaults to 'dynect'
	Syslog_ident string `xml:"syslog_ident,omitempty" json:"syslog_ident,omitempty"`

	// The syslog facility to use. Defaults to 'daemon'
	Syslog_facility string `xml:"syslog_facility,omitempty" json:"syslog_facility,omitempty"`

	// When to deliver syslog message; 'change' or 'all'
	Syslog_delivery string `xml:"syslog_delivery,omitempty" json:"syslog_delivery,omitempty"`

	// for custom syslog messages
	Syslog_probe_fmt string `xml:"syslog_probe_fmt,omitempty" json:"syslog_probe_fmt,omitempty"`

	// for custom syslog messages
	Syslog_status_fmt string `xml:"syslog_status_fmt,omitempty" json:"syslog_status_fmt,omitempty"`

	// details about monitoring
	Monitor *MonitorData `xml:"monitor,omitempty" json:"monitor,omitempty"`
}

type UpdateFailoverResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateFailoverResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *FailoverData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneFailoverRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneFailoverRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type DeleteOneFailoverResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneFailoverResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type ActivateFailoverRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateFailoverRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type ActivateFailoverResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateFailoverResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *FailoverData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeactivateFailoverRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateFailoverRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type DeactivateFailoverResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateFailoverResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *FailoverData `xml:"data,omitempty" json:"data,omitempty"`
}

type RecoverFailoverRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RecoverFailoverRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type RecoverFailoverResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RecoverFailoverResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *FailoverData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateLoadBalanceRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateLoadBalanceRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// pool of IP addresses to balance
	Pool []*LoadBalanceAddress `xml:"pool,omitempty" json:"pool,omitempty"`

	// TTL (time-to-live)
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// 'ip', 'global', or 'cname'
	Failover_mode string `xml:"failover_mode,omitempty" json:"failover_mode,omitempty"`

	// for 'ip' or 'cname', what to serve on failover
	Failover_data string `xml:"failover_data,omitempty" json:"failover_data,omitempty"`

	// restore normal address automatically (Y)
	Auto_recover string `xml:"auto_recover,omitempty" json:"auto_recover,omitempty"`

	// The number of consecutive monitoring intervals to delay before placing an IP address back in service
	Recovery_delay int32 `xml:"recovery_delay,omitempty" json:"recovery_delay,omitempty"`

	// contact that gets status notification
	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`

	// when notifications are sent
	Notify_events string `xml:"notify_events,omitempty" json:"notify_events,omitempty"`

	// The IP or hostname of a syslog server to send monitor events to
	Syslog_server string `xml:"syslog_server,omitempty" json:"syslog_server,omitempty"`

	// The port of the syslog server. Defaults to 514 if not present
	Syslog_port string `xml:"syslog_port,omitempty" json:"syslog_port,omitempty"`

	// The syslog ident to use. Defaults to 'dynect'
	Syslog_ident string `xml:"syslog_ident,omitempty" json:"syslog_ident,omitempty"`

	// The syslog facility to use. Defaults to 'daemon'
	Syslog_facility string `xml:"syslog_facility,omitempty" json:"syslog_facility,omitempty"`

	// When to deliver syslog message; 'change' or 'all'
	Syslog_delivery string `xml:"syslog_delivery,omitempty" json:"syslog_delivery,omitempty"`

	// for custom syslog messages
	Syslog_probe_fmt string `xml:"syslog_probe_fmt,omitempty" json:"syslog_probe_fmt,omitempty"`

	// for custom syslog messages
	Syslog_status_fmt string `xml:"syslog_status_fmt,omitempty" json:"syslog_status_fmt,omitempty"`

	// number of addresses in each DNS response
	Serve_count int32 `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	// details about monitoring
	Monitor *MonitorData `xml:"monitor,omitempty" json:"monitor,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type CreateLoadBalanceResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateLoadBalanceResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *LoadBalanceData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneLoadBalanceRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneLoadBalanceRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneLoadBalanceResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneLoadBalanceResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *LoadBalanceData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetLoadBalancesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetLoadBalancesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetLoadBalancesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetLoadBalancesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*LoadBalanceData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateLoadBalanceRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateLoadBalanceRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// pool of IP addresses to balance
	Pool []*LoadBalanceAddress `xml:"pool,omitempty" json:"pool,omitempty"`

	// TTL (time-to-live)
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// 'ip', 'global', or 'cname'
	Failover_mode string `xml:"failover_mode,omitempty" json:"failover_mode,omitempty"`

	// for 'ip' or 'cname', what to serve on failover
	Failover_data string `xml:"failover_data,omitempty" json:"failover_data,omitempty"`

	// restore normal address automatically (Y)
	Auto_recover string `xml:"auto_recover,omitempty" json:"auto_recover,omitempty"`

	// The number of consecutive monitoring intervals to delay before placing an IP address back in service
	Recovery_delay int32 `xml:"recovery_delay,omitempty" json:"recovery_delay,omitempty"`

	// contact that gets status notification
	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`

	// when notifications are sent
	Notify_events string `xml:"notify_events,omitempty" json:"notify_events,omitempty"`

	// The IP or hostname of a syslog server to send monitor events to
	Syslog_server string `xml:"syslog_server,omitempty" json:"syslog_server,omitempty"`

	// The port of the syslog server. Defaults to 514 if not present
	Syslog_port string `xml:"syslog_port,omitempty" json:"syslog_port,omitempty"`

	// The syslog ident to use. Defaults to 'dynect'
	Syslog_ident string `xml:"syslog_ident,omitempty" json:"syslog_ident,omitempty"`

	// The syslog facility to use. Defaults to 'daemon'
	Syslog_facility string `xml:"syslog_facility,omitempty" json:"syslog_facility,omitempty"`

	// When to deliver syslog message; 'change' or 'all'
	Syslog_delivery string `xml:"syslog_delivery,omitempty" json:"syslog_delivery,omitempty"`

	// for custom syslog messages
	Syslog_probe_fmt string `xml:"syslog_probe_fmt,omitempty" json:"syslog_probe_fmt,omitempty"`

	// for custom syslog messages
	Syslog_status_fmt string `xml:"syslog_status_fmt,omitempty" json:"syslog_status_fmt,omitempty"`

	// number of addresses in each DNS response
	Serve_count int32 `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	// details about monitoring
	Monitor *MonitorData `xml:"monitor,omitempty" json:"monitor,omitempty"`
}

type UpdateLoadBalanceResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateLoadBalanceResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *LoadBalanceData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneLoadBalanceRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneLoadBalanceRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type DeleteOneLoadBalanceResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneLoadBalanceResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type ActivateLoadBalanceRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateLoadBalanceRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type ActivateLoadBalanceResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateLoadBalanceResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *LoadBalanceData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeactivateLoadBalanceRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateLoadBalanceRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type DeactivateLoadBalanceResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateLoadBalanceResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *LoadBalanceData `xml:"data,omitempty" json:"data,omitempty"`
}

type RecoverLoadBalanceRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RecoverLoadBalanceRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type RecoverLoadBalanceResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RecoverLoadBalanceResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *LoadBalanceData `xml:"data,omitempty" json:"data,omitempty"`
}

type RecoverLoadBalanceIPRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RecoverLoadBalanceIPRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Address string `xml:"address,omitempty" json:"address,omitempty"`
}

type RecoverLoadBalanceIPResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RecoverLoadBalanceIPResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *LoadBalanceData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateLoadBalancePoolEntryRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateLoadBalancePoolEntryRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// an IP address to monitor and publish
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// a human-readable label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// how often this is served relative to others in pool
	Weight int32 `xml:"weight,omitempty" json:"weight,omitempty"`

	// how this address reponds to monitoring: obey,remove,always,no
	Serve_mode string `xml:"serve_mode,omitempty" json:"serve_mode,omitempty"`
}

type CreateLoadBalancePoolEntryResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateLoadBalancePoolEntryResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *LoadBalancePoolEntry `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateLoadBalancePoolEntryRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateLoadBalancePoolEntryRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// The IP of the pool entry to update
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// If specified, the new IP address for this entry
	New_address string `xml:"new_address,omitempty" json:"new_address,omitempty"`

	// a human-readable label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// how often this is served relative to others in pool
	Weight int32 `xml:"weight,omitempty" json:"weight,omitempty"`

	// how this address reponds to monitoring: obey,remove,always,no
	Serve_mode string `xml:"serve_mode,omitempty" json:"serve_mode,omitempty"`
}

type UpdateLoadBalancePoolEntryResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateLoadBalancePoolEntryResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *LoadBalancePoolEntry `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneLoadBalancePoolEntryRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneLoadBalancePoolEntryRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// The IP of the pool entry to get
	Address string `xml:"address,omitempty" json:"address,omitempty"`
}

type GetOneLoadBalancePoolEntryResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneLoadBalancePoolEntryResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *LoadBalancePoolEntry `xml:"data,omitempty" json:"data,omitempty"`
}

type GetLoadBalancePoolEntriesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetLoadBalancePoolEntriesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetLoadBalancePoolEntriesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetLoadBalancePoolEntriesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*LoadBalancePoolEntry `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneLoadBalancePoolEntryRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneLoadBalancePoolEntryRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// The IP of the pool entry to delete
	Address string `xml:"address,omitempty" json:"address,omitempty"`
}

type DeleteOneLoadBalancePoolEntryResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneLoadBalancePoolEntryResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateGSLBRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateGSLBRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// per-region addresses and configuration
	Region []*GSLBRegion `xml:"region,omitempty" json:"region,omitempty"`

	// TTL (time-to-live)
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// restore normal address automatically (Y)
	Auto_recover string `xml:"auto_recover,omitempty" json:"auto_recover,omitempty"`

	// The number of consecutive monitoring intervals to delay before placing an IP address back in service
	Recovery_delay int32 `xml:"recovery_delay,omitempty" json:"recovery_delay,omitempty"`

	// contact that gets status notification
	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`

	// when notifications are sent
	Notify_events string `xml:"notify_events,omitempty" json:"notify_events,omitempty"`

	// The IP or hostname of a syslog server to send monitor events to
	Syslog_server string `xml:"syslog_server,omitempty" json:"syslog_server,omitempty"`

	// The port of the syslog server. Defaults to 514 if not present
	Syslog_port string `xml:"syslog_port,omitempty" json:"syslog_port,omitempty"`

	// The syslog ident to use. Defaults to 'dynect'
	Syslog_ident string `xml:"syslog_ident,omitempty" json:"syslog_ident,omitempty"`

	// The syslog facility to use. Defaults to 'daemon'
	Syslog_facility string `xml:"syslog_facility,omitempty" json:"syslog_facility,omitempty"`

	// When to deliver syslog message; 'change' or 'all'
	Syslog_delivery string `xml:"syslog_delivery,omitempty" json:"syslog_delivery,omitempty"`

	// for custom syslog messages
	Syslog_probe_fmt string `xml:"syslog_probe_fmt,omitempty" json:"syslog_probe_fmt,omitempty"`

	// for custom syslog messages
	Syslog_status_fmt string `xml:"syslog_status_fmt,omitempty" json:"syslog_status_fmt,omitempty"`

	// details about monitoring
	Monitor *MonitorData `xml:"monitor,omitempty" json:"monitor,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type CreateGSLBResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateGSLBResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *GSLBData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneGSLBRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneGSLBRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneGSLBResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneGSLBResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *GSLBData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetGSLBsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetGSLBsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetGSLBsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetGSLBsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*GSLBData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateGSLBRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateGSLBRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// per-region addresses and configuration
	Region []*GSLBRegion `xml:"region,omitempty" json:"region,omitempty"`

	// TTL (time-to-live)
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// restore normal address automatically (Y)
	Auto_recover string `xml:"auto_recover,omitempty" json:"auto_recover,omitempty"`

	// The number of consecutive monitoring intervals to delay before placing an IP address back in service
	Recovery_delay int32 `xml:"recovery_delay,omitempty" json:"recovery_delay,omitempty"`

	// contact that gets status notification
	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`

	// when notifications are sent
	Notify_events string `xml:"notify_events,omitempty" json:"notify_events,omitempty"`

	// The IP or hostname of a syslog server to send monitor events to
	Syslog_server string `xml:"syslog_server,omitempty" json:"syslog_server,omitempty"`

	// The port of the syslog server. Defaults to 514 if not present
	Syslog_port string `xml:"syslog_port,omitempty" json:"syslog_port,omitempty"`

	// The syslog ident to use. Defaults to 'dynect'
	Syslog_ident string `xml:"syslog_ident,omitempty" json:"syslog_ident,omitempty"`

	// The syslog facility to use. Defaults to 'daemon'
	Syslog_facility string `xml:"syslog_facility,omitempty" json:"syslog_facility,omitempty"`

	// When to deliver syslog message; 'change' or 'all'
	Syslog_delivery string `xml:"syslog_delivery,omitempty" json:"syslog_delivery,omitempty"`

	// for custom syslog messages
	Syslog_probe_fmt string `xml:"syslog_probe_fmt,omitempty" json:"syslog_probe_fmt,omitempty"`

	// for custom syslog messages
	Syslog_status_fmt string `xml:"syslog_status_fmt,omitempty" json:"syslog_status_fmt,omitempty"`

	// details about monitoring
	Monitor *MonitorData `xml:"monitor,omitempty" json:"monitor,omitempty"`
}

type UpdateGSLBResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateGSLBResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *GSLBData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneGSLBRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneGSLBRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type DeleteOneGSLBResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneGSLBResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type ActivateGSLBRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateGSLBRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type ActivateGSLBResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateGSLBResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *GSLBData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeactivateGSLBRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateGSLBRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type DeactivateGSLBResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateGSLBResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *GSLBData `xml:"data,omitempty" json:"data,omitempty"`
}

type RecoverGSLBRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RecoverGSLBRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type RecoverGSLBResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RecoverGSLBResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *GSLBData `xml:"data,omitempty" json:"data,omitempty"`
}

type RecoverGSLBIPRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RecoverGSLBIPRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Address string `xml:"address,omitempty" json:"address,omitempty"`
}

type RecoverGSLBIPResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RecoverGSLBIPResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *GSLBData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateGSLBRegionRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateGSLBRegionRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// 'ip', 'global', or 'cname'
	Failover_mode string `xml:"failover_mode,omitempty" json:"failover_mode,omitempty"`

	// for 'ip' or 'cname', what to serve on failover
	Failover_data string `xml:"failover_data,omitempty" json:"failover_data,omitempty"`

	// number of addresses in each DNS response
	Serve_count int32 `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	// number of 'ok' addresses before region fails over
	Min_healthy int32 `xml:"min_healthy,omitempty" json:"min_healthy,omitempty"`

	// pool of IP addresses to balance
	Pool []*GSLBAddress `xml:"pool,omitempty" json:"pool,omitempty"`
}

type CreateGSLBRegionResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateGSLBRegionResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *GSLBRegionData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneGSLBRegionRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneGSLBRegionRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneGSLBRegionResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneGSLBRegionResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *GSLBRegionData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetGSLBRegionsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetGSLBRegionsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetGSLBRegionsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetGSLBRegionsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*GSLBRegionData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateGSLBRegionRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateGSLBRegionRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// 'ip', 'global', or 'cname'
	Failover_mode string `xml:"failover_mode,omitempty" json:"failover_mode,omitempty"`

	// for 'ip' or 'cname', what to serve on failover
	Failover_data string `xml:"failover_data,omitempty" json:"failover_data,omitempty"`

	// number of addresses in each DNS response
	Serve_count int32 `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	// number of 'ok' addresses before region fails over
	Min_healthy int32 `xml:"min_healthy,omitempty" json:"min_healthy,omitempty"`

	// pool of IP addresses to balance
	Pool []*GSLBAddress `xml:"pool,omitempty" json:"pool,omitempty"`
}

type UpdateGSLBRegionResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateGSLBRegionResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *GSLBRegionData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneGSLBRegionRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneGSLBRegionRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type DeleteOneGSLBRegionResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneGSLBRegionResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateGSLBRegionPoolEntryRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateGSLBRegionPoolEntryRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// an IP address or FQDN to monitor and publish
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// a human-readable label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// how often this is served relative to others in pool
	Weight int32 `xml:"weight,omitempty" json:"weight,omitempty"`

	// how this address reponds to monitoring: obey,remove,always,no
	Serve_mode string `xml:"serve_mode,omitempty" json:"serve_mode,omitempty"`
}

type CreateGSLBRegionPoolEntryResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateGSLBRegionPoolEntryResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *GSLBRegionPoolEntry `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateGSLBRegionPoolEntryRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateGSLBRegionPoolEntryRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// The IP address or FQDN of the pool entry to update
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// If specified, the new IP address for this entry
	New_address string `xml:"new_address,omitempty" json:"new_address,omitempty"`

	// a human-readable label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// how often this is served relative to others in pool
	Weight int32 `xml:"weight,omitempty" json:"weight,omitempty"`

	// how this address reponds to monitoring: obey,remove,always,no
	Serve_mode string `xml:"serve_mode,omitempty" json:"serve_mode,omitempty"`
}

type UpdateGSLBRegionPoolEntryResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateGSLBRegionPoolEntryResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *GSLBRegionPoolEntry `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneGSLBRegionPoolEntryRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneGSLBRegionPoolEntryRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// The IP address or FQDN of the pool entry to get
	Address string `xml:"address,omitempty" json:"address,omitempty"`
}

type GetOneGSLBRegionPoolEntryResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneGSLBRegionPoolEntryResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *GSLBRegionPoolEntry `xml:"data,omitempty" json:"data,omitempty"`
}

type GetGSLBRegionPoolEntriesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetGSLBRegionPoolEntriesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`
}

type GetGSLBRegionPoolEntriesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetGSLBRegionPoolEntriesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*GSLBRegionPoolEntry `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneGSLBRegionPoolEntryRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneGSLBRegionPoolEntryRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// The IP of the pool entry to delete
	Address string `xml:"address,omitempty" json:"address,omitempty"`
}

type DeleteOneGSLBRegionPoolEntryResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneGSLBRegionPoolEntryResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateRTTMRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateRTTMRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// per-region addresses and configuration
	Region []*RTTMRegion `xml:"region,omitempty" json:"region,omitempty"`

	// TTL (time-to-live)
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// restore normal address automatically (Y)
	Auto_recover string `xml:"auto_recover,omitempty" json:"auto_recover,omitempty"`

	// The number of consecutive monitoring intervals to delay before placing an IP address back in service
	Recovery_delay int32 `xml:"recovery_delay,omitempty" json:"recovery_delay,omitempty"`

	// contact that gets status notification
	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`

	// when notifications are sent
	Notify_events string `xml:"notify_events,omitempty" json:"notify_events,omitempty"`

	// The IP or hostname of a syslog server to send monitor events to
	Syslog_server string `xml:"syslog_server,omitempty" json:"syslog_server,omitempty"`

	// The port of the syslog server. Defaults to 514 if not present
	Syslog_port string `xml:"syslog_port,omitempty" json:"syslog_port,omitempty"`

	// The syslog ident to use. Defaults to 'dynect'
	Syslog_ident string `xml:"syslog_ident,omitempty" json:"syslog_ident,omitempty"`

	// The syslog facility to use. Defaults to 'daemon'
	Syslog_facility string `xml:"syslog_facility,omitempty" json:"syslog_facility,omitempty"`

	// When to deliver syslog message; 'change' or 'all'
	Syslog_delivery string `xml:"syslog_delivery,omitempty" json:"syslog_delivery,omitempty"`

	// for custom syslog messages
	Syslog_probe_fmt string `xml:"syslog_probe_fmt,omitempty" json:"syslog_probe_fmt,omitempty"`

	// for custom syslog messages
	Syslog_status_fmt string `xml:"syslog_status_fmt,omitempty" json:"syslog_status_fmt,omitempty"`

	// for custom syslog messages
	Syslog_rttm_fmt string `xml:"syslog_rttm_fmt,omitempty" json:"syslog_rttm_fmt,omitempty"`

	// details about monitoring
	Monitor *MonitorData `xml:"monitor,omitempty" json:"monitor,omitempty"`

	// details about performance monitoring
	Performance_monitor *MonitorData `xml:"performance_monitor,omitempty" json:"performance_monitor,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type CreateRTTMResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateRTTMResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *RTTMData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneRTTMRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneRTTMRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneRTTMResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneRTTMResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *RTTMData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetRTTMsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetRTTMsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetRTTMsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetRTTMsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*RTTMData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateRTTMRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateRTTMRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// per-region addresses and configuration
	Region []*RTTMRegion `xml:"region,omitempty" json:"region,omitempty"`

	// TTL (time-to-live)
	Ttl int32 `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// restore normal address automatically (Y)
	Auto_recover string `xml:"auto_recover,omitempty" json:"auto_recover,omitempty"`

	// The number of consecutive monitoring intervals to delay before placing an IP address back in service
	Recovery_delay int32 `xml:"recovery_delay,omitempty" json:"recovery_delay,omitempty"`

	// contact that gets status notification
	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`

	// when notifications are sent
	Notify_events string `xml:"notify_events,omitempty" json:"notify_events,omitempty"`

	// The IP or hostname of a syslog server to send monitor events to
	Syslog_server string `xml:"syslog_server,omitempty" json:"syslog_server,omitempty"`

	// The port of the syslog server. Defaults to 514 if not present
	Syslog_port string `xml:"syslog_port,omitempty" json:"syslog_port,omitempty"`

	// The syslog ident to use. Defaults to 'dynect'
	Syslog_ident string `xml:"syslog_ident,omitempty" json:"syslog_ident,omitempty"`

	// The syslog facility to use. Defaults to 'daemon'
	Syslog_facility string `xml:"syslog_facility,omitempty" json:"syslog_facility,omitempty"`

	// When to deliver syslog message; 'change' or 'all'
	Syslog_delivery string `xml:"syslog_delivery,omitempty" json:"syslog_delivery,omitempty"`

	// for custom syslog messages
	Syslog_probe_fmt string `xml:"syslog_probe_fmt,omitempty" json:"syslog_probe_fmt,omitempty"`

	// for custom syslog messages
	Syslog_status_fmt string `xml:"syslog_status_fmt,omitempty" json:"syslog_status_fmt,omitempty"`

	// for custom syslog messages
	Syslog_rttm_fmt string `xml:"syslog_rttm_fmt,omitempty" json:"syslog_rttm_fmt,omitempty"`

	// details about monitoring
	Monitor *MonitorData `xml:"monitor,omitempty" json:"monitor,omitempty"`

	// details about performance monitoring
	Performance_monitor *MonitorData `xml:"performance_monitor,omitempty" json:"performance_monitor,omitempty"`
}

type UpdateRTTMResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateRTTMResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *RTTMData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneRTTMRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneRTTMRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type DeleteOneRTTMResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneRTTMResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type ActivateRTTMRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateRTTMRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type ActivateRTTMResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateRTTMResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *RTTMData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeactivateRTTMRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateRTTMRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type DeactivateRTTMResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateRTTMResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *RTTMData `xml:"data,omitempty" json:"data,omitempty"`
}

type RecoverRTTMRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RecoverRTTMRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type RecoverRTTMResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RecoverRTTMResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *RTTMData `xml:"data,omitempty" json:"data,omitempty"`
}

type RecoverRTTMIPRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RecoverRTTMIPRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Address string `xml:"address,omitempty" json:"address,omitempty"`
}

type RecoverRTTMIPResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RecoverRTTMIPResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *RTTMData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetRTTMLogsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetRTTMLogsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// The timestamp indicating the beginning of the period to report on
	Start_ts int32 `xml:"start_ts,omitempty" json:"start_ts,omitempty"`

	// The timestamp indicating the end of the period to report on
	End_ts int32 `xml:"end_ts,omitempty" json:"end_ts,omitempty"`
}

type GetRTTMLogsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetRTTMLogsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*RTTMLogData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetRTTMRRSetsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetRTTMRRSetsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// The timestamp indicating the period to report on
	Ts int32 `xml:"ts,omitempty" json:"ts,omitempty"`
}

type GetRTTMRRSetsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetRTTMRRSetsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*RTTMLogData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateRTTMRegionRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateRTTMRegionRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// 'Y' or 'N', if 'Y', region will filled in with global settings
	Autopopulate string `xml:"autopopulate,omitempty" json:"autopopulate,omitempty"`

	// number of addresses in each DNS response
	Serve_count int32 `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	// pool_count, number of addresses to be included in the serve pool
	Ep int32 `xml:"ep,omitempty" json:"ep,omitempty"`

	// 'ip', 'global', 'region', default 'global'
	Failover_mode string `xml:"failover_mode,omitempty" json:"failover_mode,omitempty"`

	// for 'ip' mode, address to serve on failover. For 'region' mode, region_code of the region to failover to.
	Failover_data string `xml:"failover_data,omitempty" json:"failover_data,omitempty"`

	// failover_count, number of addresses that must be 'ok', otherwise a region is considered 'failover'
	Apmc int32 `xml:"apmc,omitempty" json:"apmc,omitempty"`

	// failover_count2, number of addresses that must be 'ok', otherwise a region is considered 'failover'
	Epmc int32 `xml:"epmc,omitempty" json:"epmc,omitempty"`

	// pool of IP addresses to balance
	Pool []*RTTMAddress `xml:"pool,omitempty" json:"pool,omitempty"`
}

type CreateRTTMRegionResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateRTTMRegionResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *RTTMRegionData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneRTTMRegionRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneRTTMRegionRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneRTTMRegionResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneRTTMRegionResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *RTTMRegionData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetRTTMRegionsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetRTTMRegionsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetRTTMRegionsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetRTTMRegionsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*RTTMRegionData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateRTTMRegionRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateRTTMRegionRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// 'Y' or 'N', if 'Y', region will filled in with global settings
	Autopopulate string `xml:"autopopulate,omitempty" json:"autopopulate,omitempty"`

	// number of addresses in each DNS response
	Serve_count int32 `xml:"serve_count,omitempty" json:"serve_count,omitempty"`

	// pool_count, number of addresses to be included in the serve pool
	Ep int32 `xml:"ep,omitempty" json:"ep,omitempty"`

	// 'ip', 'global', 'region', default 'global'
	Failover_mode string `xml:"failover_mode,omitempty" json:"failover_mode,omitempty"`

	// for 'ip' mode, address to serve on failover. For 'region' mode, region_code of the region to failover to.
	Failover_data string `xml:"failover_data,omitempty" json:"failover_data,omitempty"`

	// failover_count, number of addresses that must be 'ok', otherwise a region is considered 'failover'
	Apmc int32 `xml:"apmc,omitempty" json:"apmc,omitempty"`

	// failover_count2, number of addresses that must be 'ok', otherwise a region is considered 'failover'
	Epmc int32 `xml:"epmc,omitempty" json:"epmc,omitempty"`

	// pool of IP addresses to balance
	Pool []*RTTMAddress `xml:"pool,omitempty" json:"pool,omitempty"`
}

type UpdateRTTMRegionResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateRTTMRegionResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *RTTMRegionData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneRTTMRegionRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneRTTMRegionRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type DeleteOneRTTMRegionResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneRTTMRegionResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateRTTMRegionPoolEntryRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateRTTMRegionPoolEntryRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// an IP address to monitor and publish
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// a human-readable label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// how often this is served relative to others in pool
	Weight int32 `xml:"weight,omitempty" json:"weight,omitempty"`

	// how this address reponds to monitoring: obey,remove,always,no
	Serve_mode string `xml:"serve_mode,omitempty" json:"serve_mode,omitempty"`
}

type CreateRTTMRegionPoolEntryResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateRTTMRegionPoolEntryResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *RTTMRegionPoolEntry `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateRTTMRegionPoolEntryRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateRTTMRegionPoolEntryRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// The IP of the pool entry to update
	Address string `xml:"address,omitempty" json:"address,omitempty"`

	// If specified, the new IP address for this entry
	New_address string `xml:"new_address,omitempty" json:"new_address,omitempty"`

	// a human-readable label
	Label string `xml:"label,omitempty" json:"label,omitempty"`

	// how often this is served relative to others in pool
	Weight int32 `xml:"weight,omitempty" json:"weight,omitempty"`

	// how this address reponds to monitoring: obey,remove,always,no
	Serve_mode string `xml:"serve_mode,omitempty" json:"serve_mode,omitempty"`
}

type UpdateRTTMRegionPoolEntryResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateRTTMRegionPoolEntryResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *RTTMRegionPoolEntry `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneRTTMRegionPoolEntryRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneRTTMRegionPoolEntryRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// The IP of the pool entry to get
	Address string `xml:"address,omitempty" json:"address,omitempty"`
}

type GetOneRTTMRegionPoolEntryResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneRTTMRegionPoolEntryResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *RTTMRegionPoolEntry `xml:"data,omitempty" json:"data,omitempty"`
}

type GetRTTMRegionPoolEntriesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetRTTMRegionPoolEntriesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`
}

type GetRTTMRegionPoolEntriesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetRTTMRegionPoolEntriesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*RTTMRegionPoolEntry `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneRTTMRegionPoolEntryRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneRTTMRegionPoolEntryRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// 'global' or specific region code: 'US West', 'US Central', 'US East', 'EU West', 'EU Central', 'Asia',
	Region_code string `xml:"region_code,omitempty" json:"region_code,omitempty"`

	// The IP of the pool entry to delete
	Address string `xml:"address,omitempty" json:"address,omitempty"`
}

type DeleteOneRTTMRegionPoolEntryResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneRTTMRegionPoolEntryResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateHTTPRedirectRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateHTTPRedirectRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// URL requests are redirecto to
	Url string `xml:"url,omitempty" json:"url,omitempty"`

	// either '301' (temporary) or '302' (permanent)
	Code string `xml:"code,omitempty" json:"code,omitempty"`

	// should redirected URL include requested URL
	Keep_uri string `xml:"keep_uri,omitempty" json:"keep_uri,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type CreateHTTPRedirectResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateHTTPRedirectResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *HTTPRedirectData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneHTTPRedirectRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneHTTPRedirectRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneHTTPRedirectResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneHTTPRedirectResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *HTTPRedirectData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetHTTPRedirectsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetHTTPRedirectsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetHTTPRedirectsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetHTTPRedirectsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*HTTPRedirectData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateHTTPRedirectRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateHTTPRedirectRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// URL requests are redirecto to
	Url string `xml:"url,omitempty" json:"url,omitempty"`

	// either '301' (temporary) or '302' (permanent)
	Code string `xml:"code,omitempty" json:"code,omitempty"`

	// should redirected URL include requested URL
	Keep_uri string `xml:"keep_uri,omitempty" json:"keep_uri,omitempty"`
}

type UpdateHTTPRedirectResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateHTTPRedirectResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *HTTPRedirectData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneHTTPRedirectRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneHTTPRedirectRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	Publish string `xml:"publish,omitempty" json:"publish,omitempty"`
}

type DeleteOneHTTPRedirectResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneHTTPRedirectResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateAdvRedirectRuleRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateAdvRedirectRuleRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// either '301' (temporary) or '302' (permanent)
	Code string `xml:"code,omitempty" json:"code,omitempty"`

	// host portion of URL to match
	Host_prefix string `xml:"host_prefix,omitempty" json:"host_prefix,omitempty"`

	// path portion of URL to match
	Path string `xml:"path,omitempty" json:"path,omitempty"`

	// replacement pattern
	Url_pattern string `xml:"url_pattern,omitempty" json:"url_pattern,omitempty"`

	// 'Y'/'N', default 'Y'
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// Public ID of next AdvRedirect rule to be processed. (default to end of list)
	Next_public_id string `xml:"next_public_id,omitempty" json:"next_public_id,omitempty"`
}

type CreateAdvRedirectRuleResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateAdvRedirectRuleResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *AdvRedirectRuleData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateAdvRedirectRuleRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateAdvRedirectRuleRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// public_id of Rule
	Public_id string `xml:"public_id,omitempty" json:"public_id,omitempty"`

	// either '301' (temporary) or '302' (permanent)
	Code string `xml:"code,omitempty" json:"code,omitempty"`

	// host portion of URL to match
	Host_prefix string `xml:"host_prefix,omitempty" json:"host_prefix,omitempty"`

	// path portion of URL to match
	Path string `xml:"path,omitempty" json:"path,omitempty"`

	// replacement pattern
	Url_pattern string `xml:"url_pattern,omitempty" json:"url_pattern,omitempty"`

	// 'Y'/'N', default 'Y'
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// Public ID of next AdvRedirect rule to be processed. (default to end of list)
	Next_public_id string `xml:"next_public_id,omitempty" json:"next_public_id,omitempty"`
}

type UpdateAdvRedirectRuleResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateAdvRedirectRuleResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *AdvRedirectRuleData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneAdvRedirectRuleRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneAdvRedirectRuleRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// public_id of Rule
	Public_id string `xml:"public_id,omitempty" json:"public_id,omitempty"`
}

type GetOneAdvRedirectRuleResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneAdvRedirectRuleResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *AdvRedirectRuleData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetAdvRedirectRulesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetAdvRedirectRulesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetAdvRedirectRulesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetAdvRedirectRulesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*AdvRedirectRuleData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneAdvRedirectRuleRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneAdvRedirectRuleRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// public_id of Rule
	Public_id string `xml:"public_id,omitempty" json:"public_id,omitempty"`
}

type DeleteOneAdvRedirectRuleResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneAdvRedirectRuleResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *AdvRedirectRuleData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateAdvRedirectRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateAdvRedirectRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// 'Y'/'N', default 'Y'
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// List of AdvRedirectRules
	Rules []*AdvRedirectRuleData `xml:"rules,omitempty" json:"rules,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type CreateAdvRedirectResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateAdvRedirectResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *AdvRedirectData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneAdvRedirectRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneAdvRedirectRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneAdvRedirectResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneAdvRedirectResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *AdvRedirectData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetAdvRedirectsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetAdvRedirectsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Rules string `xml:"rules,omitempty" json:"rules,omitempty"`
}

type GetAdvRedirectsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetAdvRedirectsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*AdvRedirectData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateAdvRedirectRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateAdvRedirectRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// 'Y'/'N', default 'Y'
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// List of AdvRedirectRules
	Rules []*AdvRedirectRuleData `xml:"rules,omitempty" json:"rules,omitempty"`
}

type UpdateAdvRedirectResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateAdvRedirectResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *AdvRedirectData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneAdvRedirectRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneAdvRedirectRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// 'Y'/'N', default 'Y'
	Active string `xml:"active,omitempty" json:"active,omitempty"`

	// List of AdvRedirectRules
	Rules []*AdvRedirectRuleData `xml:"rules,omitempty" json:"rules,omitempty"`
}

type DeleteOneAdvRedirectResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneAdvRedirectResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *AdvRedirectData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetNodeListRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetNodeListRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetNodeListResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetNodeListResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []string `xml:"data,omitempty" json:"data,omitempty"`
}

type PublishZoneRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ PublishZoneRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Notes string `xml:"notes,omitempty" json:"notes,omitempty"`
}

type PublishZoneResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ PublishZoneResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *PublishZoneData `xml:"data,omitempty" json:"data,omitempty"`
}

type PruneZoneRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ PruneZoneRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type PruneZoneResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ PruneZoneResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ZoneData `xml:"data,omitempty" json:"data,omitempty"`
}

type FreezeZoneRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ FreezeZoneRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type FreezeZoneResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ FreezeZoneResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type ThawZoneRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ThawZoneRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type ThawZoneResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ThawZoneResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type RestoreZoneRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RestoreZoneRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type RestoreZoneResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ RestoreZoneResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type BlockZoneRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ BlockZoneRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type BlockZoneResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ BlockZoneResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteZoneChangesetRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteZoneChangesetRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteZoneChangesetResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteZoneChangesetResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type GetZoneChangesetRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetZoneChangesetRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetZoneChangesetResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetZoneChangesetResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*ZoneChangeData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetZoneNotesRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetZoneNotesRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Limit int32 `xml:"limit,omitempty" json:"limit,omitempty"`

	Offset int32 `xml:"offset,omitempty" json:"offset,omitempty"`
}

type GetZoneNotesResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetZoneNotesResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*ZoneNoteData `xml:"data,omitempty" json:"data,omitempty"`
}

type UploadZoneFileRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UploadZoneFileRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	File string `xml:"file,omitempty" json:"file,omitempty"`

	Create string `xml:"create,omitempty" json:"create,omitempty"`
}

type UploadZoneFileResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UploadZoneFileResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *TaskIDData `xml:"data,omitempty" json:"data,omitempty"`
}

type TransferZoneInRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ TransferZoneInRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Master_ip string `xml:"master_ip,omitempty" json:"master_ip,omitempty"`
}

type TransferZoneInResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ TransferZoneInResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *TaskIDData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetTransferStatusRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetTransferStatusRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetTransferStatusResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetTransferStatusResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ZoneTransferStatus `xml:"data,omitempty" json:"data,omitempty"`
}

type GetZoneConfigOptionsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetZoneConfigOptionsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetZoneConfigOptionsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetZoneConfigOptionsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*ZoneConfigOptionData `xml:"data,omitempty" json:"data,omitempty"`
}

type SetZoneConfigOptionsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetZoneConfigOptionsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	Option []*ZoneConfigOptionData `xml:"option,omitempty" json:"option,omitempty"`
}

type SetZoneConfigOptionsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ SetZoneConfigOptionsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*ZoneConfigOptionData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateIPTrackRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateIPTrackRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// A, Dynamic_A, AAAA, Dynamic_AAAA
	Record_types []string `xml:"record_types,omitempty" json:"record_types,omitempty"`

	// List of hostnames to watch for records
	Hosts []string `xml:"hosts,omitempty" json:"hosts,omitempty"`

	// 'match', 'default', or a valid ttl
	Ttl string `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// Mask that records should match
	Netmask string `xml:"netmask,omitempty" json:"netmask,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type CreateIPTrackResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateIPTrackResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *IPTrackData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneIPTrackRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneIPTrackRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Iptrack_id int64 `xml:"iptrack_id,omitempty" json:"iptrack_id,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type GetOneIPTrackResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneIPTrackResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *IPTrackData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetIPTracksRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetIPTracksRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetIPTracksResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetIPTracksResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*IPTrackData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateIPTrackRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateIPTrackRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Iptrack_id int64 `xml:"iptrack_id,omitempty" json:"iptrack_id,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`

	// A, Dynamic_A, AAAA, Dynamic_AAAA
	Record_types []string `xml:"record_types,omitempty" json:"record_types,omitempty"`

	// List of hostnames to watch for records
	Hosts []string `xml:"hosts,omitempty" json:"hosts,omitempty"`

	// 'match', 'default', or a valid ttl
	Ttl string `xml:"ttl,omitempty" json:"ttl,omitempty"`

	// Mask that records should match
	Netmask string `xml:"netmask,omitempty" json:"netmask,omitempty"`
}

type UpdateIPTrackResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateIPTrackResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *IPTrackData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneIPTrackRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneIPTrackRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Iptrack_id int64 `xml:"iptrack_id,omitempty" json:"iptrack_id,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type DeleteOneIPTrackResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneIPTrackResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type ActivateIPTrackRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateIPTrackRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Iptrack_id int64 `xml:"iptrack_id,omitempty" json:"iptrack_id,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type ActivateIPTrackResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateIPTrackResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *IPTrackData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeactivateIPTrackRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateIPTrackRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Iptrack_id int64 `xml:"iptrack_id,omitempty" json:"iptrack_id,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// hostname
	Fqdn string `xml:"fqdn,omitempty" json:"fqdn,omitempty"`
}

type DeactivateIPTrackResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateIPTrackResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *IPTrackData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateDNSSECRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDNSSECRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// ,      contact that gets key notifications
	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`

	// when notifications are sent
	Notify_events string `xml:"notify_events,omitempty" json:"notify_events,omitempty"`

	Keys []*DNSSECKey `xml:"keys,omitempty" json:"keys,omitempty"`
}

type CreateDNSSECResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateDNSSECResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DNSSECData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneDNSSECRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDNSSECRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetOneDNSSECResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneDNSSECResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DNSSECData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetDNSSECsRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDNSSECsRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`
}

type GetDNSSECsResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDNSSECsResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DNSSECData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateDNSSECRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDNSSECRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// ,      contact that gets key notifications
	Contact_nickname string `xml:"contact_nickname,omitempty" json:"contact_nickname,omitempty"`

	// when notifications are sent
	Notify_events string `xml:"notify_events,omitempty" json:"notify_events,omitempty"`

	Keys []*DNSSECKey `xml:"keys,omitempty" json:"keys,omitempty"`
}

type UpdateDNSSECResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateDNSSECResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DNSSECData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneDNSSECRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDNSSECRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteOneDNSSECResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneDNSSECResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type ActivateDNSSECRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateDNSSECRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type ActivateDNSSECResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ ActivateDNSSECResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DNSSECData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeactivateDNSSECRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateDNSSECRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeactivateDNSSECResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeactivateDNSSECResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *DNSSECData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetDNSSECTimelineRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDNSSECTimelineRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// name of zone
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// an epoch time, or 'now'
	Start_ts string `xml:"start_ts,omitempty" json:"start_ts,omitempty"`

	// an epoch time, or 'now'
	End_ts string `xml:"end_ts,omitempty" json:"end_ts,omitempty"`
}

type GetDNSSECTimelineResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetDNSSECTimelineResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*DNSSECTimelineEvent `xml:"data,omitempty" json:"data,omitempty"`
}

type GetTasksRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetTasksRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Customer_name string `xml:"customer_name,omitempty" json:"customer_name,omitempty"`

	Zone_name string `xml:"zone_name,omitempty" json:"zone_name,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`
}

type GetTasksResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetTasksResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*TaskData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneTaskRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneTaskRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Task_id string `xml:"task_id,omitempty" json:"task_id,omitempty"`
}

type GetOneTaskResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneTaskResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *TaskData `xml:"data,omitempty" json:"data,omitempty"`
}

type CancelTaskRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CancelTaskRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	Task_id string `xml:"task_id,omitempty" json:"task_id,omitempty"`
}

type CancelTaskResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CancelTaskResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *TaskData `xml:"data,omitempty" json:"data,omitempty"`
}

type CreateExtNameserverRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateExtNameserverRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// can be empty or 'default'
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// Y/N - does this block requests or add them
	Deny string `xml:"deny,omitempty" json:"deny,omitempty"`

	Hosts []*ExtNSEntry `xml:"hosts,omitempty" json:"hosts,omitempty"`

	Tsig_key_name string `xml:"tsig_key_name,omitempty" json:"tsig_key_name,omitempty"`

	Active string `xml:"active,omitempty" json:"active,omitempty"`
}

type CreateExtNameserverResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ CreateExtNameserverResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ExtNameserverData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetOneExtNameserverRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneExtNameserverRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// can be empty or 'default'
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type GetOneExtNameserverResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetOneExtNameserverResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ExtNameserverData `xml:"data,omitempty" json:"data,omitempty"`
}

type GetExtNameserversRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetExtNameserversRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`
}

type GetExtNameserversResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ GetExtNameserversResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data []*ExtNameserverData `xml:"data,omitempty" json:"data,omitempty"`
}

type UpdateExtNameserverRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateExtNameserverRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// can be empty or 'default'
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`

	// Y/N - does this block requests or add them
	Deny string `xml:"deny,omitempty" json:"deny,omitempty"`

	Hosts []*ExtNSEntry `xml:"hosts,omitempty" json:"hosts,omitempty"`

	Tsig_key_name string `xml:"tsig_key_name,omitempty" json:"tsig_key_name,omitempty"`

	Active string `xml:"active,omitempty" json:"active,omitempty"`
}

type UpdateExtNameserverResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ UpdateExtNameserverResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data *ExtNameserverData `xml:"data,omitempty" json:"data,omitempty"`
}

type DeleteOneExtNameserverRequestType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneExtNameserverRequest"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`

	Fault_incompat int32 `xml:"fault_incompat,omitempty" json:"fault_incompat,omitempty"`

	// can be empty or 'default'
	Zone string `xml:"zone,omitempty" json:"zone,omitempty"`
}

type DeleteOneExtNameserverResponseType struct {
	XMLName xml.Name `xml:"https://api2.dynect.net/wsdl/3.7.16/Dynect/ DeleteOneExtNameserverResponse"`

	Job_id string `xml:"job_id,omitempty" json:"job_id,omitempty"`

	Status string `xml:"status,omitempty" json:"status,omitempty"`

	Msgs []*Messages `xml:"messages,omitempty" json:"msgs,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type Dynect interface {

	// Error can be either of the following types:
	//
	//   - fault

	GetJob(request *GetJobRequestType) (*GetJobResponseType, error)

	GetJobContext(ctx context.Context, request *GetJobRequestType) (*GetJobResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* starts a DynectAPI session */
	SessionLogin(request *SessionLoginRequestType) (*SessionLoginResponseType, error)

	SessionLoginContext(ctx context.Context, request *SessionLoginRequestType) (*SessionLoginResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* ends a DynectAPI session and invalidates the token */
	SessionLogout(request *SessionLogoutRequestType) (*SessionLogoutResponseType, error)

	SessionLogoutContext(ctx context.Context, request *SessionLogoutRequestType) (*SessionLogoutResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* checks where session and token are still valid */
	SessionIsAlive(request *SessionIsAliveRequestType) (*SessionIsAliveResponseType, error)

	SessionIsAliveContext(ctx context.Context, request *SessionIsAliveRequestType) (*SessionIsAliveResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* No operation, prevents sessions from timing out */
	SessionKeepAlive(request *SessionKeepAliveRequestType) (*SessionKeepAliveResponseType, error)

	SessionKeepAliveContext(ctx context.Context, request *SessionKeepAliveRequestType) (*SessionKeepAliveResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Support only; adds permissions from a given customer */
	ScopeIn(request *ScopeInRequestType) (*ScopeInResponseType, error)

	ScopeInContext(ctx context.Context, request *ScopeInRequestType) (*ScopeInResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Support only; changes permissions to those of some particular user */
	ScopeAs(request *ScopeAsRequestType) (*ScopeAsResponseType, error)

	ScopeAsContext(ctx context.Context, request *ScopeAsRequestType) (*ScopeAsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Undoes any ScopeIn or ScopeAs, returning to usual permissions */
	Unscope(request *UnscopeRequestType) (*UnscopeResponseType, error)

	UnscopeContext(ctx context.Context, request *UnscopeRequestType) (*UnscopeResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Retrieves Queries Per Second statistics in CSV format */
	GetQueryStats(request *GetQueryStatsRequestType) (*GetQueryStatsResponseType, error)

	GetQueryStatsContext(ctx context.Context, request *GetQueryStatsRequestType) (*GetQueryStatsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateGeo(request *CreateGeoRequestType) (*CreateGeoResponseType, error)

	CreateGeoContext(ctx context.Context, request *CreateGeoRequestType) (*CreateGeoResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateGeo(request *UpdateGeoRequestType) (*UpdateGeoResponseType, error)

	UpdateGeoContext(ctx context.Context, request *UpdateGeoRequestType) (*UpdateGeoResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetGeos(request *GetGeosRequestType) (*GetGeosResponseType, error)

	GetGeosContext(ctx context.Context, request *GetGeosRequestType) (*GetGeosResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneGeo(request *GetOneGeoRequestType) (*GetOneGeoResponseType, error)

	GetOneGeoContext(ctx context.Context, request *GetOneGeoRequestType) (*GetOneGeoResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneGeo(request *DeleteOneGeoRequestType) (*DeleteOneGeoResponseType, error)

	DeleteOneGeoContext(ctx context.Context, request *DeleteOneGeoRequestType) (*DeleteOneGeoResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ActivateGeo(request *ActivateGeoRequestType) (*ActivateGeoResponseType, error)

	ActivateGeoContext(ctx context.Context, request *ActivateGeoRequestType) (*ActivateGeoResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeactivateGeo(request *DeactivateGeoRequestType) (*DeactivateGeoResponseType, error)

	DeactivateGeoContext(ctx context.Context, request *DeactivateGeoRequestType) (*DeactivateGeoResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateGeoRegionGroup(request *CreateGeoRegionGroupRequestType) (*CreateGeoRegionGroupResponseType, error)

	CreateGeoRegionGroupContext(ctx context.Context, request *CreateGeoRegionGroupRequestType) (*CreateGeoRegionGroupResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateGeoRegionGroup(request *UpdateGeoRegionGroupRequestType) (*UpdateGeoRegionGroupResponseType, error)

	UpdateGeoRegionGroupContext(ctx context.Context, request *UpdateGeoRegionGroupRequestType) (*UpdateGeoRegionGroupResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneGeoRegionGroup(request *DeleteOneGeoRegionGroupRequestType) (*DeleteOneGeoRegionGroupResponseType, error)

	DeleteOneGeoRegionGroupContext(ctx context.Context, request *DeleteOneGeoRegionGroupRequestType) (*DeleteOneGeoRegionGroupResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetGeoRegionGroups(request *GetGeoRegionGroupsRequestType) (*GetGeoRegionGroupsResponseType, error)

	GetGeoRegionGroupsContext(ctx context.Context, request *GetGeoRegionGroupsRequestType) (*GetGeoRegionGroupsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneGeoRegionGroup(request *GetOneGeoRegionGroupRequestType) (*GetOneGeoRegionGroupResponseType, error)

	GetOneGeoRegionGroupContext(ctx context.Context, request *GetOneGeoRegionGroupRequestType) (*GetOneGeoRegionGroupResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateGeoNode(request *CreateGeoNodeRequestType) (*CreateGeoNodeResponseType, error)

	CreateGeoNodeContext(ctx context.Context, request *CreateGeoNodeRequestType) (*CreateGeoNodeResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneGeoNode(request *DeleteOneGeoNodeRequestType) (*DeleteOneGeoNodeResponseType, error)

	DeleteOneGeoNodeContext(ctx context.Context, request *DeleteOneGeoNodeRequestType) (*DeleteOneGeoNodeResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetGeoNodes(request *GetGeoNodesRequestType) (*GetGeoNodesResponseType, error)

	GetGeoNodesContext(ctx context.Context, request *GetGeoNodesRequestType) (*GetGeoNodesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateDSF(request *CreateDSFRequestType) (*CreateDSFResponseType, error)

	CreateDSFContext(ctx context.Context, request *CreateDSFRequestType) (*CreateDSFResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateDSF(request *UpdateDSFRequestType) (*UpdateDSFResponseType, error)

	UpdateDSFContext(ctx context.Context, request *UpdateDSFRequestType) (*UpdateDSFResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetDSFs(request *GetDSFsRequestType) (*GetDSFsResponseType, error)

	GetDSFsContext(ctx context.Context, request *GetDSFsRequestType) (*GetDSFsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetDSFNotifiers(request *GetDSFNotifiersRequestType) (*GetDSFNotifiersResponseType, error)

	GetDSFNotifiersContext(ctx context.Context, request *GetDSFNotifiersRequestType) (*GetDSFNotifiersResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneDSF(request *DeleteOneDSFRequestType) (*DeleteOneDSFResponseType, error)

	DeleteOneDSFContext(ctx context.Context, request *DeleteOneDSFRequestType) (*DeleteOneDSFResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneDSF(request *GetOneDSFRequestType) (*GetOneDSFResponseType, error)

	GetOneDSFContext(ctx context.Context, request *GetOneDSFRequestType) (*GetOneDSFResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RevertDSF(request *RevertDSFRequestType) (*RevertDSFResponseType, error)

	RevertDSFContext(ctx context.Context, request *RevertDSFRequestType) (*RevertDSFResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	PublishDSF(request *PublishDSFRequestType) (*PublishDSFResponseType, error)

	PublishDSFContext(ctx context.Context, request *PublishDSFRequestType) (*PublishDSFResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	AddDSFNotifier(request *AddDSFNotifierRequestType) (*AddDSFNotifierResponseType, error)

	AddDSFNotifierContext(ctx context.Context, request *AddDSFNotifierRequestType) (*AddDSFNotifierResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RemoveDSFNotifier(request *RemoveDSFNotifierRequestType) (*RemoveDSFNotifierResponseType, error)

	RemoveDSFNotifierContext(ctx context.Context, request *RemoveDSFNotifierRequestType) (*RemoveDSFNotifierResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateDSFRuleset(request *CreateDSFRulesetRequestType) (*CreateDSFRulesetResponseType, error)

	CreateDSFRulesetContext(ctx context.Context, request *CreateDSFRulesetRequestType) (*CreateDSFRulesetResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateDSFRuleset(request *UpdateDSFRulesetRequestType) (*UpdateDSFRulesetResponseType, error)

	UpdateDSFRulesetContext(ctx context.Context, request *UpdateDSFRulesetRequestType) (*UpdateDSFRulesetResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetDSFRulesets(request *GetDSFRulesetsRequestType) (*GetDSFRulesetsResponseType, error)

	GetDSFRulesetsContext(ctx context.Context, request *GetDSFRulesetsRequestType) (*GetDSFRulesetsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneDSFRuleset(request *GetOneDSFRulesetRequestType) (*GetOneDSFRulesetResponseType, error)

	GetOneDSFRulesetContext(ctx context.Context, request *GetOneDSFRulesetRequestType) (*GetOneDSFRulesetResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneDSFRuleset(request *DeleteOneDSFRulesetRequestType) (*DeleteOneDSFRulesetResponseType, error)

	DeleteOneDSFRulesetContext(ctx context.Context, request *DeleteOneDSFRulesetRequestType) (*DeleteOneDSFRulesetResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateDSFResponsePool(request *CreateDSFResponsePoolRequestType) (*CreateDSFResponsePoolResponseType, error)

	CreateDSFResponsePoolContext(ctx context.Context, request *CreateDSFResponsePoolRequestType) (*CreateDSFResponsePoolResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateDSFResponsePool(request *UpdateDSFResponsePoolRequestType) (*UpdateDSFResponsePoolResponseType, error)

	UpdateDSFResponsePoolContext(ctx context.Context, request *UpdateDSFResponsePoolRequestType) (*UpdateDSFResponsePoolResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetDSFResponsePools(request *GetDSFResponsePoolsRequestType) (*GetDSFResponsePoolsResponseType, error)

	GetDSFResponsePoolsContext(ctx context.Context, request *GetDSFResponsePoolsRequestType) (*GetDSFResponsePoolsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneDSFResponsePool(request *GetOneDSFResponsePoolRequestType) (*GetOneDSFResponsePoolResponseType, error)

	GetOneDSFResponsePoolContext(ctx context.Context, request *GetOneDSFResponsePoolRequestType) (*GetOneDSFResponsePoolResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneDSFResponsePool(request *DeleteOneDSFResponsePoolRequestType) (*DeleteOneDSFResponsePoolResponseType, error)

	DeleteOneDSFResponsePoolContext(ctx context.Context, request *DeleteOneDSFResponsePoolRequestType) (*DeleteOneDSFResponsePoolResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateDSFRecordSetFailoverChain(request *CreateDSFRecordSetFailoverChainRequestType) (*CreateDSFRecordSetFailoverChainResponseType, error)

	CreateDSFRecordSetFailoverChainContext(ctx context.Context, request *CreateDSFRecordSetFailoverChainRequestType) (*CreateDSFRecordSetFailoverChainResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateDSFRecordSetFailoverChain(request *UpdateDSFRecordSetFailoverChainRequestType) (*UpdateDSFRecordSetFailoverChainResponseType, error)

	UpdateDSFRecordSetFailoverChainContext(ctx context.Context, request *UpdateDSFRecordSetFailoverChainRequestType) (*UpdateDSFRecordSetFailoverChainResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetDSFRecordSetFailoverChains(request *GetDSFRecordSetFailoverChainsRequestType) (*GetDSFRecordSetFailoverChainsResponseType, error)

	GetDSFRecordSetFailoverChainsContext(ctx context.Context, request *GetDSFRecordSetFailoverChainsRequestType) (*GetDSFRecordSetFailoverChainsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneDSFRecordSetFailoverChain(request *GetOneDSFRecordSetFailoverChainRequestType) (*GetOneDSFRecordSetFailoverChainResponseType, error)

	GetOneDSFRecordSetFailoverChainContext(ctx context.Context, request *GetOneDSFRecordSetFailoverChainRequestType) (*GetOneDSFRecordSetFailoverChainResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneDSFRecordSetFailoverChain(request *DeleteOneDSFRecordSetFailoverChainRequestType) (*DeleteOneDSFRecordSetFailoverChainResponseType, error)

	DeleteOneDSFRecordSetFailoverChainContext(ctx context.Context, request *DeleteOneDSFRecordSetFailoverChainRequestType) (*DeleteOneDSFRecordSetFailoverChainResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateDSFRecordSet(request *CreateDSFRecordSetRequestType) (*CreateDSFRecordSetResponseType, error)

	CreateDSFRecordSetContext(ctx context.Context, request *CreateDSFRecordSetRequestType) (*CreateDSFRecordSetResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateDSFRecordSet(request *UpdateDSFRecordSetRequestType) (*UpdateDSFRecordSetResponseType, error)

	UpdateDSFRecordSetContext(ctx context.Context, request *UpdateDSFRecordSetRequestType) (*UpdateDSFRecordSetResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneDSFRecordSet(request *GetOneDSFRecordSetRequestType) (*GetOneDSFRecordSetResponseType, error)

	GetOneDSFRecordSetContext(ctx context.Context, request *GetOneDSFRecordSetRequestType) (*GetOneDSFRecordSetResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetDSFRecordSets(request *GetDSFRecordSetsRequestType) (*GetDSFRecordSetsResponseType, error)

	GetDSFRecordSetsContext(ctx context.Context, request *GetDSFRecordSetsRequestType) (*GetDSFRecordSetsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneDSFRecordSet(request *DeleteOneDSFRecordSetRequestType) (*DeleteOneDSFRecordSetResponseType, error)

	DeleteOneDSFRecordSetContext(ctx context.Context, request *DeleteOneDSFRecordSetRequestType) (*DeleteOneDSFRecordSetResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateDSFRecord(request *CreateDSFRecordRequestType) (*CreateDSFRecordResponseType, error)

	CreateDSFRecordContext(ctx context.Context, request *CreateDSFRecordRequestType) (*CreateDSFRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateDSFRecord(request *UpdateDSFRecordRequestType) (*UpdateDSFRecordResponseType, error)

	UpdateDSFRecordContext(ctx context.Context, request *UpdateDSFRecordRequestType) (*UpdateDSFRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneDSFRecord(request *GetOneDSFRecordRequestType) (*GetOneDSFRecordResponseType, error)

	GetOneDSFRecordContext(ctx context.Context, request *GetOneDSFRecordRequestType) (*GetOneDSFRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetDSFRecords(request *GetDSFRecordsRequestType) (*GetDSFRecordsResponseType, error)

	GetDSFRecordsContext(ctx context.Context, request *GetDSFRecordsRequestType) (*GetDSFRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneDSFRecord(request *DeleteOneDSFRecordRequestType) (*DeleteOneDSFRecordResponseType, error)

	DeleteOneDSFRecordContext(ctx context.Context, request *DeleteOneDSFRecordRequestType) (*DeleteOneDSFRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	AddDSFNode(request *AddDSFNodeRequestType) (*AddDSFNodeResponseType, error)

	AddDSFNodeContext(ctx context.Context, request *AddDSFNodeRequestType) (*AddDSFNodeResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateDSFNodes(request *UpdateDSFNodesRequestType) (*UpdateDSFNodesResponseType, error)

	UpdateDSFNodesContext(ctx context.Context, request *UpdateDSFNodesRequestType) (*UpdateDSFNodesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetDSFNodes(request *GetDSFNodesRequestType) (*GetDSFNodesResponseType, error)

	GetDSFNodesContext(ctx context.Context, request *GetDSFNodesRequestType) (*GetDSFNodesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneDSFNode(request *DeleteOneDSFNodeRequestType) (*DeleteOneDSFNodeResponseType, error)

	DeleteOneDSFNodeContext(ctx context.Context, request *DeleteOneDSFNodeRequestType) (*DeleteOneDSFNodeResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateDSFMonitor(request *CreateDSFMonitorRequestType) (*CreateDSFMonitorResponseType, error)

	CreateDSFMonitorContext(ctx context.Context, request *CreateDSFMonitorRequestType) (*CreateDSFMonitorResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateDSFMonitor(request *UpdateDSFMonitorRequestType) (*UpdateDSFMonitorResponseType, error)

	UpdateDSFMonitorContext(ctx context.Context, request *UpdateDSFMonitorRequestType) (*UpdateDSFMonitorResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneDSFMonitor(request *GetOneDSFMonitorRequestType) (*GetOneDSFMonitorResponseType, error)

	GetOneDSFMonitorContext(ctx context.Context, request *GetOneDSFMonitorRequestType) (*GetOneDSFMonitorResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetDSFMonitors(request *GetDSFMonitorsRequestType) (*GetDSFMonitorsResponseType, error)

	GetDSFMonitorsContext(ctx context.Context, request *GetDSFMonitorsRequestType) (*GetDSFMonitorsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneDSFMonitor(request *DeleteOneDSFMonitorRequestType) (*DeleteOneDSFMonitorResponseType, error)

	DeleteOneDSFMonitorContext(ctx context.Context, request *DeleteOneDSFMonitorRequestType) (*DeleteOneDSFMonitorResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	AddDSFMonitorNotifier(request *AddDSFMonitorNotifierRequestType) (*AddDSFMonitorNotifierResponseType, error)

	AddDSFMonitorNotifierContext(ctx context.Context, request *AddDSFMonitorNotifierRequestType) (*AddDSFMonitorNotifierResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetDSFMonitorSites(request *GetDSFMonitorSitesRequestType) (*GetDSFMonitorSitesResponseType, error)

	GetDSFMonitorSitesContext(ctx context.Context, request *GetDSFMonitorSitesRequestType) (*GetDSFMonitorSitesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateNotifier(request *CreateNotifierRequestType) (*CreateNotifierResponseType, error)

	CreateNotifierContext(ctx context.Context, request *CreateNotifierRequestType) (*CreateNotifierResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateNotifier(request *UpdateNotifierRequestType) (*UpdateNotifierResponseType, error)

	UpdateNotifierContext(ctx context.Context, request *UpdateNotifierRequestType) (*UpdateNotifierResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneNotifier(request *GetOneNotifierRequestType) (*GetOneNotifierResponseType, error)

	GetOneNotifierContext(ctx context.Context, request *GetOneNotifierRequestType) (*GetOneNotifierResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetNotifiers(request *GetNotifiersRequestType) (*GetNotifiersResponseType, error)

	GetNotifiersContext(ctx context.Context, request *GetNotifiersRequestType) (*GetNotifiersResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneNotifier(request *DeleteOneNotifierRequestType) (*DeleteOneNotifierResponseType, error)

	DeleteOneNotifierContext(ctx context.Context, request *DeleteOneNotifierRequestType) (*DeleteOneNotifierResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateConfigLimit(request *CreateConfigLimitRequestType) (*CreateConfigLimitResponseType, error)

	CreateConfigLimitContext(ctx context.Context, request *CreateConfigLimitRequestType) (*CreateConfigLimitResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneConfigLimit(request *GetOneConfigLimitRequestType) (*GetOneConfigLimitResponseType, error)

	GetOneConfigLimitContext(ctx context.Context, request *GetOneConfigLimitRequestType) (*GetOneConfigLimitResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetConfigLimits(request *GetConfigLimitsRequestType) (*GetConfigLimitsResponseType, error)

	GetConfigLimitsContext(ctx context.Context, request *GetConfigLimitsRequestType) (*GetConfigLimitsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateConfigLimit(request *UpdateConfigLimitRequestType) (*UpdateConfigLimitResponseType, error)

	UpdateConfigLimitContext(ctx context.Context, request *UpdateConfigLimitRequestType) (*UpdateConfigLimitResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneConfigLimit(request *DeleteOneConfigLimitRequestType) (*DeleteOneConfigLimitResponseType, error)

	DeleteOneConfigLimitContext(ctx context.Context, request *DeleteOneConfigLimitRequestType) (*DeleteOneConfigLimitResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new PermissionGroup */
	CreatePermissionGroup(request *CreatePermissionGroupRequestType) (*CreatePermissionGroupResponseType, error)

	CreatePermissionGroupContext(ctx context.Context, request *CreatePermissionGroupRequestType) (*CreatePermissionGroupResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single PermissionGroup */
	GetOnePermissionGroup(request *GetOnePermissionGroupRequestType) (*GetOnePermissionGroupResponseType, error)

	GetOnePermissionGroupContext(ctx context.Context, request *GetOnePermissionGroupRequestType) (*GetOnePermissionGroupResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every PermissionGroup */
	GetPermissionGroups(request *GetPermissionGroupsRequestType) (*GetPermissionGroupsResponseType, error)

	GetPermissionGroupsContext(ctx context.Context, request *GetPermissionGroupsRequestType) (*GetPermissionGroupsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single PermissionGroup */
	DeleteOnePermissionGroup(request *DeleteOnePermissionGroupRequestType) (*DeleteOnePermissionGroupResponseType, error)

	DeleteOnePermissionGroupContext(ctx context.Context, request *DeleteOnePermissionGroupRequestType) (*DeleteOnePermissionGroupResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdatePermissionGroup(request *UpdatePermissionGroupRequestType) (*UpdatePermissionGroupResponseType, error)

	UpdatePermissionGroupContext(ctx context.Context, request *UpdatePermissionGroupRequestType) (*UpdatePermissionGroupResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetCustomerPermissions(request *GetCustomerPermissionsRequestType) (*GetCustomerPermissionsResponseType, error)

	GetCustomerPermissionsContext(ctx context.Context, request *GetCustomerPermissionsRequestType) (*GetCustomerPermissionsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetUserPermissions(request *GetUserPermissionsRequestType) (*GetUserPermissionsResponseType, error)

	GetUserPermissionsContext(ctx context.Context, request *GetUserPermissionsRequestType) (*GetUserPermissionsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CheckPermissions(request *CheckPermissionsRequestType) (*CheckPermissionsResponseType, error)

	CheckPermissionsContext(ctx context.Context, request *CheckPermissionsRequestType) (*CheckPermissionsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	AddPermissionGroupUsers(request *AddPermissionGroupUsersRequestType) (*AddPermissionGroupUsersResponseType, error)

	AddPermissionGroupUsersContext(ctx context.Context, request *AddPermissionGroupUsersRequestType) (*AddPermissionGroupUsersResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	SetPermissionGroupUsers(request *SetPermissionGroupUsersRequestType) (*SetPermissionGroupUsersResponseType, error)

	SetPermissionGroupUsersContext(ctx context.Context, request *SetPermissionGroupUsersRequestType) (*SetPermissionGroupUsersResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RemovePermissionGroupUsers(request *RemovePermissionGroupUsersRequestType) (*RemovePermissionGroupUsersResponseType, error)

	RemovePermissionGroupUsersContext(ctx context.Context, request *RemovePermissionGroupUsersRequestType) (*RemovePermissionGroupUsersResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	AddPermissionGroupSubgroups(request *AddPermissionGroupSubgroupsRequestType) (*AddPermissionGroupSubgroupsResponseType, error)

	AddPermissionGroupSubgroupsContext(ctx context.Context, request *AddPermissionGroupSubgroupsRequestType) (*AddPermissionGroupSubgroupsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	SetPermissionGroupSubgroups(request *SetPermissionGroupSubgroupsRequestType) (*SetPermissionGroupSubgroupsResponseType, error)

	SetPermissionGroupSubgroupsContext(ctx context.Context, request *SetPermissionGroupSubgroupsRequestType) (*SetPermissionGroupSubgroupsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RemovePermissionGroupSubgroups(request *RemovePermissionGroupSubgroupsRequestType) (*RemovePermissionGroupSubgroupsResponseType, error)

	RemovePermissionGroupSubgroupsContext(ctx context.Context, request *RemovePermissionGroupSubgroupsRequestType) (*RemovePermissionGroupSubgroupsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	AddPermissionGroupPermissions(request *AddPermissionGroupPermissionsRequestType) (*AddPermissionGroupPermissionsResponseType, error)

	AddPermissionGroupPermissionsContext(ctx context.Context, request *AddPermissionGroupPermissionsRequestType) (*AddPermissionGroupPermissionsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	SetPermissionGroupPermissions(request *SetPermissionGroupPermissionsRequestType) (*SetPermissionGroupPermissionsResponseType, error)

	SetPermissionGroupPermissionsContext(ctx context.Context, request *SetPermissionGroupPermissionsRequestType) (*SetPermissionGroupPermissionsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RemovePermissionGroupPermissions(request *RemovePermissionGroupPermissionsRequestType) (*RemovePermissionGroupPermissionsResponseType, error)

	RemovePermissionGroupPermissionsContext(ctx context.Context, request *RemovePermissionGroupPermissionsRequestType) (*RemovePermissionGroupPermissionsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	AddPermissionGroupZones(request *AddPermissionGroupZonesRequestType) (*AddPermissionGroupZonesResponseType, error)

	AddPermissionGroupZonesContext(ctx context.Context, request *AddPermissionGroupZonesRequestType) (*AddPermissionGroupZonesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	SetPermissionGroupZones(request *SetPermissionGroupZonesRequestType) (*SetPermissionGroupZonesResponseType, error)

	SetPermissionGroupZonesContext(ctx context.Context, request *SetPermissionGroupZonesRequestType) (*SetPermissionGroupZonesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RemovePermissionGroupZones(request *RemovePermissionGroupZonesRequestType) (*RemovePermissionGroupZonesResponseType, error)

	RemovePermissionGroupZonesContext(ctx context.Context, request *RemovePermissionGroupZonesRequestType) (*RemovePermissionGroupZonesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	AddUserGroups(request *AddUserGroupsRequestType) (*AddUserGroupsResponseType, error)

	AddUserGroupsContext(ctx context.Context, request *AddUserGroupsRequestType) (*AddUserGroupsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	SetUserGroups(request *SetUserGroupsRequestType) (*SetUserGroupsResponseType, error)

	SetUserGroupsContext(ctx context.Context, request *SetUserGroupsRequestType) (*SetUserGroupsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RemoveUserGroups(request *RemoveUserGroupsRequestType) (*RemoveUserGroupsResponseType, error)

	RemoveUserGroupsContext(ctx context.Context, request *RemoveUserGroupsRequestType) (*RemoveUserGroupsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	AddUserZones(request *AddUserZonesRequestType) (*AddUserZonesResponseType, error)

	AddUserZonesContext(ctx context.Context, request *AddUserZonesRequestType) (*AddUserZonesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	SetUserZones(request *SetUserZonesRequestType) (*SetUserZonesResponseType, error)

	SetUserZonesContext(ctx context.Context, request *SetUserZonesRequestType) (*SetUserZonesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RemoveUserZones(request *RemoveUserZonesRequestType) (*RemoveUserZonesResponseType, error)

	RemoveUserZonesContext(ctx context.Context, request *RemoveUserZonesRequestType) (*RemoveUserZonesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	AddUserPermissions(request *AddUserPermissionsRequestType) (*AddUserPermissionsResponseType, error)

	AddUserPermissionsContext(ctx context.Context, request *AddUserPermissionsRequestType) (*AddUserPermissionsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	SetUserPermissions(request *SetUserPermissionsRequestType) (*SetUserPermissionsResponseType, error)

	SetUserPermissionsContext(ctx context.Context, request *SetUserPermissionsRequestType) (*SetUserPermissionsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RemoveUserPermissions(request *RemoveUserPermissionsRequestType) (*RemoveUserPermissionsResponseType, error)

	RemoveUserPermissionsContext(ctx context.Context, request *RemoveUserPermissionsRequestType) (*RemoveUserPermissionsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	AddUserForbids(request *AddUserForbidsRequestType) (*AddUserForbidsResponseType, error)

	AddUserForbidsContext(ctx context.Context, request *AddUserForbidsRequestType) (*AddUserForbidsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	SetUserForbids(request *SetUserForbidsRequestType) (*SetUserForbidsResponseType, error)

	SetUserForbidsContext(ctx context.Context, request *SetUserForbidsRequestType) (*SetUserForbidsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RemoveUserForbids(request *RemoveUserForbidsRequestType) (*RemoveUserForbidsResponseType, error)

	RemoveUserForbidsContext(ctx context.Context, request *RemoveUserForbidsRequestType) (*RemoveUserForbidsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	AddCustomerPermissions(request *AddCustomerPermissionsRequestType) (*AddCustomerPermissionsResponseType, error)

	AddCustomerPermissionsContext(ctx context.Context, request *AddCustomerPermissionsRequestType) (*AddCustomerPermissionsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	SetCustomerPermissions(request *SetCustomerPermissionsRequestType) (*SetCustomerPermissionsResponseType, error)

	SetCustomerPermissionsContext(ctx context.Context, request *SetCustomerPermissionsRequestType) (*SetCustomerPermissionsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RemoveCustomerPermissions(request *RemoveCustomerPermissionsRequestType) (*RemoveCustomerPermissionsResponseType, error)

	RemoveCustomerPermissionsContext(ctx context.Context, request *RemoveCustomerPermissionsRequestType) (*RemoveCustomerPermissionsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	AddCustomerForbids(request *AddCustomerForbidsRequestType) (*AddCustomerForbidsResponseType, error)

	AddCustomerForbidsContext(ctx context.Context, request *AddCustomerForbidsRequestType) (*AddCustomerForbidsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	SetCustomerForbids(request *SetCustomerForbidsRequestType) (*SetCustomerForbidsResponseType, error)

	SetCustomerForbidsContext(ctx context.Context, request *SetCustomerForbidsRequestType) (*SetCustomerForbidsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RemoveCustomerForbids(request *RemoveCustomerForbidsRequestType) (*RemoveCustomerForbidsResponseType, error)

	RemoveCustomerForbidsContext(ctx context.Context, request *RemoveCustomerForbidsRequestType) (*RemoveCustomerForbidsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetHostStatsFlags(request *GetHostStatsFlagsRequestType) (*GetHostStatsFlagsResponseType, error)

	GetHostStatsFlagsContext(ctx context.Context, request *GetHostStatsFlagsRequestType) (*GetHostStatsFlagsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	SetHostStatsFlags(request *SetHostStatsFlagsRequestType) (*SetHostStatsFlagsResponseType, error)

	SetHostStatsFlagsContext(ctx context.Context, request *SetHostStatsFlagsRequestType) (*SetHostStatsFlagsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateTSIGKey(request *CreateTSIGKeyRequestType) (*CreateTSIGKeyResponseType, error)

	CreateTSIGKeyContext(ctx context.Context, request *CreateTSIGKeyRequestType) (*CreateTSIGKeyResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneTSIGKey(request *GetOneTSIGKeyRequestType) (*GetOneTSIGKeyResponseType, error)

	GetOneTSIGKeyContext(ctx context.Context, request *GetOneTSIGKeyRequestType) (*GetOneTSIGKeyResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetTSIGKeys(request *GetTSIGKeysRequestType) (*GetTSIGKeysResponseType, error)

	GetTSIGKeysContext(ctx context.Context, request *GetTSIGKeysRequestType) (*GetTSIGKeysResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateTSIGKey(request *UpdateTSIGKeyRequestType) (*UpdateTSIGKeyResponseType, error)

	UpdateTSIGKeyContext(ctx context.Context, request *UpdateTSIGKeyRequestType) (*UpdateTSIGKeyResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneTSIGKey(request *DeleteOneTSIGKeyRequestType) (*DeleteOneTSIGKeyResponseType, error)

	DeleteOneTSIGKeyContext(ctx context.Context, request *DeleteOneTSIGKeyRequestType) (*DeleteOneTSIGKeyResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new Zone */
	CreateZone(request *CreateZoneRequestType) (*CreateZoneResponseType, error)

	CreateZoneContext(ctx context.Context, request *CreateZoneRequestType) (*CreateZoneResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single Zone */
	GetOneZone(request *GetOneZoneRequestType) (*GetOneZoneResponseType, error)

	GetOneZoneContext(ctx context.Context, request *GetOneZoneRequestType) (*GetOneZoneResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every Zone */
	GetZones(request *GetZonesRequestType) (*GetZonesResponseType, error)

	GetZonesContext(ctx context.Context, request *GetZonesRequestType) (*GetZonesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single Zone */
	DeleteOneZone(request *DeleteOneZoneRequestType) (*DeleteOneZoneResponseType, error)

	DeleteOneZoneContext(ctx context.Context, request *DeleteOneZoneRequestType) (*DeleteOneZoneResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateSecondaryZone(request *CreateSecondaryZoneRequestType) (*CreateSecondaryZoneResponseType, error)

	CreateSecondaryZoneContext(ctx context.Context, request *CreateSecondaryZoneRequestType) (*CreateSecondaryZoneResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateSecondary(request *UpdateSecondaryRequestType) (*UpdateSecondaryResponseType, error)

	UpdateSecondaryContext(ctx context.Context, request *UpdateSecondaryRequestType) (*UpdateSecondaryResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ActivateSecondary(request *ActivateSecondaryRequestType) (*ActivateSecondaryResponseType, error)

	ActivateSecondaryContext(ctx context.Context, request *ActivateSecondaryRequestType) (*ActivateSecondaryResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeactivateSecondary(request *DeactivateSecondaryRequestType) (*DeactivateSecondaryResponseType, error)

	DeactivateSecondaryContext(ctx context.Context, request *DeactivateSecondaryRequestType) (*DeactivateSecondaryResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RetransferSecondary(request *RetransferSecondaryRequestType) (*RetransferSecondaryResponseType, error)

	RetransferSecondaryContext(ctx context.Context, request *RetransferSecondaryRequestType) (*RetransferSecondaryResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneSecondary(request *GetOneSecondaryRequestType) (*GetOneSecondaryResponseType, error)

	GetOneSecondaryContext(ctx context.Context, request *GetOneSecondaryRequestType) (*GetOneSecondaryResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetSecondaries(request *GetSecondariesRequestType) (*GetSecondariesResponseType, error)

	GetSecondariesContext(ctx context.Context, request *GetSecondariesRequestType) (*GetSecondariesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetZoneApex(request *GetZoneApexRequestType) (*GetZoneApexResponseType, error)

	GetZoneApexContext(ctx context.Context, request *GetZoneApexRequestType) (*GetZoneApexResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new A record */
	CreateARecord(request *CreateARecordRequestType) (*CreateARecordResponseType, error)

	CreateARecordContext(ctx context.Context, request *CreateARecordRequestType) (*CreateARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single A record */
	GetOneARecord(request *GetOneARecordRequestType) (*GetOneARecordResponseType, error)

	GetOneARecordContext(ctx context.Context, request *GetOneARecordRequestType) (*GetOneARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every A record */
	GetARecords(request *GetARecordsRequestType) (*GetARecordsResponseType, error)

	GetARecordsContext(ctx context.Context, request *GetARecordsRequestType) (*GetARecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single A record */
	UpdateARecord(request *UpdateARecordRequestType) (*UpdateARecordResponseType, error)

	UpdateARecordContext(ctx context.Context, request *UpdateARecordRequestType) (*UpdateARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every A record */
	DeleteARecords(request *DeleteARecordsRequestType) (*DeleteARecordsResponseType, error)

	DeleteARecordsContext(ctx context.Context, request *DeleteARecordsRequestType) (*DeleteARecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single A record */
	DeleteOneARecord(request *DeleteOneARecordRequestType) (*DeleteOneARecordResponseType, error)

	DeleteOneARecordContext(ctx context.Context, request *DeleteOneARecordRequestType) (*DeleteOneARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new AAAA record */
	CreateAAAARecord(request *CreateAAAARecordRequestType) (*CreateAAAARecordResponseType, error)

	CreateAAAARecordContext(ctx context.Context, request *CreateAAAARecordRequestType) (*CreateAAAARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single AAAA record */
	GetOneAAAARecord(request *GetOneAAAARecordRequestType) (*GetOneAAAARecordResponseType, error)

	GetOneAAAARecordContext(ctx context.Context, request *GetOneAAAARecordRequestType) (*GetOneAAAARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every AAAA record */
	GetAAAARecords(request *GetAAAARecordsRequestType) (*GetAAAARecordsResponseType, error)

	GetAAAARecordsContext(ctx context.Context, request *GetAAAARecordsRequestType) (*GetAAAARecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single AAAA record */
	UpdateAAAARecord(request *UpdateAAAARecordRequestType) (*UpdateAAAARecordResponseType, error)

	UpdateAAAARecordContext(ctx context.Context, request *UpdateAAAARecordRequestType) (*UpdateAAAARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every AAAA record */
	DeleteAAAARecords(request *DeleteAAAARecordsRequestType) (*DeleteAAAARecordsResponseType, error)

	DeleteAAAARecordsContext(ctx context.Context, request *DeleteAAAARecordsRequestType) (*DeleteAAAARecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single AAAA record */
	DeleteOneAAAARecord(request *DeleteOneAAAARecordRequestType) (*DeleteOneAAAARecordResponseType, error)

	DeleteOneAAAARecordContext(ctx context.Context, request *DeleteOneAAAARecordRequestType) (*DeleteOneAAAARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new ALIAS record */
	CreateALIASRecord(request *CreateALIASRecordRequestType) (*CreateALIASRecordResponseType, error)

	CreateALIASRecordContext(ctx context.Context, request *CreateALIASRecordRequestType) (*CreateALIASRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single ALIAS record */
	GetOneALIASRecord(request *GetOneALIASRecordRequestType) (*GetOneALIASRecordResponseType, error)

	GetOneALIASRecordContext(ctx context.Context, request *GetOneALIASRecordRequestType) (*GetOneALIASRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every ALIAS record */
	GetALIASRecords(request *GetALIASRecordsRequestType) (*GetALIASRecordsResponseType, error)

	GetALIASRecordsContext(ctx context.Context, request *GetALIASRecordsRequestType) (*GetALIASRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single ALIAS record */
	UpdateALIASRecord(request *UpdateALIASRecordRequestType) (*UpdateALIASRecordResponseType, error)

	UpdateALIASRecordContext(ctx context.Context, request *UpdateALIASRecordRequestType) (*UpdateALIASRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every ALIAS record */
	DeleteALIASRecords(request *DeleteALIASRecordsRequestType) (*DeleteALIASRecordsResponseType, error)

	DeleteALIASRecordsContext(ctx context.Context, request *DeleteALIASRecordsRequestType) (*DeleteALIASRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single ALIAS record */
	DeleteOneALIASRecord(request *DeleteOneALIASRecordRequestType) (*DeleteOneALIASRecordResponseType, error)

	DeleteOneALIASRecordContext(ctx context.Context, request *DeleteOneALIASRecordRequestType) (*DeleteOneALIASRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new CAA record */
	CreateCAARecord(request *CreateCAARecordRequestType) (*CreateCAARecordResponseType, error)

	CreateCAARecordContext(ctx context.Context, request *CreateCAARecordRequestType) (*CreateCAARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single CAA record */
	GetOneCAARecord(request *GetOneCAARecordRequestType) (*GetOneCAARecordResponseType, error)

	GetOneCAARecordContext(ctx context.Context, request *GetOneCAARecordRequestType) (*GetOneCAARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every CAA record */
	GetCAARecords(request *GetCAARecordsRequestType) (*GetCAARecordsResponseType, error)

	GetCAARecordsContext(ctx context.Context, request *GetCAARecordsRequestType) (*GetCAARecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single CAA record */
	UpdateCAARecord(request *UpdateCAARecordRequestType) (*UpdateCAARecordResponseType, error)

	UpdateCAARecordContext(ctx context.Context, request *UpdateCAARecordRequestType) (*UpdateCAARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every CAA record */
	DeleteCAARecords(request *DeleteCAARecordsRequestType) (*DeleteCAARecordsResponseType, error)

	DeleteCAARecordsContext(ctx context.Context, request *DeleteCAARecordsRequestType) (*DeleteCAARecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single CAA record */
	DeleteOneCAARecord(request *DeleteOneCAARecordRequestType) (*DeleteOneCAARecordResponseType, error)

	DeleteOneCAARecordContext(ctx context.Context, request *DeleteOneCAARecordRequestType) (*DeleteOneCAARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new CDNSKEY record */
	CreateCDNSKEYRecord(request *CreateCDNSKEYRecordRequestType) (*CreateCDNSKEYRecordResponseType, error)

	CreateCDNSKEYRecordContext(ctx context.Context, request *CreateCDNSKEYRecordRequestType) (*CreateCDNSKEYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single CDNSKEY record */
	GetOneCDNSKEYRecord(request *GetOneCDNSKEYRecordRequestType) (*GetOneCDNSKEYRecordResponseType, error)

	GetOneCDNSKEYRecordContext(ctx context.Context, request *GetOneCDNSKEYRecordRequestType) (*GetOneCDNSKEYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every CDNSKEY record */
	GetCDNSKEYRecords(request *GetCDNSKEYRecordsRequestType) (*GetCDNSKEYRecordsResponseType, error)

	GetCDNSKEYRecordsContext(ctx context.Context, request *GetCDNSKEYRecordsRequestType) (*GetCDNSKEYRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single CDNSKEY record */
	UpdateCDNSKEYRecord(request *UpdateCDNSKEYRecordRequestType) (*UpdateCDNSKEYRecordResponseType, error)

	UpdateCDNSKEYRecordContext(ctx context.Context, request *UpdateCDNSKEYRecordRequestType) (*UpdateCDNSKEYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every CDNSKEY record */
	DeleteCDNSKEYRecords(request *DeleteCDNSKEYRecordsRequestType) (*DeleteCDNSKEYRecordsResponseType, error)

	DeleteCDNSKEYRecordsContext(ctx context.Context, request *DeleteCDNSKEYRecordsRequestType) (*DeleteCDNSKEYRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single CDNSKEY record */
	DeleteOneCDNSKEYRecord(request *DeleteOneCDNSKEYRecordRequestType) (*DeleteOneCDNSKEYRecordResponseType, error)

	DeleteOneCDNSKEYRecordContext(ctx context.Context, request *DeleteOneCDNSKEYRecordRequestType) (*DeleteOneCDNSKEYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new CDS record */
	CreateCDSRecord(request *CreateCDSRecordRequestType) (*CreateCDSRecordResponseType, error)

	CreateCDSRecordContext(ctx context.Context, request *CreateCDSRecordRequestType) (*CreateCDSRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single CDS record */
	GetOneCDSRecord(request *GetOneCDSRecordRequestType) (*GetOneCDSRecordResponseType, error)

	GetOneCDSRecordContext(ctx context.Context, request *GetOneCDSRecordRequestType) (*GetOneCDSRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every CDS record */
	GetCDSRecords(request *GetCDSRecordsRequestType) (*GetCDSRecordsResponseType, error)

	GetCDSRecordsContext(ctx context.Context, request *GetCDSRecordsRequestType) (*GetCDSRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single CDS record */
	UpdateCDSRecord(request *UpdateCDSRecordRequestType) (*UpdateCDSRecordResponseType, error)

	UpdateCDSRecordContext(ctx context.Context, request *UpdateCDSRecordRequestType) (*UpdateCDSRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every CDS record */
	DeleteCDSRecords(request *DeleteCDSRecordsRequestType) (*DeleteCDSRecordsResponseType, error)

	DeleteCDSRecordsContext(ctx context.Context, request *DeleteCDSRecordsRequestType) (*DeleteCDSRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single CDS record */
	DeleteOneCDSRecord(request *DeleteOneCDSRecordRequestType) (*DeleteOneCDSRecordResponseType, error)

	DeleteOneCDSRecordContext(ctx context.Context, request *DeleteOneCDSRecordRequestType) (*DeleteOneCDSRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new CERT record */
	CreateCERTRecord(request *CreateCERTRecordRequestType) (*CreateCERTRecordResponseType, error)

	CreateCERTRecordContext(ctx context.Context, request *CreateCERTRecordRequestType) (*CreateCERTRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single CERT record */
	GetOneCERTRecord(request *GetOneCERTRecordRequestType) (*GetOneCERTRecordResponseType, error)

	GetOneCERTRecordContext(ctx context.Context, request *GetOneCERTRecordRequestType) (*GetOneCERTRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every CERT record */
	GetCERTRecords(request *GetCERTRecordsRequestType) (*GetCERTRecordsResponseType, error)

	GetCERTRecordsContext(ctx context.Context, request *GetCERTRecordsRequestType) (*GetCERTRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single CERT record */
	UpdateCERTRecord(request *UpdateCERTRecordRequestType) (*UpdateCERTRecordResponseType, error)

	UpdateCERTRecordContext(ctx context.Context, request *UpdateCERTRecordRequestType) (*UpdateCERTRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every CERT record */
	DeleteCERTRecords(request *DeleteCERTRecordsRequestType) (*DeleteCERTRecordsResponseType, error)

	DeleteCERTRecordsContext(ctx context.Context, request *DeleteCERTRecordsRequestType) (*DeleteCERTRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single CERT record */
	DeleteOneCERTRecord(request *DeleteOneCERTRecordRequestType) (*DeleteOneCERTRecordResponseType, error)

	DeleteOneCERTRecordContext(ctx context.Context, request *DeleteOneCERTRecordRequestType) (*DeleteOneCERTRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new CNAME record */
	CreateCNAMERecord(request *CreateCNAMERecordRequestType) (*CreateCNAMERecordResponseType, error)

	CreateCNAMERecordContext(ctx context.Context, request *CreateCNAMERecordRequestType) (*CreateCNAMERecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single CNAME record */
	GetOneCNAMERecord(request *GetOneCNAMERecordRequestType) (*GetOneCNAMERecordResponseType, error)

	GetOneCNAMERecordContext(ctx context.Context, request *GetOneCNAMERecordRequestType) (*GetOneCNAMERecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every CNAME record */
	GetCNAMERecords(request *GetCNAMERecordsRequestType) (*GetCNAMERecordsResponseType, error)

	GetCNAMERecordsContext(ctx context.Context, request *GetCNAMERecordsRequestType) (*GetCNAMERecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single CNAME record */
	UpdateCNAMERecord(request *UpdateCNAMERecordRequestType) (*UpdateCNAMERecordResponseType, error)

	UpdateCNAMERecordContext(ctx context.Context, request *UpdateCNAMERecordRequestType) (*UpdateCNAMERecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every CNAME record */
	DeleteCNAMERecords(request *DeleteCNAMERecordsRequestType) (*DeleteCNAMERecordsResponseType, error)

	DeleteCNAMERecordsContext(ctx context.Context, request *DeleteCNAMERecordsRequestType) (*DeleteCNAMERecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single CNAME record */
	DeleteOneCNAMERecord(request *DeleteOneCNAMERecordRequestType) (*DeleteOneCNAMERecordResponseType, error)

	DeleteOneCNAMERecordContext(ctx context.Context, request *DeleteOneCNAMERecordRequestType) (*DeleteOneCNAMERecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new CSYNC record */
	CreateCSYNCRecord(request *CreateCSYNCRecordRequestType) (*CreateCSYNCRecordResponseType, error)

	CreateCSYNCRecordContext(ctx context.Context, request *CreateCSYNCRecordRequestType) (*CreateCSYNCRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single CSYNC record */
	GetOneCSYNCRecord(request *GetOneCSYNCRecordRequestType) (*GetOneCSYNCRecordResponseType, error)

	GetOneCSYNCRecordContext(ctx context.Context, request *GetOneCSYNCRecordRequestType) (*GetOneCSYNCRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every CSYNC record */
	GetCSYNCRecords(request *GetCSYNCRecordsRequestType) (*GetCSYNCRecordsResponseType, error)

	GetCSYNCRecordsContext(ctx context.Context, request *GetCSYNCRecordsRequestType) (*GetCSYNCRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single CSYNC record */
	UpdateCSYNCRecord(request *UpdateCSYNCRecordRequestType) (*UpdateCSYNCRecordResponseType, error)

	UpdateCSYNCRecordContext(ctx context.Context, request *UpdateCSYNCRecordRequestType) (*UpdateCSYNCRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every CSYNC record */
	DeleteCSYNCRecords(request *DeleteCSYNCRecordsRequestType) (*DeleteCSYNCRecordsResponseType, error)

	DeleteCSYNCRecordsContext(ctx context.Context, request *DeleteCSYNCRecordsRequestType) (*DeleteCSYNCRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single CSYNC record */
	DeleteOneCSYNCRecord(request *DeleteOneCSYNCRecordRequestType) (*DeleteOneCSYNCRecordResponseType, error)

	DeleteOneCSYNCRecordContext(ctx context.Context, request *DeleteOneCSYNCRecordRequestType) (*DeleteOneCSYNCRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new DHCID record */
	CreateDHCIDRecord(request *CreateDHCIDRecordRequestType) (*CreateDHCIDRecordResponseType, error)

	CreateDHCIDRecordContext(ctx context.Context, request *CreateDHCIDRecordRequestType) (*CreateDHCIDRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single DHCID record */
	GetOneDHCIDRecord(request *GetOneDHCIDRecordRequestType) (*GetOneDHCIDRecordResponseType, error)

	GetOneDHCIDRecordContext(ctx context.Context, request *GetOneDHCIDRecordRequestType) (*GetOneDHCIDRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every DHCID record */
	GetDHCIDRecords(request *GetDHCIDRecordsRequestType) (*GetDHCIDRecordsResponseType, error)

	GetDHCIDRecordsContext(ctx context.Context, request *GetDHCIDRecordsRequestType) (*GetDHCIDRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single DHCID record */
	UpdateDHCIDRecord(request *UpdateDHCIDRecordRequestType) (*UpdateDHCIDRecordResponseType, error)

	UpdateDHCIDRecordContext(ctx context.Context, request *UpdateDHCIDRecordRequestType) (*UpdateDHCIDRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every DHCID record */
	DeleteDHCIDRecords(request *DeleteDHCIDRecordsRequestType) (*DeleteDHCIDRecordsResponseType, error)

	DeleteDHCIDRecordsContext(ctx context.Context, request *DeleteDHCIDRecordsRequestType) (*DeleteDHCIDRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single DHCID record */
	DeleteOneDHCIDRecord(request *DeleteOneDHCIDRecordRequestType) (*DeleteOneDHCIDRecordResponseType, error)

	DeleteOneDHCIDRecordContext(ctx context.Context, request *DeleteOneDHCIDRecordRequestType) (*DeleteOneDHCIDRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new DNAME record */
	CreateDNAMERecord(request *CreateDNAMERecordRequestType) (*CreateDNAMERecordResponseType, error)

	CreateDNAMERecordContext(ctx context.Context, request *CreateDNAMERecordRequestType) (*CreateDNAMERecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single DNAME record */
	GetOneDNAMERecord(request *GetOneDNAMERecordRequestType) (*GetOneDNAMERecordResponseType, error)

	GetOneDNAMERecordContext(ctx context.Context, request *GetOneDNAMERecordRequestType) (*GetOneDNAMERecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every DNAME record */
	GetDNAMERecords(request *GetDNAMERecordsRequestType) (*GetDNAMERecordsResponseType, error)

	GetDNAMERecordsContext(ctx context.Context, request *GetDNAMERecordsRequestType) (*GetDNAMERecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single DNAME record */
	UpdateDNAMERecord(request *UpdateDNAMERecordRequestType) (*UpdateDNAMERecordResponseType, error)

	UpdateDNAMERecordContext(ctx context.Context, request *UpdateDNAMERecordRequestType) (*UpdateDNAMERecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every DNAME record */
	DeleteDNAMERecords(request *DeleteDNAMERecordsRequestType) (*DeleteDNAMERecordsResponseType, error)

	DeleteDNAMERecordsContext(ctx context.Context, request *DeleteDNAMERecordsRequestType) (*DeleteDNAMERecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single DNAME record */
	DeleteOneDNAMERecord(request *DeleteOneDNAMERecordRequestType) (*DeleteOneDNAMERecordResponseType, error)

	DeleteOneDNAMERecordContext(ctx context.Context, request *DeleteOneDNAMERecordRequestType) (*DeleteOneDNAMERecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new DNSKEY record */
	CreateDNSKEYRecord(request *CreateDNSKEYRecordRequestType) (*CreateDNSKEYRecordResponseType, error)

	CreateDNSKEYRecordContext(ctx context.Context, request *CreateDNSKEYRecordRequestType) (*CreateDNSKEYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single DNSKEY record */
	GetOneDNSKEYRecord(request *GetOneDNSKEYRecordRequestType) (*GetOneDNSKEYRecordResponseType, error)

	GetOneDNSKEYRecordContext(ctx context.Context, request *GetOneDNSKEYRecordRequestType) (*GetOneDNSKEYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every DNSKEY record */
	GetDNSKEYRecords(request *GetDNSKEYRecordsRequestType) (*GetDNSKEYRecordsResponseType, error)

	GetDNSKEYRecordsContext(ctx context.Context, request *GetDNSKEYRecordsRequestType) (*GetDNSKEYRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single DNSKEY record */
	UpdateDNSKEYRecord(request *UpdateDNSKEYRecordRequestType) (*UpdateDNSKEYRecordResponseType, error)

	UpdateDNSKEYRecordContext(ctx context.Context, request *UpdateDNSKEYRecordRequestType) (*UpdateDNSKEYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every DNSKEY record */
	DeleteDNSKEYRecords(request *DeleteDNSKEYRecordsRequestType) (*DeleteDNSKEYRecordsResponseType, error)

	DeleteDNSKEYRecordsContext(ctx context.Context, request *DeleteDNSKEYRecordsRequestType) (*DeleteDNSKEYRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single DNSKEY record */
	DeleteOneDNSKEYRecord(request *DeleteOneDNSKEYRecordRequestType) (*DeleteOneDNSKEYRecordResponseType, error)

	DeleteOneDNSKEYRecordContext(ctx context.Context, request *DeleteOneDNSKEYRecordRequestType) (*DeleteOneDNSKEYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new DS record */
	CreateDSRecord(request *CreateDSRecordRequestType) (*CreateDSRecordResponseType, error)

	CreateDSRecordContext(ctx context.Context, request *CreateDSRecordRequestType) (*CreateDSRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single DS record */
	GetOneDSRecord(request *GetOneDSRecordRequestType) (*GetOneDSRecordResponseType, error)

	GetOneDSRecordContext(ctx context.Context, request *GetOneDSRecordRequestType) (*GetOneDSRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every DS record */
	GetDSRecords(request *GetDSRecordsRequestType) (*GetDSRecordsResponseType, error)

	GetDSRecordsContext(ctx context.Context, request *GetDSRecordsRequestType) (*GetDSRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single DS record */
	UpdateDSRecord(request *UpdateDSRecordRequestType) (*UpdateDSRecordResponseType, error)

	UpdateDSRecordContext(ctx context.Context, request *UpdateDSRecordRequestType) (*UpdateDSRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every DS record */
	DeleteDSRecords(request *DeleteDSRecordsRequestType) (*DeleteDSRecordsResponseType, error)

	DeleteDSRecordsContext(ctx context.Context, request *DeleteDSRecordsRequestType) (*DeleteDSRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single DS record */
	DeleteOneDSRecord(request *DeleteOneDSRecordRequestType) (*DeleteOneDSRecordResponseType, error)

	DeleteOneDSRecordContext(ctx context.Context, request *DeleteOneDSRecordRequestType) (*DeleteOneDSRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new IPSECKEY record */
	CreateIPSECKEYRecord(request *CreateIPSECKEYRecordRequestType) (*CreateIPSECKEYRecordResponseType, error)

	CreateIPSECKEYRecordContext(ctx context.Context, request *CreateIPSECKEYRecordRequestType) (*CreateIPSECKEYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single IPSECKEY record */
	GetOneIPSECKEYRecord(request *GetOneIPSECKEYRecordRequestType) (*GetOneIPSECKEYRecordResponseType, error)

	GetOneIPSECKEYRecordContext(ctx context.Context, request *GetOneIPSECKEYRecordRequestType) (*GetOneIPSECKEYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every IPSECKEY record */
	GetIPSECKEYRecords(request *GetIPSECKEYRecordsRequestType) (*GetIPSECKEYRecordsResponseType, error)

	GetIPSECKEYRecordsContext(ctx context.Context, request *GetIPSECKEYRecordsRequestType) (*GetIPSECKEYRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single IPSECKEY record */
	UpdateIPSECKEYRecord(request *UpdateIPSECKEYRecordRequestType) (*UpdateIPSECKEYRecordResponseType, error)

	UpdateIPSECKEYRecordContext(ctx context.Context, request *UpdateIPSECKEYRecordRequestType) (*UpdateIPSECKEYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every IPSECKEY record */
	DeleteIPSECKEYRecords(request *DeleteIPSECKEYRecordsRequestType) (*DeleteIPSECKEYRecordsResponseType, error)

	DeleteIPSECKEYRecordsContext(ctx context.Context, request *DeleteIPSECKEYRecordsRequestType) (*DeleteIPSECKEYRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single IPSECKEY record */
	DeleteOneIPSECKEYRecord(request *DeleteOneIPSECKEYRecordRequestType) (*DeleteOneIPSECKEYRecordResponseType, error)

	DeleteOneIPSECKEYRecordContext(ctx context.Context, request *DeleteOneIPSECKEYRecordRequestType) (*DeleteOneIPSECKEYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new KEY record */
	CreateKEYRecord(request *CreateKEYRecordRequestType) (*CreateKEYRecordResponseType, error)

	CreateKEYRecordContext(ctx context.Context, request *CreateKEYRecordRequestType) (*CreateKEYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single KEY record */
	GetOneKEYRecord(request *GetOneKEYRecordRequestType) (*GetOneKEYRecordResponseType, error)

	GetOneKEYRecordContext(ctx context.Context, request *GetOneKEYRecordRequestType) (*GetOneKEYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every KEY record */
	GetKEYRecords(request *GetKEYRecordsRequestType) (*GetKEYRecordsResponseType, error)

	GetKEYRecordsContext(ctx context.Context, request *GetKEYRecordsRequestType) (*GetKEYRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single KEY record */
	UpdateKEYRecord(request *UpdateKEYRecordRequestType) (*UpdateKEYRecordResponseType, error)

	UpdateKEYRecordContext(ctx context.Context, request *UpdateKEYRecordRequestType) (*UpdateKEYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every KEY record */
	DeleteKEYRecords(request *DeleteKEYRecordsRequestType) (*DeleteKEYRecordsResponseType, error)

	DeleteKEYRecordsContext(ctx context.Context, request *DeleteKEYRecordsRequestType) (*DeleteKEYRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single KEY record */
	DeleteOneKEYRecord(request *DeleteOneKEYRecordRequestType) (*DeleteOneKEYRecordResponseType, error)

	DeleteOneKEYRecordContext(ctx context.Context, request *DeleteOneKEYRecordRequestType) (*DeleteOneKEYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new KX record */
	CreateKXRecord(request *CreateKXRecordRequestType) (*CreateKXRecordResponseType, error)

	CreateKXRecordContext(ctx context.Context, request *CreateKXRecordRequestType) (*CreateKXRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single KX record */
	GetOneKXRecord(request *GetOneKXRecordRequestType) (*GetOneKXRecordResponseType, error)

	GetOneKXRecordContext(ctx context.Context, request *GetOneKXRecordRequestType) (*GetOneKXRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every KX record */
	GetKXRecords(request *GetKXRecordsRequestType) (*GetKXRecordsResponseType, error)

	GetKXRecordsContext(ctx context.Context, request *GetKXRecordsRequestType) (*GetKXRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single KX record */
	UpdateKXRecord(request *UpdateKXRecordRequestType) (*UpdateKXRecordResponseType, error)

	UpdateKXRecordContext(ctx context.Context, request *UpdateKXRecordRequestType) (*UpdateKXRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every KX record */
	DeleteKXRecords(request *DeleteKXRecordsRequestType) (*DeleteKXRecordsResponseType, error)

	DeleteKXRecordsContext(ctx context.Context, request *DeleteKXRecordsRequestType) (*DeleteKXRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single KX record */
	DeleteOneKXRecord(request *DeleteOneKXRecordRequestType) (*DeleteOneKXRecordResponseType, error)

	DeleteOneKXRecordContext(ctx context.Context, request *DeleteOneKXRecordRequestType) (*DeleteOneKXRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new LOC record */
	CreateLOCRecord(request *CreateLOCRecordRequestType) (*CreateLOCRecordResponseType, error)

	CreateLOCRecordContext(ctx context.Context, request *CreateLOCRecordRequestType) (*CreateLOCRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single LOC record */
	GetOneLOCRecord(request *GetOneLOCRecordRequestType) (*GetOneLOCRecordResponseType, error)

	GetOneLOCRecordContext(ctx context.Context, request *GetOneLOCRecordRequestType) (*GetOneLOCRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every LOC record */
	GetLOCRecords(request *GetLOCRecordsRequestType) (*GetLOCRecordsResponseType, error)

	GetLOCRecordsContext(ctx context.Context, request *GetLOCRecordsRequestType) (*GetLOCRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single LOC record */
	UpdateLOCRecord(request *UpdateLOCRecordRequestType) (*UpdateLOCRecordResponseType, error)

	UpdateLOCRecordContext(ctx context.Context, request *UpdateLOCRecordRequestType) (*UpdateLOCRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every LOC record */
	DeleteLOCRecords(request *DeleteLOCRecordsRequestType) (*DeleteLOCRecordsResponseType, error)

	DeleteLOCRecordsContext(ctx context.Context, request *DeleteLOCRecordsRequestType) (*DeleteLOCRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single LOC record */
	DeleteOneLOCRecord(request *DeleteOneLOCRecordRequestType) (*DeleteOneLOCRecordResponseType, error)

	DeleteOneLOCRecordContext(ctx context.Context, request *DeleteOneLOCRecordRequestType) (*DeleteOneLOCRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new MX record */
	CreateMXRecord(request *CreateMXRecordRequestType) (*CreateMXRecordResponseType, error)

	CreateMXRecordContext(ctx context.Context, request *CreateMXRecordRequestType) (*CreateMXRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single MX record */
	GetOneMXRecord(request *GetOneMXRecordRequestType) (*GetOneMXRecordResponseType, error)

	GetOneMXRecordContext(ctx context.Context, request *GetOneMXRecordRequestType) (*GetOneMXRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every MX record */
	GetMXRecords(request *GetMXRecordsRequestType) (*GetMXRecordsResponseType, error)

	GetMXRecordsContext(ctx context.Context, request *GetMXRecordsRequestType) (*GetMXRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single MX record */
	UpdateMXRecord(request *UpdateMXRecordRequestType) (*UpdateMXRecordResponseType, error)

	UpdateMXRecordContext(ctx context.Context, request *UpdateMXRecordRequestType) (*UpdateMXRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every MX record */
	DeleteMXRecords(request *DeleteMXRecordsRequestType) (*DeleteMXRecordsResponseType, error)

	DeleteMXRecordsContext(ctx context.Context, request *DeleteMXRecordsRequestType) (*DeleteMXRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single MX record */
	DeleteOneMXRecord(request *DeleteOneMXRecordRequestType) (*DeleteOneMXRecordResponseType, error)

	DeleteOneMXRecordContext(ctx context.Context, request *DeleteOneMXRecordRequestType) (*DeleteOneMXRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new NAPTR record */
	CreateNAPTRRecord(request *CreateNAPTRRecordRequestType) (*CreateNAPTRRecordResponseType, error)

	CreateNAPTRRecordContext(ctx context.Context, request *CreateNAPTRRecordRequestType) (*CreateNAPTRRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single NAPTR record */
	GetOneNAPTRRecord(request *GetOneNAPTRRecordRequestType) (*GetOneNAPTRRecordResponseType, error)

	GetOneNAPTRRecordContext(ctx context.Context, request *GetOneNAPTRRecordRequestType) (*GetOneNAPTRRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every NAPTR record */
	GetNAPTRRecords(request *GetNAPTRRecordsRequestType) (*GetNAPTRRecordsResponseType, error)

	GetNAPTRRecordsContext(ctx context.Context, request *GetNAPTRRecordsRequestType) (*GetNAPTRRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single NAPTR record */
	UpdateNAPTRRecord(request *UpdateNAPTRRecordRequestType) (*UpdateNAPTRRecordResponseType, error)

	UpdateNAPTRRecordContext(ctx context.Context, request *UpdateNAPTRRecordRequestType) (*UpdateNAPTRRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every NAPTR record */
	DeleteNAPTRRecords(request *DeleteNAPTRRecordsRequestType) (*DeleteNAPTRRecordsResponseType, error)

	DeleteNAPTRRecordsContext(ctx context.Context, request *DeleteNAPTRRecordsRequestType) (*DeleteNAPTRRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single NAPTR record */
	DeleteOneNAPTRRecord(request *DeleteOneNAPTRRecordRequestType) (*DeleteOneNAPTRRecordResponseType, error)

	DeleteOneNAPTRRecordContext(ctx context.Context, request *DeleteOneNAPTRRecordRequestType) (*DeleteOneNAPTRRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new NSAP record */
	CreateNSAPRecord(request *CreateNSAPRecordRequestType) (*CreateNSAPRecordResponseType, error)

	CreateNSAPRecordContext(ctx context.Context, request *CreateNSAPRecordRequestType) (*CreateNSAPRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single NSAP record */
	GetOneNSAPRecord(request *GetOneNSAPRecordRequestType) (*GetOneNSAPRecordResponseType, error)

	GetOneNSAPRecordContext(ctx context.Context, request *GetOneNSAPRecordRequestType) (*GetOneNSAPRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every NSAP record */
	GetNSAPRecords(request *GetNSAPRecordsRequestType) (*GetNSAPRecordsResponseType, error)

	GetNSAPRecordsContext(ctx context.Context, request *GetNSAPRecordsRequestType) (*GetNSAPRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single NSAP record */
	UpdateNSAPRecord(request *UpdateNSAPRecordRequestType) (*UpdateNSAPRecordResponseType, error)

	UpdateNSAPRecordContext(ctx context.Context, request *UpdateNSAPRecordRequestType) (*UpdateNSAPRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every NSAP record */
	DeleteNSAPRecords(request *DeleteNSAPRecordsRequestType) (*DeleteNSAPRecordsResponseType, error)

	DeleteNSAPRecordsContext(ctx context.Context, request *DeleteNSAPRecordsRequestType) (*DeleteNSAPRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single NSAP record */
	DeleteOneNSAPRecord(request *DeleteOneNSAPRecordRequestType) (*DeleteOneNSAPRecordResponseType, error)

	DeleteOneNSAPRecordContext(ctx context.Context, request *DeleteOneNSAPRecordRequestType) (*DeleteOneNSAPRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new POLICY record */
	CreatePOLICYRecord(request *CreatePOLICYRecordRequestType) (*CreatePOLICYRecordResponseType, error)

	CreatePOLICYRecordContext(ctx context.Context, request *CreatePOLICYRecordRequestType) (*CreatePOLICYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single POLICY record */
	GetOnePOLICYRecord(request *GetOnePOLICYRecordRequestType) (*GetOnePOLICYRecordResponseType, error)

	GetOnePOLICYRecordContext(ctx context.Context, request *GetOnePOLICYRecordRequestType) (*GetOnePOLICYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every POLICY record */
	GetPOLICYRecords(request *GetPOLICYRecordsRequestType) (*GetPOLICYRecordsResponseType, error)

	GetPOLICYRecordsContext(ctx context.Context, request *GetPOLICYRecordsRequestType) (*GetPOLICYRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single POLICY record */
	UpdatePOLICYRecord(request *UpdatePOLICYRecordRequestType) (*UpdatePOLICYRecordResponseType, error)

	UpdatePOLICYRecordContext(ctx context.Context, request *UpdatePOLICYRecordRequestType) (*UpdatePOLICYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every POLICY record */
	DeletePOLICYRecords(request *DeletePOLICYRecordsRequestType) (*DeletePOLICYRecordsResponseType, error)

	DeletePOLICYRecordsContext(ctx context.Context, request *DeletePOLICYRecordsRequestType) (*DeletePOLICYRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single POLICY record */
	DeleteOnePOLICYRecord(request *DeleteOnePOLICYRecordRequestType) (*DeleteOnePOLICYRecordResponseType, error)

	DeleteOnePOLICYRecordContext(ctx context.Context, request *DeleteOnePOLICYRecordRequestType) (*DeleteOnePOLICYRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new PTR record */
	CreatePTRRecord(request *CreatePTRRecordRequestType) (*CreatePTRRecordResponseType, error)

	CreatePTRRecordContext(ctx context.Context, request *CreatePTRRecordRequestType) (*CreatePTRRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single PTR record */
	GetOnePTRRecord(request *GetOnePTRRecordRequestType) (*GetOnePTRRecordResponseType, error)

	GetOnePTRRecordContext(ctx context.Context, request *GetOnePTRRecordRequestType) (*GetOnePTRRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every PTR record */
	GetPTRRecords(request *GetPTRRecordsRequestType) (*GetPTRRecordsResponseType, error)

	GetPTRRecordsContext(ctx context.Context, request *GetPTRRecordsRequestType) (*GetPTRRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single PTR record */
	UpdatePTRRecord(request *UpdatePTRRecordRequestType) (*UpdatePTRRecordResponseType, error)

	UpdatePTRRecordContext(ctx context.Context, request *UpdatePTRRecordRequestType) (*UpdatePTRRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every PTR record */
	DeletePTRRecords(request *DeletePTRRecordsRequestType) (*DeletePTRRecordsResponseType, error)

	DeletePTRRecordsContext(ctx context.Context, request *DeletePTRRecordsRequestType) (*DeletePTRRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single PTR record */
	DeleteOnePTRRecord(request *DeleteOnePTRRecordRequestType) (*DeleteOnePTRRecordResponseType, error)

	DeleteOnePTRRecordContext(ctx context.Context, request *DeleteOnePTRRecordRequestType) (*DeleteOnePTRRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new PX record */
	CreatePXRecord(request *CreatePXRecordRequestType) (*CreatePXRecordResponseType, error)

	CreatePXRecordContext(ctx context.Context, request *CreatePXRecordRequestType) (*CreatePXRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single PX record */
	GetOnePXRecord(request *GetOnePXRecordRequestType) (*GetOnePXRecordResponseType, error)

	GetOnePXRecordContext(ctx context.Context, request *GetOnePXRecordRequestType) (*GetOnePXRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every PX record */
	GetPXRecords(request *GetPXRecordsRequestType) (*GetPXRecordsResponseType, error)

	GetPXRecordsContext(ctx context.Context, request *GetPXRecordsRequestType) (*GetPXRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single PX record */
	UpdatePXRecord(request *UpdatePXRecordRequestType) (*UpdatePXRecordResponseType, error)

	UpdatePXRecordContext(ctx context.Context, request *UpdatePXRecordRequestType) (*UpdatePXRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every PX record */
	DeletePXRecords(request *DeletePXRecordsRequestType) (*DeletePXRecordsResponseType, error)

	DeletePXRecordsContext(ctx context.Context, request *DeletePXRecordsRequestType) (*DeletePXRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single PX record */
	DeleteOnePXRecord(request *DeleteOnePXRecordRequestType) (*DeleteOnePXRecordResponseType, error)

	DeleteOnePXRecordContext(ctx context.Context, request *DeleteOnePXRecordRequestType) (*DeleteOnePXRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new RP record */
	CreateRPRecord(request *CreateRPRecordRequestType) (*CreateRPRecordResponseType, error)

	CreateRPRecordContext(ctx context.Context, request *CreateRPRecordRequestType) (*CreateRPRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single RP record */
	GetOneRPRecord(request *GetOneRPRecordRequestType) (*GetOneRPRecordResponseType, error)

	GetOneRPRecordContext(ctx context.Context, request *GetOneRPRecordRequestType) (*GetOneRPRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every RP record */
	GetRPRecords(request *GetRPRecordsRequestType) (*GetRPRecordsResponseType, error)

	GetRPRecordsContext(ctx context.Context, request *GetRPRecordsRequestType) (*GetRPRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single RP record */
	UpdateRPRecord(request *UpdateRPRecordRequestType) (*UpdateRPRecordResponseType, error)

	UpdateRPRecordContext(ctx context.Context, request *UpdateRPRecordRequestType) (*UpdateRPRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every RP record */
	DeleteRPRecords(request *DeleteRPRecordsRequestType) (*DeleteRPRecordsResponseType, error)

	DeleteRPRecordsContext(ctx context.Context, request *DeleteRPRecordsRequestType) (*DeleteRPRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single RP record */
	DeleteOneRPRecord(request *DeleteOneRPRecordRequestType) (*DeleteOneRPRecordResponseType, error)

	DeleteOneRPRecordContext(ctx context.Context, request *DeleteOneRPRecordRequestType) (*DeleteOneRPRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new SPF record */
	CreateSPFRecord(request *CreateSPFRecordRequestType) (*CreateSPFRecordResponseType, error)

	CreateSPFRecordContext(ctx context.Context, request *CreateSPFRecordRequestType) (*CreateSPFRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single SPF record */
	GetOneSPFRecord(request *GetOneSPFRecordRequestType) (*GetOneSPFRecordResponseType, error)

	GetOneSPFRecordContext(ctx context.Context, request *GetOneSPFRecordRequestType) (*GetOneSPFRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every SPF record */
	GetSPFRecords(request *GetSPFRecordsRequestType) (*GetSPFRecordsResponseType, error)

	GetSPFRecordsContext(ctx context.Context, request *GetSPFRecordsRequestType) (*GetSPFRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single SPF record */
	UpdateSPFRecord(request *UpdateSPFRecordRequestType) (*UpdateSPFRecordResponseType, error)

	UpdateSPFRecordContext(ctx context.Context, request *UpdateSPFRecordRequestType) (*UpdateSPFRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every SPF record */
	DeleteSPFRecords(request *DeleteSPFRecordsRequestType) (*DeleteSPFRecordsResponseType, error)

	DeleteSPFRecordsContext(ctx context.Context, request *DeleteSPFRecordsRequestType) (*DeleteSPFRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single SPF record */
	DeleteOneSPFRecord(request *DeleteOneSPFRecordRequestType) (*DeleteOneSPFRecordResponseType, error)

	DeleteOneSPFRecordContext(ctx context.Context, request *DeleteOneSPFRecordRequestType) (*DeleteOneSPFRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new SRV record */
	CreateSRVRecord(request *CreateSRVRecordRequestType) (*CreateSRVRecordResponseType, error)

	CreateSRVRecordContext(ctx context.Context, request *CreateSRVRecordRequestType) (*CreateSRVRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single SRV record */
	GetOneSRVRecord(request *GetOneSRVRecordRequestType) (*GetOneSRVRecordResponseType, error)

	GetOneSRVRecordContext(ctx context.Context, request *GetOneSRVRecordRequestType) (*GetOneSRVRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every SRV record */
	GetSRVRecords(request *GetSRVRecordsRequestType) (*GetSRVRecordsResponseType, error)

	GetSRVRecordsContext(ctx context.Context, request *GetSRVRecordsRequestType) (*GetSRVRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single SRV record */
	UpdateSRVRecord(request *UpdateSRVRecordRequestType) (*UpdateSRVRecordResponseType, error)

	UpdateSRVRecordContext(ctx context.Context, request *UpdateSRVRecordRequestType) (*UpdateSRVRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every SRV record */
	DeleteSRVRecords(request *DeleteSRVRecordsRequestType) (*DeleteSRVRecordsResponseType, error)

	DeleteSRVRecordsContext(ctx context.Context, request *DeleteSRVRecordsRequestType) (*DeleteSRVRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single SRV record */
	DeleteOneSRVRecord(request *DeleteOneSRVRecordRequestType) (*DeleteOneSRVRecordResponseType, error)

	DeleteOneSRVRecordContext(ctx context.Context, request *DeleteOneSRVRecordRequestType) (*DeleteOneSRVRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new SSHFP record */
	CreateSSHFPRecord(request *CreateSSHFPRecordRequestType) (*CreateSSHFPRecordResponseType, error)

	CreateSSHFPRecordContext(ctx context.Context, request *CreateSSHFPRecordRequestType) (*CreateSSHFPRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single SSHFP record */
	GetOneSSHFPRecord(request *GetOneSSHFPRecordRequestType) (*GetOneSSHFPRecordResponseType, error)

	GetOneSSHFPRecordContext(ctx context.Context, request *GetOneSSHFPRecordRequestType) (*GetOneSSHFPRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every SSHFP record */
	GetSSHFPRecords(request *GetSSHFPRecordsRequestType) (*GetSSHFPRecordsResponseType, error)

	GetSSHFPRecordsContext(ctx context.Context, request *GetSSHFPRecordsRequestType) (*GetSSHFPRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single SSHFP record */
	UpdateSSHFPRecord(request *UpdateSSHFPRecordRequestType) (*UpdateSSHFPRecordResponseType, error)

	UpdateSSHFPRecordContext(ctx context.Context, request *UpdateSSHFPRecordRequestType) (*UpdateSSHFPRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every SSHFP record */
	DeleteSSHFPRecords(request *DeleteSSHFPRecordsRequestType) (*DeleteSSHFPRecordsResponseType, error)

	DeleteSSHFPRecordsContext(ctx context.Context, request *DeleteSSHFPRecordsRequestType) (*DeleteSSHFPRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single SSHFP record */
	DeleteOneSSHFPRecord(request *DeleteOneSSHFPRecordRequestType) (*DeleteOneSSHFPRecordResponseType, error)

	DeleteOneSSHFPRecordContext(ctx context.Context, request *DeleteOneSSHFPRecordRequestType) (*DeleteOneSSHFPRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new TLSA record */
	CreateTLSARecord(request *CreateTLSARecordRequestType) (*CreateTLSARecordResponseType, error)

	CreateTLSARecordContext(ctx context.Context, request *CreateTLSARecordRequestType) (*CreateTLSARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single TLSA record */
	GetOneTLSARecord(request *GetOneTLSARecordRequestType) (*GetOneTLSARecordResponseType, error)

	GetOneTLSARecordContext(ctx context.Context, request *GetOneTLSARecordRequestType) (*GetOneTLSARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every TLSA record */
	GetTLSARecords(request *GetTLSARecordsRequestType) (*GetTLSARecordsResponseType, error)

	GetTLSARecordsContext(ctx context.Context, request *GetTLSARecordsRequestType) (*GetTLSARecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single TLSA record */
	UpdateTLSARecord(request *UpdateTLSARecordRequestType) (*UpdateTLSARecordResponseType, error)

	UpdateTLSARecordContext(ctx context.Context, request *UpdateTLSARecordRequestType) (*UpdateTLSARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every TLSA record */
	DeleteTLSARecords(request *DeleteTLSARecordsRequestType) (*DeleteTLSARecordsResponseType, error)

	DeleteTLSARecordsContext(ctx context.Context, request *DeleteTLSARecordsRequestType) (*DeleteTLSARecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single TLSA record */
	DeleteOneTLSARecord(request *DeleteOneTLSARecordRequestType) (*DeleteOneTLSARecordResponseType, error)

	DeleteOneTLSARecordContext(ctx context.Context, request *DeleteOneTLSARecordRequestType) (*DeleteOneTLSARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new TXT record */
	CreateTXTRecord(request *CreateTXTRecordRequestType) (*CreateTXTRecordResponseType, error)

	CreateTXTRecordContext(ctx context.Context, request *CreateTXTRecordRequestType) (*CreateTXTRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single TXT record */
	GetOneTXTRecord(request *GetOneTXTRecordRequestType) (*GetOneTXTRecordResponseType, error)

	GetOneTXTRecordContext(ctx context.Context, request *GetOneTXTRecordRequestType) (*GetOneTXTRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every TXT record */
	GetTXTRecords(request *GetTXTRecordsRequestType) (*GetTXTRecordsResponseType, error)

	GetTXTRecordsContext(ctx context.Context, request *GetTXTRecordsRequestType) (*GetTXTRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single TXT record */
	UpdateTXTRecord(request *UpdateTXTRecordRequestType) (*UpdateTXTRecordResponseType, error)

	UpdateTXTRecordContext(ctx context.Context, request *UpdateTXTRecordRequestType) (*UpdateTXTRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every TXT record */
	DeleteTXTRecords(request *DeleteTXTRecordsRequestType) (*DeleteTXTRecordsResponseType, error)

	DeleteTXTRecordsContext(ctx context.Context, request *DeleteTXTRecordsRequestType) (*DeleteTXTRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single TXT record */
	DeleteOneTXTRecord(request *DeleteOneTXTRecordRequestType) (*DeleteOneTXTRecordResponseType, error)

	DeleteOneTXTRecordContext(ctx context.Context, request *DeleteOneTXTRecordRequestType) (*DeleteOneTXTRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single SOA record */
	GetOneSOARecord(request *GetOneSOARecordRequestType) (*GetOneSOARecordResponseType, error)

	GetOneSOARecordContext(ctx context.Context, request *GetOneSOARecordRequestType) (*GetOneSOARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every SOA record */
	GetSOARecords(request *GetSOARecordsRequestType) (*GetSOARecordsResponseType, error)

	GetSOARecordsContext(ctx context.Context, request *GetSOARecordsRequestType) (*GetSOARecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateSOARecord(request *UpdateSOARecordRequestType) (*UpdateSOARecordResponseType, error)

	UpdateSOARecordContext(ctx context.Context, request *UpdateSOARecordRequestType) (*UpdateSOARecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new NS record */
	CreateNSRecord(request *CreateNSRecordRequestType) (*CreateNSRecordResponseType, error)

	CreateNSRecordContext(ctx context.Context, request *CreateNSRecordRequestType) (*CreateNSRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single NS record */
	GetOneNSRecord(request *GetOneNSRecordRequestType) (*GetOneNSRecordResponseType, error)

	GetOneNSRecordContext(ctx context.Context, request *GetOneNSRecordRequestType) (*GetOneNSRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every NS record */
	GetNSRecords(request *GetNSRecordsRequestType) (*GetNSRecordsResponseType, error)

	GetNSRecordsContext(ctx context.Context, request *GetNSRecordsRequestType) (*GetNSRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single NS record */
	UpdateNSRecord(request *UpdateNSRecordRequestType) (*UpdateNSRecordResponseType, error)

	UpdateNSRecordContext(ctx context.Context, request *UpdateNSRecordRequestType) (*UpdateNSRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes every NS record */
	DeleteNSRecords(request *DeleteNSRecordsRequestType) (*DeleteNSRecordsResponseType, error)

	DeleteNSRecordsContext(ctx context.Context, request *DeleteNSRecordsRequestType) (*DeleteNSRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single NS record */
	DeleteOneNSRecord(request *DeleteOneNSRecordRequestType) (*DeleteOneNSRecordResponseType, error)

	DeleteOneNSRecordContext(ctx context.Context, request *DeleteOneNSRecordRequestType) (*DeleteOneNSRecordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceARecords(request *ReplaceARecordsRequestType) (*ReplaceARecordsResponseType, error)

	ReplaceARecordsContext(ctx context.Context, request *ReplaceARecordsRequestType) (*ReplaceARecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceAAAARecords(request *ReplaceAAAARecordsRequestType) (*ReplaceAAAARecordsResponseType, error)

	ReplaceAAAARecordsContext(ctx context.Context, request *ReplaceAAAARecordsRequestType) (*ReplaceAAAARecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceALIASRecords(request *ReplaceALIASRecordsRequestType) (*ReplaceALIASRecordsResponseType, error)

	ReplaceALIASRecordsContext(ctx context.Context, request *ReplaceALIASRecordsRequestType) (*ReplaceALIASRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceCAARecords(request *ReplaceCAARecordsRequestType) (*ReplaceCAARecordsResponseType, error)

	ReplaceCAARecordsContext(ctx context.Context, request *ReplaceCAARecordsRequestType) (*ReplaceCAARecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceCDNSKEYRecords(request *ReplaceCDNSKEYRecordsRequestType) (*ReplaceCDNSKEYRecordsResponseType, error)

	ReplaceCDNSKEYRecordsContext(ctx context.Context, request *ReplaceCDNSKEYRecordsRequestType) (*ReplaceCDNSKEYRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceCDSRecords(request *ReplaceCDSRecordsRequestType) (*ReplaceCDSRecordsResponseType, error)

	ReplaceCDSRecordsContext(ctx context.Context, request *ReplaceCDSRecordsRequestType) (*ReplaceCDSRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceCERTRecords(request *ReplaceCERTRecordsRequestType) (*ReplaceCERTRecordsResponseType, error)

	ReplaceCERTRecordsContext(ctx context.Context, request *ReplaceCERTRecordsRequestType) (*ReplaceCERTRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceCNAMERecords(request *ReplaceCNAMERecordsRequestType) (*ReplaceCNAMERecordsResponseType, error)

	ReplaceCNAMERecordsContext(ctx context.Context, request *ReplaceCNAMERecordsRequestType) (*ReplaceCNAMERecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceCSYNCRecords(request *ReplaceCSYNCRecordsRequestType) (*ReplaceCSYNCRecordsResponseType, error)

	ReplaceCSYNCRecordsContext(ctx context.Context, request *ReplaceCSYNCRecordsRequestType) (*ReplaceCSYNCRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceDHCIDRecords(request *ReplaceDHCIDRecordsRequestType) (*ReplaceDHCIDRecordsResponseType, error)

	ReplaceDHCIDRecordsContext(ctx context.Context, request *ReplaceDHCIDRecordsRequestType) (*ReplaceDHCIDRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceDNAMERecords(request *ReplaceDNAMERecordsRequestType) (*ReplaceDNAMERecordsResponseType, error)

	ReplaceDNAMERecordsContext(ctx context.Context, request *ReplaceDNAMERecordsRequestType) (*ReplaceDNAMERecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceDNSKEYRecords(request *ReplaceDNSKEYRecordsRequestType) (*ReplaceDNSKEYRecordsResponseType, error)

	ReplaceDNSKEYRecordsContext(ctx context.Context, request *ReplaceDNSKEYRecordsRequestType) (*ReplaceDNSKEYRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceDSRecords(request *ReplaceDSRecordsRequestType) (*ReplaceDSRecordsResponseType, error)

	ReplaceDSRecordsContext(ctx context.Context, request *ReplaceDSRecordsRequestType) (*ReplaceDSRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceIPSECKEYRecords(request *ReplaceIPSECKEYRecordsRequestType) (*ReplaceIPSECKEYRecordsResponseType, error)

	ReplaceIPSECKEYRecordsContext(ctx context.Context, request *ReplaceIPSECKEYRecordsRequestType) (*ReplaceIPSECKEYRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceKEYRecords(request *ReplaceKEYRecordsRequestType) (*ReplaceKEYRecordsResponseType, error)

	ReplaceKEYRecordsContext(ctx context.Context, request *ReplaceKEYRecordsRequestType) (*ReplaceKEYRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceKXRecords(request *ReplaceKXRecordsRequestType) (*ReplaceKXRecordsResponseType, error)

	ReplaceKXRecordsContext(ctx context.Context, request *ReplaceKXRecordsRequestType) (*ReplaceKXRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceLOCRecords(request *ReplaceLOCRecordsRequestType) (*ReplaceLOCRecordsResponseType, error)

	ReplaceLOCRecordsContext(ctx context.Context, request *ReplaceLOCRecordsRequestType) (*ReplaceLOCRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceMXRecords(request *ReplaceMXRecordsRequestType) (*ReplaceMXRecordsResponseType, error)

	ReplaceMXRecordsContext(ctx context.Context, request *ReplaceMXRecordsRequestType) (*ReplaceMXRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceNAPTRRecords(request *ReplaceNAPTRRecordsRequestType) (*ReplaceNAPTRRecordsResponseType, error)

	ReplaceNAPTRRecordsContext(ctx context.Context, request *ReplaceNAPTRRecordsRequestType) (*ReplaceNAPTRRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceNSAPRecords(request *ReplaceNSAPRecordsRequestType) (*ReplaceNSAPRecordsResponseType, error)

	ReplaceNSAPRecordsContext(ctx context.Context, request *ReplaceNSAPRecordsRequestType) (*ReplaceNSAPRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplacePOLICYRecords(request *ReplacePOLICYRecordsRequestType) (*ReplacePOLICYRecordsResponseType, error)

	ReplacePOLICYRecordsContext(ctx context.Context, request *ReplacePOLICYRecordsRequestType) (*ReplacePOLICYRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplacePTRRecords(request *ReplacePTRRecordsRequestType) (*ReplacePTRRecordsResponseType, error)

	ReplacePTRRecordsContext(ctx context.Context, request *ReplacePTRRecordsRequestType) (*ReplacePTRRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplacePXRecords(request *ReplacePXRecordsRequestType) (*ReplacePXRecordsResponseType, error)

	ReplacePXRecordsContext(ctx context.Context, request *ReplacePXRecordsRequestType) (*ReplacePXRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceRPRecords(request *ReplaceRPRecordsRequestType) (*ReplaceRPRecordsResponseType, error)

	ReplaceRPRecordsContext(ctx context.Context, request *ReplaceRPRecordsRequestType) (*ReplaceRPRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceSPFRecords(request *ReplaceSPFRecordsRequestType) (*ReplaceSPFRecordsResponseType, error)

	ReplaceSPFRecordsContext(ctx context.Context, request *ReplaceSPFRecordsRequestType) (*ReplaceSPFRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceSRVRecords(request *ReplaceSRVRecordsRequestType) (*ReplaceSRVRecordsResponseType, error)

	ReplaceSRVRecordsContext(ctx context.Context, request *ReplaceSRVRecordsRequestType) (*ReplaceSRVRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceSSHFPRecords(request *ReplaceSSHFPRecordsRequestType) (*ReplaceSSHFPRecordsResponseType, error)

	ReplaceSSHFPRecordsContext(ctx context.Context, request *ReplaceSSHFPRecordsRequestType) (*ReplaceSSHFPRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceTLSARecords(request *ReplaceTLSARecordsRequestType) (*ReplaceTLSARecordsResponseType, error)

	ReplaceTLSARecordsContext(ctx context.Context, request *ReplaceTLSARecordsRequestType) (*ReplaceTLSARecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceTXTRecords(request *ReplaceTXTRecordsRequestType) (*ReplaceTXTRecordsResponseType, error)

	ReplaceTXTRecordsContext(ctx context.Context, request *ReplaceTXTRecordsRequestType) (*ReplaceTXTRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ReplaceNSRecords(request *ReplaceNSRecordsRequestType) (*ReplaceNSRecordsResponseType, error)

	ReplaceNSRecordsContext(ctx context.Context, request *ReplaceNSRecordsRequestType) (*ReplaceNSRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetANYRecords(request *GetANYRecordsRequestType) (*GetANYRecordsResponseType, error)

	GetANYRecordsContext(ctx context.Context, request *GetANYRecordsRequestType) (*GetANYRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetAllRecords(request *GetAllRecordsRequestType) (*GetAllRecordsResponseType, error)

	GetAllRecordsContext(ctx context.Context, request *GetAllRecordsRequestType) (*GetAllRecordsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetAllAliasQNames(request *GetAllAliasQNamesRequestType) (*GetAllAliasQNamesResponseType, error)

	GetAllAliasQNamesContext(ctx context.Context, request *GetAllAliasQNamesRequestType) (*GetAllAliasQNamesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single User */
	GetOneUser(request *GetOneUserRequestType) (*GetOneUserResponseType, error)

	GetOneUserContext(ctx context.Context, request *GetOneUserRequestType) (*GetOneUserResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single User */
	DeleteOneUser(request *DeleteOneUserRequestType) (*DeleteOneUserResponseType, error)

	DeleteOneUserContext(ctx context.Context, request *DeleteOneUserRequestType) (*DeleteOneUserResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateUser(request *CreateUserRequestType) (*CreateUserResponseType, error)

	CreateUserContext(ctx context.Context, request *CreateUserRequestType) (*CreateUserResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateUser(request *UpdateUserRequestType) (*UpdateUserResponseType, error)

	UpdateUserContext(ctx context.Context, request *UpdateUserRequestType) (*UpdateUserResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetUsers(request *GetUsersRequestType) (*GetUsersResponseType, error)

	GetUsersContext(ctx context.Context, request *GetUsersRequestType) (*GetUsersResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetUpdateUsers(request *GetUpdateUsersRequestType) (*GetUpdateUsersResponseType, error)

	GetUpdateUsersContext(ctx context.Context, request *GetUpdateUsersRequestType) (*GetUpdateUsersResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateUpdateUser(request *UpdateUpdateUserRequestType) (*UpdateUpdateUserResponseType, error)

	UpdateUpdateUserContext(ctx context.Context, request *UpdateUpdateUserRequestType) (*UpdateUpdateUserResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneUpdateUser(request *DeleteOneUpdateUserRequestType) (*DeleteOneUpdateUserResponseType, error)

	DeleteOneUpdateUserContext(ctx context.Context, request *DeleteOneUpdateUserRequestType) (*DeleteOneUpdateUserResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateUserPassword(request *UpdateUserPasswordRequestType) (*UpdateUserPasswordResponseType, error)

	UpdateUserPasswordContext(ctx context.Context, request *UpdateUserPasswordRequestType) (*UpdateUserPasswordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	BlockUser(request *BlockUserRequestType) (*BlockUserResponseType, error)

	BlockUserContext(ctx context.Context, request *BlockUserRequestType) (*BlockUserResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UnblockUser(request *UnblockUserRequestType) (*UnblockUserResponseType, error)

	UnblockUserContext(ctx context.Context, request *UnblockUserRequestType) (*UnblockUserResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new Contact */
	CreateContact(request *CreateContactRequestType) (*CreateContactResponseType, error)

	CreateContactContext(ctx context.Context, request *CreateContactRequestType) (*CreateContactResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single Contact */
	GetOneContact(request *GetOneContactRequestType) (*GetOneContactResponseType, error)

	GetOneContactContext(ctx context.Context, request *GetOneContactRequestType) (*GetOneContactResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every Contact */
	GetContacts(request *GetContactsRequestType) (*GetContactsResponseType, error)

	GetContactsContext(ctx context.Context, request *GetContactsRequestType) (*GetContactsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single Contact */
	DeleteOneContact(request *DeleteOneContactRequestType) (*DeleteOneContactResponseType, error)

	DeleteOneContactContext(ctx context.Context, request *DeleteOneContactRequestType) (*DeleteOneContactResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateContact(request *UpdateContactRequestType) (*UpdateContactResponseType, error)

	UpdateContactContext(ctx context.Context, request *UpdateContactRequestType) (*UpdateContactResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateCustomer(request *CreateCustomerRequestType) (*CreateCustomerResponseType, error)

	CreateCustomerContext(ctx context.Context, request *CreateCustomerRequestType) (*CreateCustomerResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateCustomer(request *UpdateCustomerRequestType) (*UpdateCustomerResponseType, error)

	UpdateCustomerContext(ctx context.Context, request *UpdateCustomerRequestType) (*UpdateCustomerResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneCustomer(request *GetOneCustomerRequestType) (*GetOneCustomerResponseType, error)

	GetOneCustomerContext(ctx context.Context, request *GetOneCustomerRequestType) (*GetOneCustomerResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetCustomers(request *GetCustomersRequestType) (*GetCustomersResponseType, error)

	GetCustomersContext(ctx context.Context, request *GetCustomersRequestType) (*GetCustomersResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneCustomer(request *DeleteOneCustomerRequestType) (*DeleteOneCustomerResponseType, error)

	DeleteOneCustomerContext(ctx context.Context, request *DeleteOneCustomerRequestType) (*DeleteOneCustomerResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetCustomerPrefs(request *GetCustomerPrefsRequestType) (*GetCustomerPrefsResponseType, error)

	GetCustomerPrefsContext(ctx context.Context, request *GetCustomerPrefsRequestType) (*GetCustomerPrefsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	SetCustomerPrefs(request *SetCustomerPrefsRequestType) (*SetCustomerPrefsResponseType, error)

	SetCustomerPrefsContext(ctx context.Context, request *SetCustomerPrefsRequestType) (*SetCustomerPrefsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetCustomerIPACL(request *GetCustomerIPACLRequestType) (*GetCustomerIPACLResponseType, error)

	GetCustomerIPACLContext(ctx context.Context, request *GetCustomerIPACLRequestType) (*GetCustomerIPACLResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	SetCustomerIPACL(request *SetCustomerIPACLRequestType) (*SetCustomerIPACLResponseType, error)

	SetCustomerIPACLContext(ctx context.Context, request *SetCustomerIPACLRequestType) (*SetCustomerIPACLResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateCustomerOracleMetadata(request *CreateCustomerOracleMetadataRequestType) (*CreateCustomerOracleMetadataResponseType, error)

	CreateCustomerOracleMetadataContext(ctx context.Context, request *CreateCustomerOracleMetadataRequestType) (*CreateCustomerOracleMetadataResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateCustomerOracleMetadata(request *UpdateCustomerOracleMetadataRequestType) (*UpdateCustomerOracleMetadataResponseType, error)

	UpdateCustomerOracleMetadataContext(ctx context.Context, request *UpdateCustomerOracleMetadataRequestType) (*UpdateCustomerOracleMetadataResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetCustomerOracleMetadata(request *GetCustomerOracleMetadataRequestType) (*GetCustomerOracleMetadataResponseType, error)

	GetCustomerOracleMetadataContext(ctx context.Context, request *GetCustomerOracleMetadataRequestType) (*GetCustomerOracleMetadataResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteCustomerOracleMetadata(request *DeleteCustomerOracleMetadataRequestType) (*DeleteCustomerOracleMetadataResponseType, error)

	DeleteCustomerOracleMetadataContext(ctx context.Context, request *DeleteCustomerOracleMetadataRequestType) (*DeleteCustomerOracleMetadataResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateZoneOracleMetadata(request *CreateZoneOracleMetadataRequestType) (*CreateZoneOracleMetadataResponseType, error)

	CreateZoneOracleMetadataContext(ctx context.Context, request *CreateZoneOracleMetadataRequestType) (*CreateZoneOracleMetadataResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateZoneOracleMetadata(request *UpdateZoneOracleMetadataRequestType) (*UpdateZoneOracleMetadataResponseType, error)

	UpdateZoneOracleMetadataContext(ctx context.Context, request *UpdateZoneOracleMetadataRequestType) (*UpdateZoneOracleMetadataResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetZoneOracleMetadata(request *GetZoneOracleMetadataRequestType) (*GetZoneOracleMetadataResponseType, error)

	GetZoneOracleMetadataContext(ctx context.Context, request *GetZoneOracleMetadataRequestType) (*GetZoneOracleMetadataResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteZoneOracleMetadata(request *DeleteZoneOracleMetadataRequestType) (*DeleteZoneOracleMetadataResponseType, error)

	DeleteZoneOracleMetadataContext(ctx context.Context, request *DeleteZoneOracleMetadataRequestType) (*DeleteZoneOracleMetadataResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	OCIMigrate(request *OCIMigrateRequestType) (*OCIMigrateResponseType, error)

	OCIMigrateContext(ctx context.Context, request *OCIMigrateRequestType) (*OCIMigrateResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new Dynamic DNS service */
	CreateDDNS(request *CreateDDNSRequestType) (*CreateDDNSResponseType, error)

	CreateDDNSContext(ctx context.Context, request *CreateDDNSRequestType) (*CreateDDNSResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single Dynamic DNS service */
	GetOneDDNS(request *GetOneDDNSRequestType) (*GetOneDDNSResponseType, error)

	GetOneDDNSContext(ctx context.Context, request *GetOneDDNSRequestType) (*GetOneDDNSResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every Dynamic DNS service */
	GetDDNSs(request *GetDDNSsRequestType) (*GetDDNSsResponseType, error)

	GetDDNSsContext(ctx context.Context, request *GetDDNSsRequestType) (*GetDDNSsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single Dynamic DNS service */
	UpdateDDNS(request *UpdateDDNSRequestType) (*UpdateDDNSResponseType, error)

	UpdateDDNSContext(ctx context.Context, request *UpdateDDNSRequestType) (*UpdateDDNSResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single Dynamic DNS service */
	DeleteOneDDNS(request *DeleteOneDDNSRequestType) (*DeleteOneDDNSResponseType, error)

	DeleteOneDDNSContext(ctx context.Context, request *DeleteOneDDNSRequestType) (*DeleteOneDDNSResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ActivateDDNS(request *ActivateDDNSRequestType) (*ActivateDDNSResponseType, error)

	ActivateDDNSContext(ctx context.Context, request *ActivateDDNSRequestType) (*ActivateDDNSResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeactivateDDNS(request *DeactivateDDNSRequestType) (*DeactivateDDNSResponseType, error)

	DeactivateDDNSContext(ctx context.Context, request *DeactivateDDNSRequestType) (*DeactivateDDNSResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ResetDDNS(request *ResetDDNSRequestType) (*ResetDDNSResponseType, error)

	ResetDDNSContext(ctx context.Context, request *ResetDDNSRequestType) (*ResetDDNSResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetUpdateUserPassword(request *GetUpdateUserPasswordRequestType) (*GetUpdateUserPasswordResponseType, error)

	GetUpdateUserPasswordContext(ctx context.Context, request *GetUpdateUserPasswordRequestType) (*GetUpdateUserPasswordResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateDDNSHost(request *CreateDDNSHostRequestType) (*CreateDDNSHostResponseType, error)

	CreateDDNSHostContext(ctx context.Context, request *CreateDDNSHostRequestType) (*CreateDDNSHostResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateUpdateUser(request *CreateUpdateUserRequestType) (*CreateUpdateUserResponseType, error)

	CreateUpdateUserContext(ctx context.Context, request *CreateUpdateUserRequestType) (*CreateUpdateUserResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	AddDDNS(request *AddDDNSRequestType) (*AddDDNSResponseType, error)

	AddDDNSContext(ctx context.Context, request *AddDDNSRequestType) (*AddDDNSResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new Simple Failover service */
	CreateFailover(request *CreateFailoverRequestType) (*CreateFailoverResponseType, error)

	CreateFailoverContext(ctx context.Context, request *CreateFailoverRequestType) (*CreateFailoverResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single Simple Failover service */
	GetOneFailover(request *GetOneFailoverRequestType) (*GetOneFailoverResponseType, error)

	GetOneFailoverContext(ctx context.Context, request *GetOneFailoverRequestType) (*GetOneFailoverResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every Simple Failover service */
	GetFailovers(request *GetFailoversRequestType) (*GetFailoversResponseType, error)

	GetFailoversContext(ctx context.Context, request *GetFailoversRequestType) (*GetFailoversResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single Simple Failover service */
	UpdateFailover(request *UpdateFailoverRequestType) (*UpdateFailoverResponseType, error)

	UpdateFailoverContext(ctx context.Context, request *UpdateFailoverRequestType) (*UpdateFailoverResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single Simple Failover service */
	DeleteOneFailover(request *DeleteOneFailoverRequestType) (*DeleteOneFailoverResponseType, error)

	DeleteOneFailoverContext(ctx context.Context, request *DeleteOneFailoverRequestType) (*DeleteOneFailoverResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ActivateFailover(request *ActivateFailoverRequestType) (*ActivateFailoverResponseType, error)

	ActivateFailoverContext(ctx context.Context, request *ActivateFailoverRequestType) (*ActivateFailoverResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeactivateFailover(request *DeactivateFailoverRequestType) (*DeactivateFailoverResponseType, error)

	DeactivateFailoverContext(ctx context.Context, request *DeactivateFailoverRequestType) (*DeactivateFailoverResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RecoverFailover(request *RecoverFailoverRequestType) (*RecoverFailoverResponseType, error)

	RecoverFailoverContext(ctx context.Context, request *RecoverFailoverRequestType) (*RecoverFailoverResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new basic LoadBalance service */
	CreateLoadBalance(request *CreateLoadBalanceRequestType) (*CreateLoadBalanceResponseType, error)

	CreateLoadBalanceContext(ctx context.Context, request *CreateLoadBalanceRequestType) (*CreateLoadBalanceResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single basic LoadBalance service */
	GetOneLoadBalance(request *GetOneLoadBalanceRequestType) (*GetOneLoadBalanceResponseType, error)

	GetOneLoadBalanceContext(ctx context.Context, request *GetOneLoadBalanceRequestType) (*GetOneLoadBalanceResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every basic LoadBalance service */
	GetLoadBalances(request *GetLoadBalancesRequestType) (*GetLoadBalancesResponseType, error)

	GetLoadBalancesContext(ctx context.Context, request *GetLoadBalancesRequestType) (*GetLoadBalancesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single basic LoadBalance service */
	UpdateLoadBalance(request *UpdateLoadBalanceRequestType) (*UpdateLoadBalanceResponseType, error)

	UpdateLoadBalanceContext(ctx context.Context, request *UpdateLoadBalanceRequestType) (*UpdateLoadBalanceResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single basic LoadBalance service */
	DeleteOneLoadBalance(request *DeleteOneLoadBalanceRequestType) (*DeleteOneLoadBalanceResponseType, error)

	DeleteOneLoadBalanceContext(ctx context.Context, request *DeleteOneLoadBalanceRequestType) (*DeleteOneLoadBalanceResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ActivateLoadBalance(request *ActivateLoadBalanceRequestType) (*ActivateLoadBalanceResponseType, error)

	ActivateLoadBalanceContext(ctx context.Context, request *ActivateLoadBalanceRequestType) (*ActivateLoadBalanceResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeactivateLoadBalance(request *DeactivateLoadBalanceRequestType) (*DeactivateLoadBalanceResponseType, error)

	DeactivateLoadBalanceContext(ctx context.Context, request *DeactivateLoadBalanceRequestType) (*DeactivateLoadBalanceResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RecoverLoadBalance(request *RecoverLoadBalanceRequestType) (*RecoverLoadBalanceResponseType, error)

	RecoverLoadBalanceContext(ctx context.Context, request *RecoverLoadBalanceRequestType) (*RecoverLoadBalanceResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RecoverLoadBalanceIP(request *RecoverLoadBalanceIPRequestType) (*RecoverLoadBalanceIPResponseType, error)

	RecoverLoadBalanceIPContext(ctx context.Context, request *RecoverLoadBalanceIPRequestType) (*RecoverLoadBalanceIPResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateLoadBalancePoolEntry(request *CreateLoadBalancePoolEntryRequestType) (*CreateLoadBalancePoolEntryResponseType, error)

	CreateLoadBalancePoolEntryContext(ctx context.Context, request *CreateLoadBalancePoolEntryRequestType) (*CreateLoadBalancePoolEntryResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateLoadBalancePoolEntry(request *UpdateLoadBalancePoolEntryRequestType) (*UpdateLoadBalancePoolEntryResponseType, error)

	UpdateLoadBalancePoolEntryContext(ctx context.Context, request *UpdateLoadBalancePoolEntryRequestType) (*UpdateLoadBalancePoolEntryResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneLoadBalancePoolEntry(request *GetOneLoadBalancePoolEntryRequestType) (*GetOneLoadBalancePoolEntryResponseType, error)

	GetOneLoadBalancePoolEntryContext(ctx context.Context, request *GetOneLoadBalancePoolEntryRequestType) (*GetOneLoadBalancePoolEntryResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetLoadBalancePoolEntries(request *GetLoadBalancePoolEntriesRequestType) (*GetLoadBalancePoolEntriesResponseType, error)

	GetLoadBalancePoolEntriesContext(ctx context.Context, request *GetLoadBalancePoolEntriesRequestType) (*GetLoadBalancePoolEntriesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneLoadBalancePoolEntry(request *DeleteOneLoadBalancePoolEntryRequestType) (*DeleteOneLoadBalancePoolEntryResponseType, error)

	DeleteOneLoadBalancePoolEntryContext(ctx context.Context, request *DeleteOneLoadBalancePoolEntryRequestType) (*DeleteOneLoadBalancePoolEntryResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new GSLB */
	CreateGSLB(request *CreateGSLBRequestType) (*CreateGSLBResponseType, error)

	CreateGSLBContext(ctx context.Context, request *CreateGSLBRequestType) (*CreateGSLBResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single GSLB */
	GetOneGSLB(request *GetOneGSLBRequestType) (*GetOneGSLBResponseType, error)

	GetOneGSLBContext(ctx context.Context, request *GetOneGSLBRequestType) (*GetOneGSLBResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every GSLB */
	GetGSLBs(request *GetGSLBsRequestType) (*GetGSLBsResponseType, error)

	GetGSLBsContext(ctx context.Context, request *GetGSLBsRequestType) (*GetGSLBsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single GSLB */
	UpdateGSLB(request *UpdateGSLBRequestType) (*UpdateGSLBResponseType, error)

	UpdateGSLBContext(ctx context.Context, request *UpdateGSLBRequestType) (*UpdateGSLBResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single GSLB */
	DeleteOneGSLB(request *DeleteOneGSLBRequestType) (*DeleteOneGSLBResponseType, error)

	DeleteOneGSLBContext(ctx context.Context, request *DeleteOneGSLBRequestType) (*DeleteOneGSLBResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ActivateGSLB(request *ActivateGSLBRequestType) (*ActivateGSLBResponseType, error)

	ActivateGSLBContext(ctx context.Context, request *ActivateGSLBRequestType) (*ActivateGSLBResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeactivateGSLB(request *DeactivateGSLBRequestType) (*DeactivateGSLBResponseType, error)

	DeactivateGSLBContext(ctx context.Context, request *DeactivateGSLBRequestType) (*DeactivateGSLBResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RecoverGSLB(request *RecoverGSLBRequestType) (*RecoverGSLBResponseType, error)

	RecoverGSLBContext(ctx context.Context, request *RecoverGSLBRequestType) (*RecoverGSLBResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RecoverGSLBIP(request *RecoverGSLBIPRequestType) (*RecoverGSLBIPResponseType, error)

	RecoverGSLBIPContext(ctx context.Context, request *RecoverGSLBIPRequestType) (*RecoverGSLBIPResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new GSLBRegion */
	CreateGSLBRegion(request *CreateGSLBRegionRequestType) (*CreateGSLBRegionResponseType, error)

	CreateGSLBRegionContext(ctx context.Context, request *CreateGSLBRegionRequestType) (*CreateGSLBRegionResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single GSLBRegion */
	GetOneGSLBRegion(request *GetOneGSLBRegionRequestType) (*GetOneGSLBRegionResponseType, error)

	GetOneGSLBRegionContext(ctx context.Context, request *GetOneGSLBRegionRequestType) (*GetOneGSLBRegionResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every GSLBRegion */
	GetGSLBRegions(request *GetGSLBRegionsRequestType) (*GetGSLBRegionsResponseType, error)

	GetGSLBRegionsContext(ctx context.Context, request *GetGSLBRegionsRequestType) (*GetGSLBRegionsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single GSLBRegion */
	UpdateGSLBRegion(request *UpdateGSLBRegionRequestType) (*UpdateGSLBRegionResponseType, error)

	UpdateGSLBRegionContext(ctx context.Context, request *UpdateGSLBRegionRequestType) (*UpdateGSLBRegionResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single GSLBRegion */
	DeleteOneGSLBRegion(request *DeleteOneGSLBRegionRequestType) (*DeleteOneGSLBRegionResponseType, error)

	DeleteOneGSLBRegionContext(ctx context.Context, request *DeleteOneGSLBRegionRequestType) (*DeleteOneGSLBRegionResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateGSLBRegionPoolEntry(request *CreateGSLBRegionPoolEntryRequestType) (*CreateGSLBRegionPoolEntryResponseType, error)

	CreateGSLBRegionPoolEntryContext(ctx context.Context, request *CreateGSLBRegionPoolEntryRequestType) (*CreateGSLBRegionPoolEntryResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateGSLBRegionPoolEntry(request *UpdateGSLBRegionPoolEntryRequestType) (*UpdateGSLBRegionPoolEntryResponseType, error)

	UpdateGSLBRegionPoolEntryContext(ctx context.Context, request *UpdateGSLBRegionPoolEntryRequestType) (*UpdateGSLBRegionPoolEntryResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneGSLBRegionPoolEntry(request *GetOneGSLBRegionPoolEntryRequestType) (*GetOneGSLBRegionPoolEntryResponseType, error)

	GetOneGSLBRegionPoolEntryContext(ctx context.Context, request *GetOneGSLBRegionPoolEntryRequestType) (*GetOneGSLBRegionPoolEntryResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetGSLBRegionPoolEntries(request *GetGSLBRegionPoolEntriesRequestType) (*GetGSLBRegionPoolEntriesResponseType, error)

	GetGSLBRegionPoolEntriesContext(ctx context.Context, request *GetGSLBRegionPoolEntriesRequestType) (*GetGSLBRegionPoolEntriesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneGSLBRegionPoolEntry(request *DeleteOneGSLBRegionPoolEntryRequestType) (*DeleteOneGSLBRegionPoolEntryResponseType, error)

	DeleteOneGSLBRegionPoolEntryContext(ctx context.Context, request *DeleteOneGSLBRegionPoolEntryRequestType) (*DeleteOneGSLBRegionPoolEntryResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new RTTM */
	CreateRTTM(request *CreateRTTMRequestType) (*CreateRTTMResponseType, error)

	CreateRTTMContext(ctx context.Context, request *CreateRTTMRequestType) (*CreateRTTMResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single RTTM */
	GetOneRTTM(request *GetOneRTTMRequestType) (*GetOneRTTMResponseType, error)

	GetOneRTTMContext(ctx context.Context, request *GetOneRTTMRequestType) (*GetOneRTTMResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every RTTM */
	GetRTTMs(request *GetRTTMsRequestType) (*GetRTTMsResponseType, error)

	GetRTTMsContext(ctx context.Context, request *GetRTTMsRequestType) (*GetRTTMsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single RTTM */
	UpdateRTTM(request *UpdateRTTMRequestType) (*UpdateRTTMResponseType, error)

	UpdateRTTMContext(ctx context.Context, request *UpdateRTTMRequestType) (*UpdateRTTMResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single RTTM */
	DeleteOneRTTM(request *DeleteOneRTTMRequestType) (*DeleteOneRTTMResponseType, error)

	DeleteOneRTTMContext(ctx context.Context, request *DeleteOneRTTMRequestType) (*DeleteOneRTTMResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ActivateRTTM(request *ActivateRTTMRequestType) (*ActivateRTTMResponseType, error)

	ActivateRTTMContext(ctx context.Context, request *ActivateRTTMRequestType) (*ActivateRTTMResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeactivateRTTM(request *DeactivateRTTMRequestType) (*DeactivateRTTMResponseType, error)

	DeactivateRTTMContext(ctx context.Context, request *DeactivateRTTMRequestType) (*DeactivateRTTMResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RecoverRTTM(request *RecoverRTTMRequestType) (*RecoverRTTMResponseType, error)

	RecoverRTTMContext(ctx context.Context, request *RecoverRTTMRequestType) (*RecoverRTTMResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RecoverRTTMIP(request *RecoverRTTMIPRequestType) (*RecoverRTTMIPResponseType, error)

	RecoverRTTMIPContext(ctx context.Context, request *RecoverRTTMIPRequestType) (*RecoverRTTMIPResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetRTTMLogs(request *GetRTTMLogsRequestType) (*GetRTTMLogsResponseType, error)

	GetRTTMLogsContext(ctx context.Context, request *GetRTTMLogsRequestType) (*GetRTTMLogsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetRTTMRRSets(request *GetRTTMRRSetsRequestType) (*GetRTTMRRSetsResponseType, error)

	GetRTTMRRSetsContext(ctx context.Context, request *GetRTTMRRSetsRequestType) (*GetRTTMRRSetsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new RTTMRegion */
	CreateRTTMRegion(request *CreateRTTMRegionRequestType) (*CreateRTTMRegionResponseType, error)

	CreateRTTMRegionContext(ctx context.Context, request *CreateRTTMRegionRequestType) (*CreateRTTMRegionResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single RTTMRegion */
	GetOneRTTMRegion(request *GetOneRTTMRegionRequestType) (*GetOneRTTMRegionResponseType, error)

	GetOneRTTMRegionContext(ctx context.Context, request *GetOneRTTMRegionRequestType) (*GetOneRTTMRegionResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every RTTMRegion */
	GetRTTMRegions(request *GetRTTMRegionsRequestType) (*GetRTTMRegionsResponseType, error)

	GetRTTMRegionsContext(ctx context.Context, request *GetRTTMRegionsRequestType) (*GetRTTMRegionsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single RTTMRegion */
	UpdateRTTMRegion(request *UpdateRTTMRegionRequestType) (*UpdateRTTMRegionResponseType, error)

	UpdateRTTMRegionContext(ctx context.Context, request *UpdateRTTMRegionRequestType) (*UpdateRTTMRegionResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single RTTMRegion */
	DeleteOneRTTMRegion(request *DeleteOneRTTMRegionRequestType) (*DeleteOneRTTMRegionResponseType, error)

	DeleteOneRTTMRegionContext(ctx context.Context, request *DeleteOneRTTMRegionRequestType) (*DeleteOneRTTMRegionResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateRTTMRegionPoolEntry(request *CreateRTTMRegionPoolEntryRequestType) (*CreateRTTMRegionPoolEntryResponseType, error)

	CreateRTTMRegionPoolEntryContext(ctx context.Context, request *CreateRTTMRegionPoolEntryRequestType) (*CreateRTTMRegionPoolEntryResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateRTTMRegionPoolEntry(request *UpdateRTTMRegionPoolEntryRequestType) (*UpdateRTTMRegionPoolEntryResponseType, error)

	UpdateRTTMRegionPoolEntryContext(ctx context.Context, request *UpdateRTTMRegionPoolEntryRequestType) (*UpdateRTTMRegionPoolEntryResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneRTTMRegionPoolEntry(request *GetOneRTTMRegionPoolEntryRequestType) (*GetOneRTTMRegionPoolEntryResponseType, error)

	GetOneRTTMRegionPoolEntryContext(ctx context.Context, request *GetOneRTTMRegionPoolEntryRequestType) (*GetOneRTTMRegionPoolEntryResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetRTTMRegionPoolEntries(request *GetRTTMRegionPoolEntriesRequestType) (*GetRTTMRegionPoolEntriesResponseType, error)

	GetRTTMRegionPoolEntriesContext(ctx context.Context, request *GetRTTMRegionPoolEntriesRequestType) (*GetRTTMRegionPoolEntriesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneRTTMRegionPoolEntry(request *DeleteOneRTTMRegionPoolEntryRequestType) (*DeleteOneRTTMRegionPoolEntryResponseType, error)

	DeleteOneRTTMRegionPoolEntryContext(ctx context.Context, request *DeleteOneRTTMRegionPoolEntryRequestType) (*DeleteOneRTTMRegionPoolEntryResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new HTTPRedirect */
	CreateHTTPRedirect(request *CreateHTTPRedirectRequestType) (*CreateHTTPRedirectResponseType, error)

	CreateHTTPRedirectContext(ctx context.Context, request *CreateHTTPRedirectRequestType) (*CreateHTTPRedirectResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single HTTPRedirect */
	GetOneHTTPRedirect(request *GetOneHTTPRedirectRequestType) (*GetOneHTTPRedirectResponseType, error)

	GetOneHTTPRedirectContext(ctx context.Context, request *GetOneHTTPRedirectRequestType) (*GetOneHTTPRedirectResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every HTTPRedirect */
	GetHTTPRedirects(request *GetHTTPRedirectsRequestType) (*GetHTTPRedirectsResponseType, error)

	GetHTTPRedirectsContext(ctx context.Context, request *GetHTTPRedirectsRequestType) (*GetHTTPRedirectsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single HTTPRedirect */
	UpdateHTTPRedirect(request *UpdateHTTPRedirectRequestType) (*UpdateHTTPRedirectResponseType, error)

	UpdateHTTPRedirectContext(ctx context.Context, request *UpdateHTTPRedirectRequestType) (*UpdateHTTPRedirectResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single HTTPRedirect */
	DeleteOneHTTPRedirect(request *DeleteOneHTTPRedirectRequestType) (*DeleteOneHTTPRedirectResponseType, error)

	DeleteOneHTTPRedirectContext(ctx context.Context, request *DeleteOneHTTPRedirectRequestType) (*DeleteOneHTTPRedirectResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	CreateAdvRedirectRule(request *CreateAdvRedirectRuleRequestType) (*CreateAdvRedirectRuleResponseType, error)

	CreateAdvRedirectRuleContext(ctx context.Context, request *CreateAdvRedirectRuleRequestType) (*CreateAdvRedirectRuleResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UpdateAdvRedirectRule(request *UpdateAdvRedirectRuleRequestType) (*UpdateAdvRedirectRuleResponseType, error)

	UpdateAdvRedirectRuleContext(ctx context.Context, request *UpdateAdvRedirectRuleRequestType) (*UpdateAdvRedirectRuleResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetOneAdvRedirectRule(request *GetOneAdvRedirectRuleRequestType) (*GetOneAdvRedirectRuleResponseType, error)

	GetOneAdvRedirectRuleContext(ctx context.Context, request *GetOneAdvRedirectRuleRequestType) (*GetOneAdvRedirectRuleResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetAdvRedirectRules(request *GetAdvRedirectRulesRequestType) (*GetAdvRedirectRulesResponseType, error)

	GetAdvRedirectRulesContext(ctx context.Context, request *GetAdvRedirectRulesRequestType) (*GetAdvRedirectRulesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneAdvRedirectRule(request *DeleteOneAdvRedirectRuleRequestType) (*DeleteOneAdvRedirectRuleResponseType, error)

	DeleteOneAdvRedirectRuleContext(ctx context.Context, request *DeleteOneAdvRedirectRuleRequestType) (*DeleteOneAdvRedirectRuleResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new AdvRedirect */
	CreateAdvRedirect(request *CreateAdvRedirectRequestType) (*CreateAdvRedirectResponseType, error)

	CreateAdvRedirectContext(ctx context.Context, request *CreateAdvRedirectRequestType) (*CreateAdvRedirectResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single AdvRedirect */
	GetOneAdvRedirect(request *GetOneAdvRedirectRequestType) (*GetOneAdvRedirectResponseType, error)

	GetOneAdvRedirectContext(ctx context.Context, request *GetOneAdvRedirectRequestType) (*GetOneAdvRedirectResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every AdvRedirect */
	GetAdvRedirects(request *GetAdvRedirectsRequestType) (*GetAdvRedirectsResponseType, error)

	GetAdvRedirectsContext(ctx context.Context, request *GetAdvRedirectsRequestType) (*GetAdvRedirectsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single AdvRedirect */
	UpdateAdvRedirect(request *UpdateAdvRedirectRequestType) (*UpdateAdvRedirectResponseType, error)

	UpdateAdvRedirectContext(ctx context.Context, request *UpdateAdvRedirectRequestType) (*UpdateAdvRedirectResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteOneAdvRedirect(request *DeleteOneAdvRedirectRequestType) (*DeleteOneAdvRedirectResponseType, error)

	DeleteOneAdvRedirectContext(ctx context.Context, request *DeleteOneAdvRedirectRequestType) (*DeleteOneAdvRedirectResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetNodeList(request *GetNodeListRequestType) (*GetNodeListResponseType, error)

	GetNodeListContext(ctx context.Context, request *GetNodeListRequestType) (*GetNodeListResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	PublishZone(request *PublishZoneRequestType) (*PublishZoneResponseType, error)

	PublishZoneContext(ctx context.Context, request *PublishZoneRequestType) (*PublishZoneResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	PruneZone(request *PruneZoneRequestType) (*PruneZoneResponseType, error)

	PruneZoneContext(ctx context.Context, request *PruneZoneRequestType) (*PruneZoneResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	FreezeZone(request *FreezeZoneRequestType) (*FreezeZoneResponseType, error)

	FreezeZoneContext(ctx context.Context, request *FreezeZoneRequestType) (*FreezeZoneResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ThawZone(request *ThawZoneRequestType) (*ThawZoneResponseType, error)

	ThawZoneContext(ctx context.Context, request *ThawZoneRequestType) (*ThawZoneResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	RestoreZone(request *RestoreZoneRequestType) (*RestoreZoneResponseType, error)

	RestoreZoneContext(ctx context.Context, request *RestoreZoneRequestType) (*RestoreZoneResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	BlockZone(request *BlockZoneRequestType) (*BlockZoneResponseType, error)

	BlockZoneContext(ctx context.Context, request *BlockZoneRequestType) (*BlockZoneResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeleteZoneChangeset(request *DeleteZoneChangesetRequestType) (*DeleteZoneChangesetResponseType, error)

	DeleteZoneChangesetContext(ctx context.Context, request *DeleteZoneChangesetRequestType) (*DeleteZoneChangesetResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetZoneChangeset(request *GetZoneChangesetRequestType) (*GetZoneChangesetResponseType, error)

	GetZoneChangesetContext(ctx context.Context, request *GetZoneChangesetRequestType) (*GetZoneChangesetResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetZoneNotes(request *GetZoneNotesRequestType) (*GetZoneNotesResponseType, error)

	GetZoneNotesContext(ctx context.Context, request *GetZoneNotesRequestType) (*GetZoneNotesResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	UploadZoneFile(request *UploadZoneFileRequestType) (*UploadZoneFileResponseType, error)

	UploadZoneFileContext(ctx context.Context, request *UploadZoneFileRequestType) (*UploadZoneFileResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	TransferZoneIn(request *TransferZoneInRequestType) (*TransferZoneInResponseType, error)

	TransferZoneInContext(ctx context.Context, request *TransferZoneInRequestType) (*TransferZoneInResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetTransferStatus(request *GetTransferStatusRequestType) (*GetTransferStatusResponseType, error)

	GetTransferStatusContext(ctx context.Context, request *GetTransferStatusRequestType) (*GetTransferStatusResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetZoneConfigOptions(request *GetZoneConfigOptionsRequestType) (*GetZoneConfigOptionsResponseType, error)

	GetZoneConfigOptionsContext(ctx context.Context, request *GetZoneConfigOptionsRequestType) (*GetZoneConfigOptionsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	SetZoneConfigOptions(request *SetZoneConfigOptionsRequestType) (*SetZoneConfigOptionsResponseType, error)

	SetZoneConfigOptionsContext(ctx context.Context, request *SetZoneConfigOptionsRequestType) (*SetZoneConfigOptionsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new IPTrack */
	CreateIPTrack(request *CreateIPTrackRequestType) (*CreateIPTrackResponseType, error)

	CreateIPTrackContext(ctx context.Context, request *CreateIPTrackRequestType) (*CreateIPTrackResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single IPTrack */
	GetOneIPTrack(request *GetOneIPTrackRequestType) (*GetOneIPTrackResponseType, error)

	GetOneIPTrackContext(ctx context.Context, request *GetOneIPTrackRequestType) (*GetOneIPTrackResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every IPTrack */
	GetIPTracks(request *GetIPTracksRequestType) (*GetIPTracksResponseType, error)

	GetIPTracksContext(ctx context.Context, request *GetIPTracksRequestType) (*GetIPTracksResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single IPTrack */
	UpdateIPTrack(request *UpdateIPTrackRequestType) (*UpdateIPTrackResponseType, error)

	UpdateIPTrackContext(ctx context.Context, request *UpdateIPTrackRequestType) (*UpdateIPTrackResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single IPTrack */
	DeleteOneIPTrack(request *DeleteOneIPTrackRequestType) (*DeleteOneIPTrackResponseType, error)

	DeleteOneIPTrackContext(ctx context.Context, request *DeleteOneIPTrackRequestType) (*DeleteOneIPTrackResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ActivateIPTrack(request *ActivateIPTrackRequestType) (*ActivateIPTrackResponseType, error)

	ActivateIPTrackContext(ctx context.Context, request *ActivateIPTrackRequestType) (*ActivateIPTrackResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeactivateIPTrack(request *DeactivateIPTrackRequestType) (*DeactivateIPTrackResponseType, error)

	DeactivateIPTrackContext(ctx context.Context, request *DeactivateIPTrackRequestType) (*DeactivateIPTrackResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new DNSSEC */
	CreateDNSSEC(request *CreateDNSSECRequestType) (*CreateDNSSECResponseType, error)

	CreateDNSSECContext(ctx context.Context, request *CreateDNSSECRequestType) (*CreateDNSSECResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single DNSSEC */
	GetOneDNSSEC(request *GetOneDNSSECRequestType) (*GetOneDNSSECResponseType, error)

	GetOneDNSSECContext(ctx context.Context, request *GetOneDNSSECRequestType) (*GetOneDNSSECResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every DNSSEC */
	GetDNSSECs(request *GetDNSSECsRequestType) (*GetDNSSECsResponseType, error)

	GetDNSSECsContext(ctx context.Context, request *GetDNSSECsRequestType) (*GetDNSSECsResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single DNSSEC */
	UpdateDNSSEC(request *UpdateDNSSECRequestType) (*UpdateDNSSECResponseType, error)

	UpdateDNSSECContext(ctx context.Context, request *UpdateDNSSECRequestType) (*UpdateDNSSECResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single DNSSEC */
	DeleteOneDNSSEC(request *DeleteOneDNSSECRequestType) (*DeleteOneDNSSECResponseType, error)

	DeleteOneDNSSECContext(ctx context.Context, request *DeleteOneDNSSECRequestType) (*DeleteOneDNSSECResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	ActivateDNSSEC(request *ActivateDNSSECRequestType) (*ActivateDNSSECResponseType, error)

	ActivateDNSSECContext(ctx context.Context, request *ActivateDNSSECRequestType) (*ActivateDNSSECResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	DeactivateDNSSEC(request *DeactivateDNSSECRequestType) (*DeactivateDNSSECResponseType, error)

	DeactivateDNSSECContext(ctx context.Context, request *DeactivateDNSSECRequestType) (*DeactivateDNSSECResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault

	GetDNSSECTimeline(request *GetDNSSECTimelineRequestType) (*GetDNSSECTimelineResponseType, error)

	GetDNSSECTimelineContext(ctx context.Context, request *GetDNSSECTimelineRequestType) (*GetDNSSECTimelineResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every Task */
	GetTasks(request *GetTasksRequestType) (*GetTasksResponseType, error)

	GetTasksContext(ctx context.Context, request *GetTasksRequestType) (*GetTasksResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single Task */
	GetOneTask(request *GetOneTaskRequestType) (*GetOneTaskResponseType, error)

	GetOneTaskContext(ctx context.Context, request *GetOneTaskRequestType) (*GetOneTaskResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Cancels a Task */
	CancelTask(request *CancelTaskRequestType) (*CancelTaskResponseType, error)

	CancelTaskContext(ctx context.Context, request *CancelTaskRequestType) (*CancelTaskResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Creates a new ExtNameserver */
	CreateExtNameserver(request *CreateExtNameserverRequestType) (*CreateExtNameserverResponseType, error)

	CreateExtNameserverContext(ctx context.Context, request *CreateExtNameserverRequestType) (*CreateExtNameserverResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds single ExtNameserver */
	GetOneExtNameserver(request *GetOneExtNameserverRequestType) (*GetOneExtNameserverResponseType, error)

	GetOneExtNameserverContext(ctx context.Context, request *GetOneExtNameserverRequestType) (*GetOneExtNameserverResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Finds every ExtNameserver */
	GetExtNameservers(request *GetExtNameserversRequestType) (*GetExtNameserversResponseType, error)

	GetExtNameserversContext(ctx context.Context, request *GetExtNameserversRequestType) (*GetExtNameserversResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Updates a single ExtNameserver */
	UpdateExtNameserver(request *UpdateExtNameserverRequestType) (*UpdateExtNameserverResponseType, error)

	UpdateExtNameserverContext(ctx context.Context, request *UpdateExtNameserverRequestType) (*UpdateExtNameserverResponseType, error)

	// Error can be either of the following types:
	//
	//   - fault
	/* Deletes a single ExtNameserver */
	DeleteOneExtNameserver(request *DeleteOneExtNameserverRequestType) (*DeleteOneExtNameserverResponseType, error)

	DeleteOneExtNameserverContext(ctx context.Context, request *DeleteOneExtNameserverRequestType) (*DeleteOneExtNameserverResponseType, error)
}

type dynect struct {
	client *soap.Client
}

func NewDynect(client *soap.Client) Dynect {
	return &dynect{
		client: client,
	}
}

func (service *dynect) GetJobContext(ctx context.Context, request *GetJobRequestType) (*GetJobResponseType, error) {
	response := new(GetJobResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetJob(request *GetJobRequestType) (*GetJobResponseType, error) {
	return service.GetJobContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SessionLoginContext(ctx context.Context, request *SessionLoginRequestType) (*SessionLoginResponseType, error) {
	response := new(SessionLoginResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SessionLogin(request *SessionLoginRequestType) (*SessionLoginResponseType, error) {
	return service.SessionLoginContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SessionLogoutContext(ctx context.Context, request *SessionLogoutRequestType) (*SessionLogoutResponseType, error) {
	response := new(SessionLogoutResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SessionLogout(request *SessionLogoutRequestType) (*SessionLogoutResponseType, error) {
	return service.SessionLogoutContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SessionIsAliveContext(ctx context.Context, request *SessionIsAliveRequestType) (*SessionIsAliveResponseType, error) {
	response := new(SessionIsAliveResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SessionIsAlive(request *SessionIsAliveRequestType) (*SessionIsAliveResponseType, error) {
	return service.SessionIsAliveContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SessionKeepAliveContext(ctx context.Context, request *SessionKeepAliveRequestType) (*SessionKeepAliveResponseType, error) {
	response := new(SessionKeepAliveResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SessionKeepAlive(request *SessionKeepAliveRequestType) (*SessionKeepAliveResponseType, error) {
	return service.SessionKeepAliveContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ScopeInContext(ctx context.Context, request *ScopeInRequestType) (*ScopeInResponseType, error) {
	response := new(ScopeInResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ScopeIn(request *ScopeInRequestType) (*ScopeInResponseType, error) {
	return service.ScopeInContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ScopeAsContext(ctx context.Context, request *ScopeAsRequestType) (*ScopeAsResponseType, error) {
	response := new(ScopeAsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ScopeAs(request *ScopeAsRequestType) (*ScopeAsResponseType, error) {
	return service.ScopeAsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UnscopeContext(ctx context.Context, request *UnscopeRequestType) (*UnscopeResponseType, error) {
	response := new(UnscopeResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) Unscope(request *UnscopeRequestType) (*UnscopeResponseType, error) {
	return service.UnscopeContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetQueryStatsContext(ctx context.Context, request *GetQueryStatsRequestType) (*GetQueryStatsResponseType, error) {
	response := new(GetQueryStatsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetQueryStats(request *GetQueryStatsRequestType) (*GetQueryStatsResponseType, error) {
	return service.GetQueryStatsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateGeoContext(ctx context.Context, request *CreateGeoRequestType) (*CreateGeoResponseType, error) {
	response := new(CreateGeoResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateGeo(request *CreateGeoRequestType) (*CreateGeoResponseType, error) {
	return service.CreateGeoContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateGeoContext(ctx context.Context, request *UpdateGeoRequestType) (*UpdateGeoResponseType, error) {
	response := new(UpdateGeoResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateGeo(request *UpdateGeoRequestType) (*UpdateGeoResponseType, error) {
	return service.UpdateGeoContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetGeosContext(ctx context.Context, request *GetGeosRequestType) (*GetGeosResponseType, error) {
	response := new(GetGeosResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetGeos(request *GetGeosRequestType) (*GetGeosResponseType, error) {
	return service.GetGeosContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneGeoContext(ctx context.Context, request *GetOneGeoRequestType) (*GetOneGeoResponseType, error) {
	response := new(GetOneGeoResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneGeo(request *GetOneGeoRequestType) (*GetOneGeoResponseType, error) {
	return service.GetOneGeoContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneGeoContext(ctx context.Context, request *DeleteOneGeoRequestType) (*DeleteOneGeoResponseType, error) {
	response := new(DeleteOneGeoResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneGeo(request *DeleteOneGeoRequestType) (*DeleteOneGeoResponseType, error) {
	return service.DeleteOneGeoContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ActivateGeoContext(ctx context.Context, request *ActivateGeoRequestType) (*ActivateGeoResponseType, error) {
	response := new(ActivateGeoResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ActivateGeo(request *ActivateGeoRequestType) (*ActivateGeoResponseType, error) {
	return service.ActivateGeoContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeactivateGeoContext(ctx context.Context, request *DeactivateGeoRequestType) (*DeactivateGeoResponseType, error) {
	response := new(DeactivateGeoResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeactivateGeo(request *DeactivateGeoRequestType) (*DeactivateGeoResponseType, error) {
	return service.DeactivateGeoContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateGeoRegionGroupContext(ctx context.Context, request *CreateGeoRegionGroupRequestType) (*CreateGeoRegionGroupResponseType, error) {
	response := new(CreateGeoRegionGroupResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateGeoRegionGroup(request *CreateGeoRegionGroupRequestType) (*CreateGeoRegionGroupResponseType, error) {
	return service.CreateGeoRegionGroupContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateGeoRegionGroupContext(ctx context.Context, request *UpdateGeoRegionGroupRequestType) (*UpdateGeoRegionGroupResponseType, error) {
	response := new(UpdateGeoRegionGroupResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateGeoRegionGroup(request *UpdateGeoRegionGroupRequestType) (*UpdateGeoRegionGroupResponseType, error) {
	return service.UpdateGeoRegionGroupContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneGeoRegionGroupContext(ctx context.Context, request *DeleteOneGeoRegionGroupRequestType) (*DeleteOneGeoRegionGroupResponseType, error) {
	response := new(DeleteOneGeoRegionGroupResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneGeoRegionGroup(request *DeleteOneGeoRegionGroupRequestType) (*DeleteOneGeoRegionGroupResponseType, error) {
	return service.DeleteOneGeoRegionGroupContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetGeoRegionGroupsContext(ctx context.Context, request *GetGeoRegionGroupsRequestType) (*GetGeoRegionGroupsResponseType, error) {
	response := new(GetGeoRegionGroupsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetGeoRegionGroups(request *GetGeoRegionGroupsRequestType) (*GetGeoRegionGroupsResponseType, error) {
	return service.GetGeoRegionGroupsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneGeoRegionGroupContext(ctx context.Context, request *GetOneGeoRegionGroupRequestType) (*GetOneGeoRegionGroupResponseType, error) {
	response := new(GetOneGeoRegionGroupResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneGeoRegionGroup(request *GetOneGeoRegionGroupRequestType) (*GetOneGeoRegionGroupResponseType, error) {
	return service.GetOneGeoRegionGroupContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateGeoNodeContext(ctx context.Context, request *CreateGeoNodeRequestType) (*CreateGeoNodeResponseType, error) {
	response := new(CreateGeoNodeResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateGeoNode(request *CreateGeoNodeRequestType) (*CreateGeoNodeResponseType, error) {
	return service.CreateGeoNodeContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneGeoNodeContext(ctx context.Context, request *DeleteOneGeoNodeRequestType) (*DeleteOneGeoNodeResponseType, error) {
	response := new(DeleteOneGeoNodeResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneGeoNode(request *DeleteOneGeoNodeRequestType) (*DeleteOneGeoNodeResponseType, error) {
	return service.DeleteOneGeoNodeContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetGeoNodesContext(ctx context.Context, request *GetGeoNodesRequestType) (*GetGeoNodesResponseType, error) {
	response := new(GetGeoNodesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetGeoNodes(request *GetGeoNodesRequestType) (*GetGeoNodesResponseType, error) {
	return service.GetGeoNodesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateDSFContext(ctx context.Context, request *CreateDSFRequestType) (*CreateDSFResponseType, error) {
	response := new(CreateDSFResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateDSF(request *CreateDSFRequestType) (*CreateDSFResponseType, error) {
	return service.CreateDSFContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateDSFContext(ctx context.Context, request *UpdateDSFRequestType) (*UpdateDSFResponseType, error) {
	response := new(UpdateDSFResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateDSF(request *UpdateDSFRequestType) (*UpdateDSFResponseType, error) {
	return service.UpdateDSFContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetDSFsContext(ctx context.Context, request *GetDSFsRequestType) (*GetDSFsResponseType, error) {
	response := new(GetDSFsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetDSFs(request *GetDSFsRequestType) (*GetDSFsResponseType, error) {
	return service.GetDSFsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetDSFNotifiersContext(ctx context.Context, request *GetDSFNotifiersRequestType) (*GetDSFNotifiersResponseType, error) {
	response := new(GetDSFNotifiersResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetDSFNotifiers(request *GetDSFNotifiersRequestType) (*GetDSFNotifiersResponseType, error) {
	return service.GetDSFNotifiersContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneDSFContext(ctx context.Context, request *DeleteOneDSFRequestType) (*DeleteOneDSFResponseType, error) {
	response := new(DeleteOneDSFResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneDSF(request *DeleteOneDSFRequestType) (*DeleteOneDSFResponseType, error) {
	return service.DeleteOneDSFContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneDSFContext(ctx context.Context, request *GetOneDSFRequestType) (*GetOneDSFResponseType, error) {
	response := new(GetOneDSFResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneDSF(request *GetOneDSFRequestType) (*GetOneDSFResponseType, error) {
	return service.GetOneDSFContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RevertDSFContext(ctx context.Context, request *RevertDSFRequestType) (*RevertDSFResponseType, error) {
	response := new(RevertDSFResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RevertDSF(request *RevertDSFRequestType) (*RevertDSFResponseType, error) {
	return service.RevertDSFContext(
		context.Background(),
		request,
	)
}

func (service *dynect) PublishDSFContext(ctx context.Context, request *PublishDSFRequestType) (*PublishDSFResponseType, error) {
	response := new(PublishDSFResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) PublishDSF(request *PublishDSFRequestType) (*PublishDSFResponseType, error) {
	return service.PublishDSFContext(
		context.Background(),
		request,
	)
}

func (service *dynect) AddDSFNotifierContext(ctx context.Context, request *AddDSFNotifierRequestType) (*AddDSFNotifierResponseType, error) {
	response := new(AddDSFNotifierResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) AddDSFNotifier(request *AddDSFNotifierRequestType) (*AddDSFNotifierResponseType, error) {
	return service.AddDSFNotifierContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RemoveDSFNotifierContext(ctx context.Context, request *RemoveDSFNotifierRequestType) (*RemoveDSFNotifierResponseType, error) {
	response := new(RemoveDSFNotifierResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RemoveDSFNotifier(request *RemoveDSFNotifierRequestType) (*RemoveDSFNotifierResponseType, error) {
	return service.RemoveDSFNotifierContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateDSFRulesetContext(ctx context.Context, request *CreateDSFRulesetRequestType) (*CreateDSFRulesetResponseType, error) {
	response := new(CreateDSFRulesetResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateDSFRuleset(request *CreateDSFRulesetRequestType) (*CreateDSFRulesetResponseType, error) {
	return service.CreateDSFRulesetContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateDSFRulesetContext(ctx context.Context, request *UpdateDSFRulesetRequestType) (*UpdateDSFRulesetResponseType, error) {
	response := new(UpdateDSFRulesetResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateDSFRuleset(request *UpdateDSFRulesetRequestType) (*UpdateDSFRulesetResponseType, error) {
	return service.UpdateDSFRulesetContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetDSFRulesetsContext(ctx context.Context, request *GetDSFRulesetsRequestType) (*GetDSFRulesetsResponseType, error) {
	response := new(GetDSFRulesetsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetDSFRulesets(request *GetDSFRulesetsRequestType) (*GetDSFRulesetsResponseType, error) {
	return service.GetDSFRulesetsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneDSFRulesetContext(ctx context.Context, request *GetOneDSFRulesetRequestType) (*GetOneDSFRulesetResponseType, error) {
	response := new(GetOneDSFRulesetResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneDSFRuleset(request *GetOneDSFRulesetRequestType) (*GetOneDSFRulesetResponseType, error) {
	return service.GetOneDSFRulesetContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneDSFRulesetContext(ctx context.Context, request *DeleteOneDSFRulesetRequestType) (*DeleteOneDSFRulesetResponseType, error) {
	response := new(DeleteOneDSFRulesetResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneDSFRuleset(request *DeleteOneDSFRulesetRequestType) (*DeleteOneDSFRulesetResponseType, error) {
	return service.DeleteOneDSFRulesetContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateDSFResponsePoolContext(ctx context.Context, request *CreateDSFResponsePoolRequestType) (*CreateDSFResponsePoolResponseType, error) {
	response := new(CreateDSFResponsePoolResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateDSFResponsePool(request *CreateDSFResponsePoolRequestType) (*CreateDSFResponsePoolResponseType, error) {
	return service.CreateDSFResponsePoolContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateDSFResponsePoolContext(ctx context.Context, request *UpdateDSFResponsePoolRequestType) (*UpdateDSFResponsePoolResponseType, error) {
	response := new(UpdateDSFResponsePoolResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateDSFResponsePool(request *UpdateDSFResponsePoolRequestType) (*UpdateDSFResponsePoolResponseType, error) {
	return service.UpdateDSFResponsePoolContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetDSFResponsePoolsContext(ctx context.Context, request *GetDSFResponsePoolsRequestType) (*GetDSFResponsePoolsResponseType, error) {
	response := new(GetDSFResponsePoolsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetDSFResponsePools(request *GetDSFResponsePoolsRequestType) (*GetDSFResponsePoolsResponseType, error) {
	return service.GetDSFResponsePoolsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneDSFResponsePoolContext(ctx context.Context, request *GetOneDSFResponsePoolRequestType) (*GetOneDSFResponsePoolResponseType, error) {
	response := new(GetOneDSFResponsePoolResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneDSFResponsePool(request *GetOneDSFResponsePoolRequestType) (*GetOneDSFResponsePoolResponseType, error) {
	return service.GetOneDSFResponsePoolContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneDSFResponsePoolContext(ctx context.Context, request *DeleteOneDSFResponsePoolRequestType) (*DeleteOneDSFResponsePoolResponseType, error) {
	response := new(DeleteOneDSFResponsePoolResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneDSFResponsePool(request *DeleteOneDSFResponsePoolRequestType) (*DeleteOneDSFResponsePoolResponseType, error) {
	return service.DeleteOneDSFResponsePoolContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateDSFRecordSetFailoverChainContext(ctx context.Context, request *CreateDSFRecordSetFailoverChainRequestType) (*CreateDSFRecordSetFailoverChainResponseType, error) {
	response := new(CreateDSFRecordSetFailoverChainResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateDSFRecordSetFailoverChain(request *CreateDSFRecordSetFailoverChainRequestType) (*CreateDSFRecordSetFailoverChainResponseType, error) {
	return service.CreateDSFRecordSetFailoverChainContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateDSFRecordSetFailoverChainContext(ctx context.Context, request *UpdateDSFRecordSetFailoverChainRequestType) (*UpdateDSFRecordSetFailoverChainResponseType, error) {
	response := new(UpdateDSFRecordSetFailoverChainResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateDSFRecordSetFailoverChain(request *UpdateDSFRecordSetFailoverChainRequestType) (*UpdateDSFRecordSetFailoverChainResponseType, error) {
	return service.UpdateDSFRecordSetFailoverChainContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetDSFRecordSetFailoverChainsContext(ctx context.Context, request *GetDSFRecordSetFailoverChainsRequestType) (*GetDSFRecordSetFailoverChainsResponseType, error) {
	response := new(GetDSFRecordSetFailoverChainsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetDSFRecordSetFailoverChains(request *GetDSFRecordSetFailoverChainsRequestType) (*GetDSFRecordSetFailoverChainsResponseType, error) {
	return service.GetDSFRecordSetFailoverChainsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneDSFRecordSetFailoverChainContext(ctx context.Context, request *GetOneDSFRecordSetFailoverChainRequestType) (*GetOneDSFRecordSetFailoverChainResponseType, error) {
	response := new(GetOneDSFRecordSetFailoverChainResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneDSFRecordSetFailoverChain(request *GetOneDSFRecordSetFailoverChainRequestType) (*GetOneDSFRecordSetFailoverChainResponseType, error) {
	return service.GetOneDSFRecordSetFailoverChainContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneDSFRecordSetFailoverChainContext(ctx context.Context, request *DeleteOneDSFRecordSetFailoverChainRequestType) (*DeleteOneDSFRecordSetFailoverChainResponseType, error) {
	response := new(DeleteOneDSFRecordSetFailoverChainResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneDSFRecordSetFailoverChain(request *DeleteOneDSFRecordSetFailoverChainRequestType) (*DeleteOneDSFRecordSetFailoverChainResponseType, error) {
	return service.DeleteOneDSFRecordSetFailoverChainContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateDSFRecordSetContext(ctx context.Context, request *CreateDSFRecordSetRequestType) (*CreateDSFRecordSetResponseType, error) {
	response := new(CreateDSFRecordSetResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateDSFRecordSet(request *CreateDSFRecordSetRequestType) (*CreateDSFRecordSetResponseType, error) {
	return service.CreateDSFRecordSetContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateDSFRecordSetContext(ctx context.Context, request *UpdateDSFRecordSetRequestType) (*UpdateDSFRecordSetResponseType, error) {
	response := new(UpdateDSFRecordSetResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateDSFRecordSet(request *UpdateDSFRecordSetRequestType) (*UpdateDSFRecordSetResponseType, error) {
	return service.UpdateDSFRecordSetContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneDSFRecordSetContext(ctx context.Context, request *GetOneDSFRecordSetRequestType) (*GetOneDSFRecordSetResponseType, error) {
	response := new(GetOneDSFRecordSetResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneDSFRecordSet(request *GetOneDSFRecordSetRequestType) (*GetOneDSFRecordSetResponseType, error) {
	return service.GetOneDSFRecordSetContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetDSFRecordSetsContext(ctx context.Context, request *GetDSFRecordSetsRequestType) (*GetDSFRecordSetsResponseType, error) {
	response := new(GetDSFRecordSetsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetDSFRecordSets(request *GetDSFRecordSetsRequestType) (*GetDSFRecordSetsResponseType, error) {
	return service.GetDSFRecordSetsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneDSFRecordSetContext(ctx context.Context, request *DeleteOneDSFRecordSetRequestType) (*DeleteOneDSFRecordSetResponseType, error) {
	response := new(DeleteOneDSFRecordSetResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneDSFRecordSet(request *DeleteOneDSFRecordSetRequestType) (*DeleteOneDSFRecordSetResponseType, error) {
	return service.DeleteOneDSFRecordSetContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateDSFRecordContext(ctx context.Context, request *CreateDSFRecordRequestType) (*CreateDSFRecordResponseType, error) {
	response := new(CreateDSFRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateDSFRecord(request *CreateDSFRecordRequestType) (*CreateDSFRecordResponseType, error) {
	return service.CreateDSFRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateDSFRecordContext(ctx context.Context, request *UpdateDSFRecordRequestType) (*UpdateDSFRecordResponseType, error) {
	response := new(UpdateDSFRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateDSFRecord(request *UpdateDSFRecordRequestType) (*UpdateDSFRecordResponseType, error) {
	return service.UpdateDSFRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneDSFRecordContext(ctx context.Context, request *GetOneDSFRecordRequestType) (*GetOneDSFRecordResponseType, error) {
	response := new(GetOneDSFRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneDSFRecord(request *GetOneDSFRecordRequestType) (*GetOneDSFRecordResponseType, error) {
	return service.GetOneDSFRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetDSFRecordsContext(ctx context.Context, request *GetDSFRecordsRequestType) (*GetDSFRecordsResponseType, error) {
	response := new(GetDSFRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetDSFRecords(request *GetDSFRecordsRequestType) (*GetDSFRecordsResponseType, error) {
	return service.GetDSFRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneDSFRecordContext(ctx context.Context, request *DeleteOneDSFRecordRequestType) (*DeleteOneDSFRecordResponseType, error) {
	response := new(DeleteOneDSFRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneDSFRecord(request *DeleteOneDSFRecordRequestType) (*DeleteOneDSFRecordResponseType, error) {
	return service.DeleteOneDSFRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) AddDSFNodeContext(ctx context.Context, request *AddDSFNodeRequestType) (*AddDSFNodeResponseType, error) {
	response := new(AddDSFNodeResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) AddDSFNode(request *AddDSFNodeRequestType) (*AddDSFNodeResponseType, error) {
	return service.AddDSFNodeContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateDSFNodesContext(ctx context.Context, request *UpdateDSFNodesRequestType) (*UpdateDSFNodesResponseType, error) {
	response := new(UpdateDSFNodesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateDSFNodes(request *UpdateDSFNodesRequestType) (*UpdateDSFNodesResponseType, error) {
	return service.UpdateDSFNodesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetDSFNodesContext(ctx context.Context, request *GetDSFNodesRequestType) (*GetDSFNodesResponseType, error) {
	response := new(GetDSFNodesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetDSFNodes(request *GetDSFNodesRequestType) (*GetDSFNodesResponseType, error) {
	return service.GetDSFNodesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneDSFNodeContext(ctx context.Context, request *DeleteOneDSFNodeRequestType) (*DeleteOneDSFNodeResponseType, error) {
	response := new(DeleteOneDSFNodeResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneDSFNode(request *DeleteOneDSFNodeRequestType) (*DeleteOneDSFNodeResponseType, error) {
	return service.DeleteOneDSFNodeContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateDSFMonitorContext(ctx context.Context, request *CreateDSFMonitorRequestType) (*CreateDSFMonitorResponseType, error) {
	response := new(CreateDSFMonitorResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateDSFMonitor(request *CreateDSFMonitorRequestType) (*CreateDSFMonitorResponseType, error) {
	return service.CreateDSFMonitorContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateDSFMonitorContext(ctx context.Context, request *UpdateDSFMonitorRequestType) (*UpdateDSFMonitorResponseType, error) {
	response := new(UpdateDSFMonitorResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateDSFMonitor(request *UpdateDSFMonitorRequestType) (*UpdateDSFMonitorResponseType, error) {
	return service.UpdateDSFMonitorContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneDSFMonitorContext(ctx context.Context, request *GetOneDSFMonitorRequestType) (*GetOneDSFMonitorResponseType, error) {
	response := new(GetOneDSFMonitorResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneDSFMonitor(request *GetOneDSFMonitorRequestType) (*GetOneDSFMonitorResponseType, error) {
	return service.GetOneDSFMonitorContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetDSFMonitorsContext(ctx context.Context, request *GetDSFMonitorsRequestType) (*GetDSFMonitorsResponseType, error) {
	response := new(GetDSFMonitorsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetDSFMonitors(request *GetDSFMonitorsRequestType) (*GetDSFMonitorsResponseType, error) {
	return service.GetDSFMonitorsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneDSFMonitorContext(ctx context.Context, request *DeleteOneDSFMonitorRequestType) (*DeleteOneDSFMonitorResponseType, error) {
	response := new(DeleteOneDSFMonitorResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneDSFMonitor(request *DeleteOneDSFMonitorRequestType) (*DeleteOneDSFMonitorResponseType, error) {
	return service.DeleteOneDSFMonitorContext(
		context.Background(),
		request,
	)
}

func (service *dynect) AddDSFMonitorNotifierContext(ctx context.Context, request *AddDSFMonitorNotifierRequestType) (*AddDSFMonitorNotifierResponseType, error) {
	response := new(AddDSFMonitorNotifierResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) AddDSFMonitorNotifier(request *AddDSFMonitorNotifierRequestType) (*AddDSFMonitorNotifierResponseType, error) {
	return service.AddDSFMonitorNotifierContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetDSFMonitorSitesContext(ctx context.Context, request *GetDSFMonitorSitesRequestType) (*GetDSFMonitorSitesResponseType, error) {
	response := new(GetDSFMonitorSitesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetDSFMonitorSites(request *GetDSFMonitorSitesRequestType) (*GetDSFMonitorSitesResponseType, error) {
	return service.GetDSFMonitorSitesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateNotifierContext(ctx context.Context, request *CreateNotifierRequestType) (*CreateNotifierResponseType, error) {
	response := new(CreateNotifierResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateNotifier(request *CreateNotifierRequestType) (*CreateNotifierResponseType, error) {
	return service.CreateNotifierContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateNotifierContext(ctx context.Context, request *UpdateNotifierRequestType) (*UpdateNotifierResponseType, error) {
	response := new(UpdateNotifierResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateNotifier(request *UpdateNotifierRequestType) (*UpdateNotifierResponseType, error) {
	return service.UpdateNotifierContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneNotifierContext(ctx context.Context, request *GetOneNotifierRequestType) (*GetOneNotifierResponseType, error) {
	response := new(GetOneNotifierResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneNotifier(request *GetOneNotifierRequestType) (*GetOneNotifierResponseType, error) {
	return service.GetOneNotifierContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetNotifiersContext(ctx context.Context, request *GetNotifiersRequestType) (*GetNotifiersResponseType, error) {
	response := new(GetNotifiersResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetNotifiers(request *GetNotifiersRequestType) (*GetNotifiersResponseType, error) {
	return service.GetNotifiersContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneNotifierContext(ctx context.Context, request *DeleteOneNotifierRequestType) (*DeleteOneNotifierResponseType, error) {
	response := new(DeleteOneNotifierResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneNotifier(request *DeleteOneNotifierRequestType) (*DeleteOneNotifierResponseType, error) {
	return service.DeleteOneNotifierContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateConfigLimitContext(ctx context.Context, request *CreateConfigLimitRequestType) (*CreateConfigLimitResponseType, error) {
	response := new(CreateConfigLimitResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateConfigLimit(request *CreateConfigLimitRequestType) (*CreateConfigLimitResponseType, error) {
	return service.CreateConfigLimitContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneConfigLimitContext(ctx context.Context, request *GetOneConfigLimitRequestType) (*GetOneConfigLimitResponseType, error) {
	response := new(GetOneConfigLimitResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneConfigLimit(request *GetOneConfigLimitRequestType) (*GetOneConfigLimitResponseType, error) {
	return service.GetOneConfigLimitContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetConfigLimitsContext(ctx context.Context, request *GetConfigLimitsRequestType) (*GetConfigLimitsResponseType, error) {
	response := new(GetConfigLimitsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetConfigLimits(request *GetConfigLimitsRequestType) (*GetConfigLimitsResponseType, error) {
	return service.GetConfigLimitsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateConfigLimitContext(ctx context.Context, request *UpdateConfigLimitRequestType) (*UpdateConfigLimitResponseType, error) {
	response := new(UpdateConfigLimitResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateConfigLimit(request *UpdateConfigLimitRequestType) (*UpdateConfigLimitResponseType, error) {
	return service.UpdateConfigLimitContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneConfigLimitContext(ctx context.Context, request *DeleteOneConfigLimitRequestType) (*DeleteOneConfigLimitResponseType, error) {
	response := new(DeleteOneConfigLimitResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneConfigLimit(request *DeleteOneConfigLimitRequestType) (*DeleteOneConfigLimitResponseType, error) {
	return service.DeleteOneConfigLimitContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreatePermissionGroupContext(ctx context.Context, request *CreatePermissionGroupRequestType) (*CreatePermissionGroupResponseType, error) {
	response := new(CreatePermissionGroupResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreatePermissionGroup(request *CreatePermissionGroupRequestType) (*CreatePermissionGroupResponseType, error) {
	return service.CreatePermissionGroupContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOnePermissionGroupContext(ctx context.Context, request *GetOnePermissionGroupRequestType) (*GetOnePermissionGroupResponseType, error) {
	response := new(GetOnePermissionGroupResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOnePermissionGroup(request *GetOnePermissionGroupRequestType) (*GetOnePermissionGroupResponseType, error) {
	return service.GetOnePermissionGroupContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetPermissionGroupsContext(ctx context.Context, request *GetPermissionGroupsRequestType) (*GetPermissionGroupsResponseType, error) {
	response := new(GetPermissionGroupsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetPermissionGroups(request *GetPermissionGroupsRequestType) (*GetPermissionGroupsResponseType, error) {
	return service.GetPermissionGroupsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOnePermissionGroupContext(ctx context.Context, request *DeleteOnePermissionGroupRequestType) (*DeleteOnePermissionGroupResponseType, error) {
	response := new(DeleteOnePermissionGroupResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOnePermissionGroup(request *DeleteOnePermissionGroupRequestType) (*DeleteOnePermissionGroupResponseType, error) {
	return service.DeleteOnePermissionGroupContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdatePermissionGroupContext(ctx context.Context, request *UpdatePermissionGroupRequestType) (*UpdatePermissionGroupResponseType, error) {
	response := new(UpdatePermissionGroupResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdatePermissionGroup(request *UpdatePermissionGroupRequestType) (*UpdatePermissionGroupResponseType, error) {
	return service.UpdatePermissionGroupContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetCustomerPermissionsContext(ctx context.Context, request *GetCustomerPermissionsRequestType) (*GetCustomerPermissionsResponseType, error) {
	response := new(GetCustomerPermissionsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetCustomerPermissions(request *GetCustomerPermissionsRequestType) (*GetCustomerPermissionsResponseType, error) {
	return service.GetCustomerPermissionsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetUserPermissionsContext(ctx context.Context, request *GetUserPermissionsRequestType) (*GetUserPermissionsResponseType, error) {
	response := new(GetUserPermissionsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetUserPermissions(request *GetUserPermissionsRequestType) (*GetUserPermissionsResponseType, error) {
	return service.GetUserPermissionsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CheckPermissionsContext(ctx context.Context, request *CheckPermissionsRequestType) (*CheckPermissionsResponseType, error) {
	response := new(CheckPermissionsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CheckPermissions(request *CheckPermissionsRequestType) (*CheckPermissionsResponseType, error) {
	return service.CheckPermissionsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) AddPermissionGroupUsersContext(ctx context.Context, request *AddPermissionGroupUsersRequestType) (*AddPermissionGroupUsersResponseType, error) {
	response := new(AddPermissionGroupUsersResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) AddPermissionGroupUsers(request *AddPermissionGroupUsersRequestType) (*AddPermissionGroupUsersResponseType, error) {
	return service.AddPermissionGroupUsersContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SetPermissionGroupUsersContext(ctx context.Context, request *SetPermissionGroupUsersRequestType) (*SetPermissionGroupUsersResponseType, error) {
	response := new(SetPermissionGroupUsersResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SetPermissionGroupUsers(request *SetPermissionGroupUsersRequestType) (*SetPermissionGroupUsersResponseType, error) {
	return service.SetPermissionGroupUsersContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RemovePermissionGroupUsersContext(ctx context.Context, request *RemovePermissionGroupUsersRequestType) (*RemovePermissionGroupUsersResponseType, error) {
	response := new(RemovePermissionGroupUsersResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RemovePermissionGroupUsers(request *RemovePermissionGroupUsersRequestType) (*RemovePermissionGroupUsersResponseType, error) {
	return service.RemovePermissionGroupUsersContext(
		context.Background(),
		request,
	)
}

func (service *dynect) AddPermissionGroupSubgroupsContext(ctx context.Context, request *AddPermissionGroupSubgroupsRequestType) (*AddPermissionGroupSubgroupsResponseType, error) {
	response := new(AddPermissionGroupSubgroupsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) AddPermissionGroupSubgroups(request *AddPermissionGroupSubgroupsRequestType) (*AddPermissionGroupSubgroupsResponseType, error) {
	return service.AddPermissionGroupSubgroupsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SetPermissionGroupSubgroupsContext(ctx context.Context, request *SetPermissionGroupSubgroupsRequestType) (*SetPermissionGroupSubgroupsResponseType, error) {
	response := new(SetPermissionGroupSubgroupsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SetPermissionGroupSubgroups(request *SetPermissionGroupSubgroupsRequestType) (*SetPermissionGroupSubgroupsResponseType, error) {
	return service.SetPermissionGroupSubgroupsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RemovePermissionGroupSubgroupsContext(ctx context.Context, request *RemovePermissionGroupSubgroupsRequestType) (*RemovePermissionGroupSubgroupsResponseType, error) {
	response := new(RemovePermissionGroupSubgroupsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RemovePermissionGroupSubgroups(request *RemovePermissionGroupSubgroupsRequestType) (*RemovePermissionGroupSubgroupsResponseType, error) {
	return service.RemovePermissionGroupSubgroupsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) AddPermissionGroupPermissionsContext(ctx context.Context, request *AddPermissionGroupPermissionsRequestType) (*AddPermissionGroupPermissionsResponseType, error) {
	response := new(AddPermissionGroupPermissionsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) AddPermissionGroupPermissions(request *AddPermissionGroupPermissionsRequestType) (*AddPermissionGroupPermissionsResponseType, error) {
	return service.AddPermissionGroupPermissionsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SetPermissionGroupPermissionsContext(ctx context.Context, request *SetPermissionGroupPermissionsRequestType) (*SetPermissionGroupPermissionsResponseType, error) {
	response := new(SetPermissionGroupPermissionsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SetPermissionGroupPermissions(request *SetPermissionGroupPermissionsRequestType) (*SetPermissionGroupPermissionsResponseType, error) {
	return service.SetPermissionGroupPermissionsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RemovePermissionGroupPermissionsContext(ctx context.Context, request *RemovePermissionGroupPermissionsRequestType) (*RemovePermissionGroupPermissionsResponseType, error) {
	response := new(RemovePermissionGroupPermissionsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RemovePermissionGroupPermissions(request *RemovePermissionGroupPermissionsRequestType) (*RemovePermissionGroupPermissionsResponseType, error) {
	return service.RemovePermissionGroupPermissionsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) AddPermissionGroupZonesContext(ctx context.Context, request *AddPermissionGroupZonesRequestType) (*AddPermissionGroupZonesResponseType, error) {
	response := new(AddPermissionGroupZonesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) AddPermissionGroupZones(request *AddPermissionGroupZonesRequestType) (*AddPermissionGroupZonesResponseType, error) {
	return service.AddPermissionGroupZonesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SetPermissionGroupZonesContext(ctx context.Context, request *SetPermissionGroupZonesRequestType) (*SetPermissionGroupZonesResponseType, error) {
	response := new(SetPermissionGroupZonesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SetPermissionGroupZones(request *SetPermissionGroupZonesRequestType) (*SetPermissionGroupZonesResponseType, error) {
	return service.SetPermissionGroupZonesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RemovePermissionGroupZonesContext(ctx context.Context, request *RemovePermissionGroupZonesRequestType) (*RemovePermissionGroupZonesResponseType, error) {
	response := new(RemovePermissionGroupZonesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RemovePermissionGroupZones(request *RemovePermissionGroupZonesRequestType) (*RemovePermissionGroupZonesResponseType, error) {
	return service.RemovePermissionGroupZonesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) AddUserGroupsContext(ctx context.Context, request *AddUserGroupsRequestType) (*AddUserGroupsResponseType, error) {
	response := new(AddUserGroupsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) AddUserGroups(request *AddUserGroupsRequestType) (*AddUserGroupsResponseType, error) {
	return service.AddUserGroupsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SetUserGroupsContext(ctx context.Context, request *SetUserGroupsRequestType) (*SetUserGroupsResponseType, error) {
	response := new(SetUserGroupsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SetUserGroups(request *SetUserGroupsRequestType) (*SetUserGroupsResponseType, error) {
	return service.SetUserGroupsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RemoveUserGroupsContext(ctx context.Context, request *RemoveUserGroupsRequestType) (*RemoveUserGroupsResponseType, error) {
	response := new(RemoveUserGroupsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RemoveUserGroups(request *RemoveUserGroupsRequestType) (*RemoveUserGroupsResponseType, error) {
	return service.RemoveUserGroupsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) AddUserZonesContext(ctx context.Context, request *AddUserZonesRequestType) (*AddUserZonesResponseType, error) {
	response := new(AddUserZonesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) AddUserZones(request *AddUserZonesRequestType) (*AddUserZonesResponseType, error) {
	return service.AddUserZonesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SetUserZonesContext(ctx context.Context, request *SetUserZonesRequestType) (*SetUserZonesResponseType, error) {
	response := new(SetUserZonesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SetUserZones(request *SetUserZonesRequestType) (*SetUserZonesResponseType, error) {
	return service.SetUserZonesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RemoveUserZonesContext(ctx context.Context, request *RemoveUserZonesRequestType) (*RemoveUserZonesResponseType, error) {
	response := new(RemoveUserZonesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RemoveUserZones(request *RemoveUserZonesRequestType) (*RemoveUserZonesResponseType, error) {
	return service.RemoveUserZonesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) AddUserPermissionsContext(ctx context.Context, request *AddUserPermissionsRequestType) (*AddUserPermissionsResponseType, error) {
	response := new(AddUserPermissionsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) AddUserPermissions(request *AddUserPermissionsRequestType) (*AddUserPermissionsResponseType, error) {
	return service.AddUserPermissionsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SetUserPermissionsContext(ctx context.Context, request *SetUserPermissionsRequestType) (*SetUserPermissionsResponseType, error) {
	response := new(SetUserPermissionsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SetUserPermissions(request *SetUserPermissionsRequestType) (*SetUserPermissionsResponseType, error) {
	return service.SetUserPermissionsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RemoveUserPermissionsContext(ctx context.Context, request *RemoveUserPermissionsRequestType) (*RemoveUserPermissionsResponseType, error) {
	response := new(RemoveUserPermissionsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RemoveUserPermissions(request *RemoveUserPermissionsRequestType) (*RemoveUserPermissionsResponseType, error) {
	return service.RemoveUserPermissionsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) AddUserForbidsContext(ctx context.Context, request *AddUserForbidsRequestType) (*AddUserForbidsResponseType, error) {
	response := new(AddUserForbidsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) AddUserForbids(request *AddUserForbidsRequestType) (*AddUserForbidsResponseType, error) {
	return service.AddUserForbidsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SetUserForbidsContext(ctx context.Context, request *SetUserForbidsRequestType) (*SetUserForbidsResponseType, error) {
	response := new(SetUserForbidsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SetUserForbids(request *SetUserForbidsRequestType) (*SetUserForbidsResponseType, error) {
	return service.SetUserForbidsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RemoveUserForbidsContext(ctx context.Context, request *RemoveUserForbidsRequestType) (*RemoveUserForbidsResponseType, error) {
	response := new(RemoveUserForbidsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RemoveUserForbids(request *RemoveUserForbidsRequestType) (*RemoveUserForbidsResponseType, error) {
	return service.RemoveUserForbidsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) AddCustomerPermissionsContext(ctx context.Context, request *AddCustomerPermissionsRequestType) (*AddCustomerPermissionsResponseType, error) {
	response := new(AddCustomerPermissionsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) AddCustomerPermissions(request *AddCustomerPermissionsRequestType) (*AddCustomerPermissionsResponseType, error) {
	return service.AddCustomerPermissionsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SetCustomerPermissionsContext(ctx context.Context, request *SetCustomerPermissionsRequestType) (*SetCustomerPermissionsResponseType, error) {
	response := new(SetCustomerPermissionsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SetCustomerPermissions(request *SetCustomerPermissionsRequestType) (*SetCustomerPermissionsResponseType, error) {
	return service.SetCustomerPermissionsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RemoveCustomerPermissionsContext(ctx context.Context, request *RemoveCustomerPermissionsRequestType) (*RemoveCustomerPermissionsResponseType, error) {
	response := new(RemoveCustomerPermissionsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RemoveCustomerPermissions(request *RemoveCustomerPermissionsRequestType) (*RemoveCustomerPermissionsResponseType, error) {
	return service.RemoveCustomerPermissionsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) AddCustomerForbidsContext(ctx context.Context, request *AddCustomerForbidsRequestType) (*AddCustomerForbidsResponseType, error) {
	response := new(AddCustomerForbidsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) AddCustomerForbids(request *AddCustomerForbidsRequestType) (*AddCustomerForbidsResponseType, error) {
	return service.AddCustomerForbidsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SetCustomerForbidsContext(ctx context.Context, request *SetCustomerForbidsRequestType) (*SetCustomerForbidsResponseType, error) {
	response := new(SetCustomerForbidsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SetCustomerForbids(request *SetCustomerForbidsRequestType) (*SetCustomerForbidsResponseType, error) {
	return service.SetCustomerForbidsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RemoveCustomerForbidsContext(ctx context.Context, request *RemoveCustomerForbidsRequestType) (*RemoveCustomerForbidsResponseType, error) {
	response := new(RemoveCustomerForbidsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RemoveCustomerForbids(request *RemoveCustomerForbidsRequestType) (*RemoveCustomerForbidsResponseType, error) {
	return service.RemoveCustomerForbidsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetHostStatsFlagsContext(ctx context.Context, request *GetHostStatsFlagsRequestType) (*GetHostStatsFlagsResponseType, error) {
	response := new(GetHostStatsFlagsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetHostStatsFlags(request *GetHostStatsFlagsRequestType) (*GetHostStatsFlagsResponseType, error) {
	return service.GetHostStatsFlagsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SetHostStatsFlagsContext(ctx context.Context, request *SetHostStatsFlagsRequestType) (*SetHostStatsFlagsResponseType, error) {
	response := new(SetHostStatsFlagsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SetHostStatsFlags(request *SetHostStatsFlagsRequestType) (*SetHostStatsFlagsResponseType, error) {
	return service.SetHostStatsFlagsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateTSIGKeyContext(ctx context.Context, request *CreateTSIGKeyRequestType) (*CreateTSIGKeyResponseType, error) {
	response := new(CreateTSIGKeyResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateTSIGKey(request *CreateTSIGKeyRequestType) (*CreateTSIGKeyResponseType, error) {
	return service.CreateTSIGKeyContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneTSIGKeyContext(ctx context.Context, request *GetOneTSIGKeyRequestType) (*GetOneTSIGKeyResponseType, error) {
	response := new(GetOneTSIGKeyResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneTSIGKey(request *GetOneTSIGKeyRequestType) (*GetOneTSIGKeyResponseType, error) {
	return service.GetOneTSIGKeyContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetTSIGKeysContext(ctx context.Context, request *GetTSIGKeysRequestType) (*GetTSIGKeysResponseType, error) {
	response := new(GetTSIGKeysResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetTSIGKeys(request *GetTSIGKeysRequestType) (*GetTSIGKeysResponseType, error) {
	return service.GetTSIGKeysContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateTSIGKeyContext(ctx context.Context, request *UpdateTSIGKeyRequestType) (*UpdateTSIGKeyResponseType, error) {
	response := new(UpdateTSIGKeyResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateTSIGKey(request *UpdateTSIGKeyRequestType) (*UpdateTSIGKeyResponseType, error) {
	return service.UpdateTSIGKeyContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneTSIGKeyContext(ctx context.Context, request *DeleteOneTSIGKeyRequestType) (*DeleteOneTSIGKeyResponseType, error) {
	response := new(DeleteOneTSIGKeyResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneTSIGKey(request *DeleteOneTSIGKeyRequestType) (*DeleteOneTSIGKeyResponseType, error) {
	return service.DeleteOneTSIGKeyContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateZoneContext(ctx context.Context, request *CreateZoneRequestType) (*CreateZoneResponseType, error) {
	response := new(CreateZoneResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateZone(request *CreateZoneRequestType) (*CreateZoneResponseType, error) {
	return service.CreateZoneContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneZoneContext(ctx context.Context, request *GetOneZoneRequestType) (*GetOneZoneResponseType, error) {
	response := new(GetOneZoneResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneZone(request *GetOneZoneRequestType) (*GetOneZoneResponseType, error) {
	return service.GetOneZoneContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetZonesContext(ctx context.Context, request *GetZonesRequestType) (*GetZonesResponseType, error) {
	response := new(GetZonesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetZones(request *GetZonesRequestType) (*GetZonesResponseType, error) {
	return service.GetZonesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneZoneContext(ctx context.Context, request *DeleteOneZoneRequestType) (*DeleteOneZoneResponseType, error) {
	response := new(DeleteOneZoneResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneZone(request *DeleteOneZoneRequestType) (*DeleteOneZoneResponseType, error) {
	return service.DeleteOneZoneContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateSecondaryZoneContext(ctx context.Context, request *CreateSecondaryZoneRequestType) (*CreateSecondaryZoneResponseType, error) {
	response := new(CreateSecondaryZoneResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateSecondaryZone(request *CreateSecondaryZoneRequestType) (*CreateSecondaryZoneResponseType, error) {
	return service.CreateSecondaryZoneContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateSecondaryContext(ctx context.Context, request *UpdateSecondaryRequestType) (*UpdateSecondaryResponseType, error) {
	response := new(UpdateSecondaryResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateSecondary(request *UpdateSecondaryRequestType) (*UpdateSecondaryResponseType, error) {
	return service.UpdateSecondaryContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ActivateSecondaryContext(ctx context.Context, request *ActivateSecondaryRequestType) (*ActivateSecondaryResponseType, error) {
	response := new(ActivateSecondaryResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ActivateSecondary(request *ActivateSecondaryRequestType) (*ActivateSecondaryResponseType, error) {
	return service.ActivateSecondaryContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeactivateSecondaryContext(ctx context.Context, request *DeactivateSecondaryRequestType) (*DeactivateSecondaryResponseType, error) {
	response := new(DeactivateSecondaryResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeactivateSecondary(request *DeactivateSecondaryRequestType) (*DeactivateSecondaryResponseType, error) {
	return service.DeactivateSecondaryContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RetransferSecondaryContext(ctx context.Context, request *RetransferSecondaryRequestType) (*RetransferSecondaryResponseType, error) {
	response := new(RetransferSecondaryResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RetransferSecondary(request *RetransferSecondaryRequestType) (*RetransferSecondaryResponseType, error) {
	return service.RetransferSecondaryContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneSecondaryContext(ctx context.Context, request *GetOneSecondaryRequestType) (*GetOneSecondaryResponseType, error) {
	response := new(GetOneSecondaryResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneSecondary(request *GetOneSecondaryRequestType) (*GetOneSecondaryResponseType, error) {
	return service.GetOneSecondaryContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetSecondariesContext(ctx context.Context, request *GetSecondariesRequestType) (*GetSecondariesResponseType, error) {
	response := new(GetSecondariesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetSecondaries(request *GetSecondariesRequestType) (*GetSecondariesResponseType, error) {
	return service.GetSecondariesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetZoneApexContext(ctx context.Context, request *GetZoneApexRequestType) (*GetZoneApexResponseType, error) {
	response := new(GetZoneApexResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetZoneApex(request *GetZoneApexRequestType) (*GetZoneApexResponseType, error) {
	return service.GetZoneApexContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateARecordContext(ctx context.Context, request *CreateARecordRequestType) (*CreateARecordResponseType, error) {
	response := new(CreateARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateARecord(request *CreateARecordRequestType) (*CreateARecordResponseType, error) {
	return service.CreateARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneARecordContext(ctx context.Context, request *GetOneARecordRequestType) (*GetOneARecordResponseType, error) {
	response := new(GetOneARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneARecord(request *GetOneARecordRequestType) (*GetOneARecordResponseType, error) {
	return service.GetOneARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetARecordsContext(ctx context.Context, request *GetARecordsRequestType) (*GetARecordsResponseType, error) {
	response := new(GetARecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetARecords(request *GetARecordsRequestType) (*GetARecordsResponseType, error) {
	return service.GetARecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateARecordContext(ctx context.Context, request *UpdateARecordRequestType) (*UpdateARecordResponseType, error) {
	response := new(UpdateARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateARecord(request *UpdateARecordRequestType) (*UpdateARecordResponseType, error) {
	return service.UpdateARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteARecordsContext(ctx context.Context, request *DeleteARecordsRequestType) (*DeleteARecordsResponseType, error) {
	response := new(DeleteARecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteARecords(request *DeleteARecordsRequestType) (*DeleteARecordsResponseType, error) {
	return service.DeleteARecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneARecordContext(ctx context.Context, request *DeleteOneARecordRequestType) (*DeleteOneARecordResponseType, error) {
	response := new(DeleteOneARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneARecord(request *DeleteOneARecordRequestType) (*DeleteOneARecordResponseType, error) {
	return service.DeleteOneARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateAAAARecordContext(ctx context.Context, request *CreateAAAARecordRequestType) (*CreateAAAARecordResponseType, error) {
	response := new(CreateAAAARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateAAAARecord(request *CreateAAAARecordRequestType) (*CreateAAAARecordResponseType, error) {
	return service.CreateAAAARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneAAAARecordContext(ctx context.Context, request *GetOneAAAARecordRequestType) (*GetOneAAAARecordResponseType, error) {
	response := new(GetOneAAAARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneAAAARecord(request *GetOneAAAARecordRequestType) (*GetOneAAAARecordResponseType, error) {
	return service.GetOneAAAARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetAAAARecordsContext(ctx context.Context, request *GetAAAARecordsRequestType) (*GetAAAARecordsResponseType, error) {
	response := new(GetAAAARecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetAAAARecords(request *GetAAAARecordsRequestType) (*GetAAAARecordsResponseType, error) {
	return service.GetAAAARecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateAAAARecordContext(ctx context.Context, request *UpdateAAAARecordRequestType) (*UpdateAAAARecordResponseType, error) {
	response := new(UpdateAAAARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateAAAARecord(request *UpdateAAAARecordRequestType) (*UpdateAAAARecordResponseType, error) {
	return service.UpdateAAAARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteAAAARecordsContext(ctx context.Context, request *DeleteAAAARecordsRequestType) (*DeleteAAAARecordsResponseType, error) {
	response := new(DeleteAAAARecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteAAAARecords(request *DeleteAAAARecordsRequestType) (*DeleteAAAARecordsResponseType, error) {
	return service.DeleteAAAARecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneAAAARecordContext(ctx context.Context, request *DeleteOneAAAARecordRequestType) (*DeleteOneAAAARecordResponseType, error) {
	response := new(DeleteOneAAAARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneAAAARecord(request *DeleteOneAAAARecordRequestType) (*DeleteOneAAAARecordResponseType, error) {
	return service.DeleteOneAAAARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateALIASRecordContext(ctx context.Context, request *CreateALIASRecordRequestType) (*CreateALIASRecordResponseType, error) {
	response := new(CreateALIASRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateALIASRecord(request *CreateALIASRecordRequestType) (*CreateALIASRecordResponseType, error) {
	return service.CreateALIASRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneALIASRecordContext(ctx context.Context, request *GetOneALIASRecordRequestType) (*GetOneALIASRecordResponseType, error) {
	response := new(GetOneALIASRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneALIASRecord(request *GetOneALIASRecordRequestType) (*GetOneALIASRecordResponseType, error) {
	return service.GetOneALIASRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetALIASRecordsContext(ctx context.Context, request *GetALIASRecordsRequestType) (*GetALIASRecordsResponseType, error) {
	response := new(GetALIASRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetALIASRecords(request *GetALIASRecordsRequestType) (*GetALIASRecordsResponseType, error) {
	return service.GetALIASRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateALIASRecordContext(ctx context.Context, request *UpdateALIASRecordRequestType) (*UpdateALIASRecordResponseType, error) {
	response := new(UpdateALIASRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateALIASRecord(request *UpdateALIASRecordRequestType) (*UpdateALIASRecordResponseType, error) {
	return service.UpdateALIASRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteALIASRecordsContext(ctx context.Context, request *DeleteALIASRecordsRequestType) (*DeleteALIASRecordsResponseType, error) {
	response := new(DeleteALIASRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteALIASRecords(request *DeleteALIASRecordsRequestType) (*DeleteALIASRecordsResponseType, error) {
	return service.DeleteALIASRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneALIASRecordContext(ctx context.Context, request *DeleteOneALIASRecordRequestType) (*DeleteOneALIASRecordResponseType, error) {
	response := new(DeleteOneALIASRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneALIASRecord(request *DeleteOneALIASRecordRequestType) (*DeleteOneALIASRecordResponseType, error) {
	return service.DeleteOneALIASRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateCAARecordContext(ctx context.Context, request *CreateCAARecordRequestType) (*CreateCAARecordResponseType, error) {
	response := new(CreateCAARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateCAARecord(request *CreateCAARecordRequestType) (*CreateCAARecordResponseType, error) {
	return service.CreateCAARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneCAARecordContext(ctx context.Context, request *GetOneCAARecordRequestType) (*GetOneCAARecordResponseType, error) {
	response := new(GetOneCAARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneCAARecord(request *GetOneCAARecordRequestType) (*GetOneCAARecordResponseType, error) {
	return service.GetOneCAARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetCAARecordsContext(ctx context.Context, request *GetCAARecordsRequestType) (*GetCAARecordsResponseType, error) {
	response := new(GetCAARecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetCAARecords(request *GetCAARecordsRequestType) (*GetCAARecordsResponseType, error) {
	return service.GetCAARecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateCAARecordContext(ctx context.Context, request *UpdateCAARecordRequestType) (*UpdateCAARecordResponseType, error) {
	response := new(UpdateCAARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateCAARecord(request *UpdateCAARecordRequestType) (*UpdateCAARecordResponseType, error) {
	return service.UpdateCAARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteCAARecordsContext(ctx context.Context, request *DeleteCAARecordsRequestType) (*DeleteCAARecordsResponseType, error) {
	response := new(DeleteCAARecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteCAARecords(request *DeleteCAARecordsRequestType) (*DeleteCAARecordsResponseType, error) {
	return service.DeleteCAARecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneCAARecordContext(ctx context.Context, request *DeleteOneCAARecordRequestType) (*DeleteOneCAARecordResponseType, error) {
	response := new(DeleteOneCAARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneCAARecord(request *DeleteOneCAARecordRequestType) (*DeleteOneCAARecordResponseType, error) {
	return service.DeleteOneCAARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateCDNSKEYRecordContext(ctx context.Context, request *CreateCDNSKEYRecordRequestType) (*CreateCDNSKEYRecordResponseType, error) {
	response := new(CreateCDNSKEYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateCDNSKEYRecord(request *CreateCDNSKEYRecordRequestType) (*CreateCDNSKEYRecordResponseType, error) {
	return service.CreateCDNSKEYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneCDNSKEYRecordContext(ctx context.Context, request *GetOneCDNSKEYRecordRequestType) (*GetOneCDNSKEYRecordResponseType, error) {
	response := new(GetOneCDNSKEYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneCDNSKEYRecord(request *GetOneCDNSKEYRecordRequestType) (*GetOneCDNSKEYRecordResponseType, error) {
	return service.GetOneCDNSKEYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetCDNSKEYRecordsContext(ctx context.Context, request *GetCDNSKEYRecordsRequestType) (*GetCDNSKEYRecordsResponseType, error) {
	response := new(GetCDNSKEYRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetCDNSKEYRecords(request *GetCDNSKEYRecordsRequestType) (*GetCDNSKEYRecordsResponseType, error) {
	return service.GetCDNSKEYRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateCDNSKEYRecordContext(ctx context.Context, request *UpdateCDNSKEYRecordRequestType) (*UpdateCDNSKEYRecordResponseType, error) {
	response := new(UpdateCDNSKEYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateCDNSKEYRecord(request *UpdateCDNSKEYRecordRequestType) (*UpdateCDNSKEYRecordResponseType, error) {
	return service.UpdateCDNSKEYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteCDNSKEYRecordsContext(ctx context.Context, request *DeleteCDNSKEYRecordsRequestType) (*DeleteCDNSKEYRecordsResponseType, error) {
	response := new(DeleteCDNSKEYRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteCDNSKEYRecords(request *DeleteCDNSKEYRecordsRequestType) (*DeleteCDNSKEYRecordsResponseType, error) {
	return service.DeleteCDNSKEYRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneCDNSKEYRecordContext(ctx context.Context, request *DeleteOneCDNSKEYRecordRequestType) (*DeleteOneCDNSKEYRecordResponseType, error) {
	response := new(DeleteOneCDNSKEYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneCDNSKEYRecord(request *DeleteOneCDNSKEYRecordRequestType) (*DeleteOneCDNSKEYRecordResponseType, error) {
	return service.DeleteOneCDNSKEYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateCDSRecordContext(ctx context.Context, request *CreateCDSRecordRequestType) (*CreateCDSRecordResponseType, error) {
	response := new(CreateCDSRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateCDSRecord(request *CreateCDSRecordRequestType) (*CreateCDSRecordResponseType, error) {
	return service.CreateCDSRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneCDSRecordContext(ctx context.Context, request *GetOneCDSRecordRequestType) (*GetOneCDSRecordResponseType, error) {
	response := new(GetOneCDSRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneCDSRecord(request *GetOneCDSRecordRequestType) (*GetOneCDSRecordResponseType, error) {
	return service.GetOneCDSRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetCDSRecordsContext(ctx context.Context, request *GetCDSRecordsRequestType) (*GetCDSRecordsResponseType, error) {
	response := new(GetCDSRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetCDSRecords(request *GetCDSRecordsRequestType) (*GetCDSRecordsResponseType, error) {
	return service.GetCDSRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateCDSRecordContext(ctx context.Context, request *UpdateCDSRecordRequestType) (*UpdateCDSRecordResponseType, error) {
	response := new(UpdateCDSRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateCDSRecord(request *UpdateCDSRecordRequestType) (*UpdateCDSRecordResponseType, error) {
	return service.UpdateCDSRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteCDSRecordsContext(ctx context.Context, request *DeleteCDSRecordsRequestType) (*DeleteCDSRecordsResponseType, error) {
	response := new(DeleteCDSRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteCDSRecords(request *DeleteCDSRecordsRequestType) (*DeleteCDSRecordsResponseType, error) {
	return service.DeleteCDSRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneCDSRecordContext(ctx context.Context, request *DeleteOneCDSRecordRequestType) (*DeleteOneCDSRecordResponseType, error) {
	response := new(DeleteOneCDSRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneCDSRecord(request *DeleteOneCDSRecordRequestType) (*DeleteOneCDSRecordResponseType, error) {
	return service.DeleteOneCDSRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateCERTRecordContext(ctx context.Context, request *CreateCERTRecordRequestType) (*CreateCERTRecordResponseType, error) {
	response := new(CreateCERTRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateCERTRecord(request *CreateCERTRecordRequestType) (*CreateCERTRecordResponseType, error) {
	return service.CreateCERTRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneCERTRecordContext(ctx context.Context, request *GetOneCERTRecordRequestType) (*GetOneCERTRecordResponseType, error) {
	response := new(GetOneCERTRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneCERTRecord(request *GetOneCERTRecordRequestType) (*GetOneCERTRecordResponseType, error) {
	return service.GetOneCERTRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetCERTRecordsContext(ctx context.Context, request *GetCERTRecordsRequestType) (*GetCERTRecordsResponseType, error) {
	response := new(GetCERTRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetCERTRecords(request *GetCERTRecordsRequestType) (*GetCERTRecordsResponseType, error) {
	return service.GetCERTRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateCERTRecordContext(ctx context.Context, request *UpdateCERTRecordRequestType) (*UpdateCERTRecordResponseType, error) {
	response := new(UpdateCERTRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateCERTRecord(request *UpdateCERTRecordRequestType) (*UpdateCERTRecordResponseType, error) {
	return service.UpdateCERTRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteCERTRecordsContext(ctx context.Context, request *DeleteCERTRecordsRequestType) (*DeleteCERTRecordsResponseType, error) {
	response := new(DeleteCERTRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteCERTRecords(request *DeleteCERTRecordsRequestType) (*DeleteCERTRecordsResponseType, error) {
	return service.DeleteCERTRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneCERTRecordContext(ctx context.Context, request *DeleteOneCERTRecordRequestType) (*DeleteOneCERTRecordResponseType, error) {
	response := new(DeleteOneCERTRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneCERTRecord(request *DeleteOneCERTRecordRequestType) (*DeleteOneCERTRecordResponseType, error) {
	return service.DeleteOneCERTRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateCNAMERecordContext(ctx context.Context, request *CreateCNAMERecordRequestType) (*CreateCNAMERecordResponseType, error) {
	response := new(CreateCNAMERecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateCNAMERecord(request *CreateCNAMERecordRequestType) (*CreateCNAMERecordResponseType, error) {
	return service.CreateCNAMERecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneCNAMERecordContext(ctx context.Context, request *GetOneCNAMERecordRequestType) (*GetOneCNAMERecordResponseType, error) {
	response := new(GetOneCNAMERecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneCNAMERecord(request *GetOneCNAMERecordRequestType) (*GetOneCNAMERecordResponseType, error) {
	return service.GetOneCNAMERecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetCNAMERecordsContext(ctx context.Context, request *GetCNAMERecordsRequestType) (*GetCNAMERecordsResponseType, error) {
	response := new(GetCNAMERecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetCNAMERecords(request *GetCNAMERecordsRequestType) (*GetCNAMERecordsResponseType, error) {
	return service.GetCNAMERecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateCNAMERecordContext(ctx context.Context, request *UpdateCNAMERecordRequestType) (*UpdateCNAMERecordResponseType, error) {
	response := new(UpdateCNAMERecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateCNAMERecord(request *UpdateCNAMERecordRequestType) (*UpdateCNAMERecordResponseType, error) {
	return service.UpdateCNAMERecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteCNAMERecordsContext(ctx context.Context, request *DeleteCNAMERecordsRequestType) (*DeleteCNAMERecordsResponseType, error) {
	response := new(DeleteCNAMERecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteCNAMERecords(request *DeleteCNAMERecordsRequestType) (*DeleteCNAMERecordsResponseType, error) {
	return service.DeleteCNAMERecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneCNAMERecordContext(ctx context.Context, request *DeleteOneCNAMERecordRequestType) (*DeleteOneCNAMERecordResponseType, error) {
	response := new(DeleteOneCNAMERecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneCNAMERecord(request *DeleteOneCNAMERecordRequestType) (*DeleteOneCNAMERecordResponseType, error) {
	return service.DeleteOneCNAMERecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateCSYNCRecordContext(ctx context.Context, request *CreateCSYNCRecordRequestType) (*CreateCSYNCRecordResponseType, error) {
	response := new(CreateCSYNCRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateCSYNCRecord(request *CreateCSYNCRecordRequestType) (*CreateCSYNCRecordResponseType, error) {
	return service.CreateCSYNCRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneCSYNCRecordContext(ctx context.Context, request *GetOneCSYNCRecordRequestType) (*GetOneCSYNCRecordResponseType, error) {
	response := new(GetOneCSYNCRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneCSYNCRecord(request *GetOneCSYNCRecordRequestType) (*GetOneCSYNCRecordResponseType, error) {
	return service.GetOneCSYNCRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetCSYNCRecordsContext(ctx context.Context, request *GetCSYNCRecordsRequestType) (*GetCSYNCRecordsResponseType, error) {
	response := new(GetCSYNCRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetCSYNCRecords(request *GetCSYNCRecordsRequestType) (*GetCSYNCRecordsResponseType, error) {
	return service.GetCSYNCRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateCSYNCRecordContext(ctx context.Context, request *UpdateCSYNCRecordRequestType) (*UpdateCSYNCRecordResponseType, error) {
	response := new(UpdateCSYNCRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateCSYNCRecord(request *UpdateCSYNCRecordRequestType) (*UpdateCSYNCRecordResponseType, error) {
	return service.UpdateCSYNCRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteCSYNCRecordsContext(ctx context.Context, request *DeleteCSYNCRecordsRequestType) (*DeleteCSYNCRecordsResponseType, error) {
	response := new(DeleteCSYNCRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteCSYNCRecords(request *DeleteCSYNCRecordsRequestType) (*DeleteCSYNCRecordsResponseType, error) {
	return service.DeleteCSYNCRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneCSYNCRecordContext(ctx context.Context, request *DeleteOneCSYNCRecordRequestType) (*DeleteOneCSYNCRecordResponseType, error) {
	response := new(DeleteOneCSYNCRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneCSYNCRecord(request *DeleteOneCSYNCRecordRequestType) (*DeleteOneCSYNCRecordResponseType, error) {
	return service.DeleteOneCSYNCRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateDHCIDRecordContext(ctx context.Context, request *CreateDHCIDRecordRequestType) (*CreateDHCIDRecordResponseType, error) {
	response := new(CreateDHCIDRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateDHCIDRecord(request *CreateDHCIDRecordRequestType) (*CreateDHCIDRecordResponseType, error) {
	return service.CreateDHCIDRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneDHCIDRecordContext(ctx context.Context, request *GetOneDHCIDRecordRequestType) (*GetOneDHCIDRecordResponseType, error) {
	response := new(GetOneDHCIDRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneDHCIDRecord(request *GetOneDHCIDRecordRequestType) (*GetOneDHCIDRecordResponseType, error) {
	return service.GetOneDHCIDRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetDHCIDRecordsContext(ctx context.Context, request *GetDHCIDRecordsRequestType) (*GetDHCIDRecordsResponseType, error) {
	response := new(GetDHCIDRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetDHCIDRecords(request *GetDHCIDRecordsRequestType) (*GetDHCIDRecordsResponseType, error) {
	return service.GetDHCIDRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateDHCIDRecordContext(ctx context.Context, request *UpdateDHCIDRecordRequestType) (*UpdateDHCIDRecordResponseType, error) {
	response := new(UpdateDHCIDRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateDHCIDRecord(request *UpdateDHCIDRecordRequestType) (*UpdateDHCIDRecordResponseType, error) {
	return service.UpdateDHCIDRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteDHCIDRecordsContext(ctx context.Context, request *DeleteDHCIDRecordsRequestType) (*DeleteDHCIDRecordsResponseType, error) {
	response := new(DeleteDHCIDRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteDHCIDRecords(request *DeleteDHCIDRecordsRequestType) (*DeleteDHCIDRecordsResponseType, error) {
	return service.DeleteDHCIDRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneDHCIDRecordContext(ctx context.Context, request *DeleteOneDHCIDRecordRequestType) (*DeleteOneDHCIDRecordResponseType, error) {
	response := new(DeleteOneDHCIDRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneDHCIDRecord(request *DeleteOneDHCIDRecordRequestType) (*DeleteOneDHCIDRecordResponseType, error) {
	return service.DeleteOneDHCIDRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateDNAMERecordContext(ctx context.Context, request *CreateDNAMERecordRequestType) (*CreateDNAMERecordResponseType, error) {
	response := new(CreateDNAMERecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateDNAMERecord(request *CreateDNAMERecordRequestType) (*CreateDNAMERecordResponseType, error) {
	return service.CreateDNAMERecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneDNAMERecordContext(ctx context.Context, request *GetOneDNAMERecordRequestType) (*GetOneDNAMERecordResponseType, error) {
	response := new(GetOneDNAMERecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneDNAMERecord(request *GetOneDNAMERecordRequestType) (*GetOneDNAMERecordResponseType, error) {
	return service.GetOneDNAMERecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetDNAMERecordsContext(ctx context.Context, request *GetDNAMERecordsRequestType) (*GetDNAMERecordsResponseType, error) {
	response := new(GetDNAMERecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetDNAMERecords(request *GetDNAMERecordsRequestType) (*GetDNAMERecordsResponseType, error) {
	return service.GetDNAMERecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateDNAMERecordContext(ctx context.Context, request *UpdateDNAMERecordRequestType) (*UpdateDNAMERecordResponseType, error) {
	response := new(UpdateDNAMERecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateDNAMERecord(request *UpdateDNAMERecordRequestType) (*UpdateDNAMERecordResponseType, error) {
	return service.UpdateDNAMERecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteDNAMERecordsContext(ctx context.Context, request *DeleteDNAMERecordsRequestType) (*DeleteDNAMERecordsResponseType, error) {
	response := new(DeleteDNAMERecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteDNAMERecords(request *DeleteDNAMERecordsRequestType) (*DeleteDNAMERecordsResponseType, error) {
	return service.DeleteDNAMERecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneDNAMERecordContext(ctx context.Context, request *DeleteOneDNAMERecordRequestType) (*DeleteOneDNAMERecordResponseType, error) {
	response := new(DeleteOneDNAMERecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneDNAMERecord(request *DeleteOneDNAMERecordRequestType) (*DeleteOneDNAMERecordResponseType, error) {
	return service.DeleteOneDNAMERecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateDNSKEYRecordContext(ctx context.Context, request *CreateDNSKEYRecordRequestType) (*CreateDNSKEYRecordResponseType, error) {
	response := new(CreateDNSKEYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateDNSKEYRecord(request *CreateDNSKEYRecordRequestType) (*CreateDNSKEYRecordResponseType, error) {
	return service.CreateDNSKEYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneDNSKEYRecordContext(ctx context.Context, request *GetOneDNSKEYRecordRequestType) (*GetOneDNSKEYRecordResponseType, error) {
	response := new(GetOneDNSKEYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneDNSKEYRecord(request *GetOneDNSKEYRecordRequestType) (*GetOneDNSKEYRecordResponseType, error) {
	return service.GetOneDNSKEYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetDNSKEYRecordsContext(ctx context.Context, request *GetDNSKEYRecordsRequestType) (*GetDNSKEYRecordsResponseType, error) {
	response := new(GetDNSKEYRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetDNSKEYRecords(request *GetDNSKEYRecordsRequestType) (*GetDNSKEYRecordsResponseType, error) {
	return service.GetDNSKEYRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateDNSKEYRecordContext(ctx context.Context, request *UpdateDNSKEYRecordRequestType) (*UpdateDNSKEYRecordResponseType, error) {
	response := new(UpdateDNSKEYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateDNSKEYRecord(request *UpdateDNSKEYRecordRequestType) (*UpdateDNSKEYRecordResponseType, error) {
	return service.UpdateDNSKEYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteDNSKEYRecordsContext(ctx context.Context, request *DeleteDNSKEYRecordsRequestType) (*DeleteDNSKEYRecordsResponseType, error) {
	response := new(DeleteDNSKEYRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteDNSKEYRecords(request *DeleteDNSKEYRecordsRequestType) (*DeleteDNSKEYRecordsResponseType, error) {
	return service.DeleteDNSKEYRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneDNSKEYRecordContext(ctx context.Context, request *DeleteOneDNSKEYRecordRequestType) (*DeleteOneDNSKEYRecordResponseType, error) {
	response := new(DeleteOneDNSKEYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneDNSKEYRecord(request *DeleteOneDNSKEYRecordRequestType) (*DeleteOneDNSKEYRecordResponseType, error) {
	return service.DeleteOneDNSKEYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateDSRecordContext(ctx context.Context, request *CreateDSRecordRequestType) (*CreateDSRecordResponseType, error) {
	response := new(CreateDSRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateDSRecord(request *CreateDSRecordRequestType) (*CreateDSRecordResponseType, error) {
	return service.CreateDSRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneDSRecordContext(ctx context.Context, request *GetOneDSRecordRequestType) (*GetOneDSRecordResponseType, error) {
	response := new(GetOneDSRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneDSRecord(request *GetOneDSRecordRequestType) (*GetOneDSRecordResponseType, error) {
	return service.GetOneDSRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetDSRecordsContext(ctx context.Context, request *GetDSRecordsRequestType) (*GetDSRecordsResponseType, error) {
	response := new(GetDSRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetDSRecords(request *GetDSRecordsRequestType) (*GetDSRecordsResponseType, error) {
	return service.GetDSRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateDSRecordContext(ctx context.Context, request *UpdateDSRecordRequestType) (*UpdateDSRecordResponseType, error) {
	response := new(UpdateDSRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateDSRecord(request *UpdateDSRecordRequestType) (*UpdateDSRecordResponseType, error) {
	return service.UpdateDSRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteDSRecordsContext(ctx context.Context, request *DeleteDSRecordsRequestType) (*DeleteDSRecordsResponseType, error) {
	response := new(DeleteDSRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteDSRecords(request *DeleteDSRecordsRequestType) (*DeleteDSRecordsResponseType, error) {
	return service.DeleteDSRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneDSRecordContext(ctx context.Context, request *DeleteOneDSRecordRequestType) (*DeleteOneDSRecordResponseType, error) {
	response := new(DeleteOneDSRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneDSRecord(request *DeleteOneDSRecordRequestType) (*DeleteOneDSRecordResponseType, error) {
	return service.DeleteOneDSRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateIPSECKEYRecordContext(ctx context.Context, request *CreateIPSECKEYRecordRequestType) (*CreateIPSECKEYRecordResponseType, error) {
	response := new(CreateIPSECKEYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateIPSECKEYRecord(request *CreateIPSECKEYRecordRequestType) (*CreateIPSECKEYRecordResponseType, error) {
	return service.CreateIPSECKEYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneIPSECKEYRecordContext(ctx context.Context, request *GetOneIPSECKEYRecordRequestType) (*GetOneIPSECKEYRecordResponseType, error) {
	response := new(GetOneIPSECKEYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneIPSECKEYRecord(request *GetOneIPSECKEYRecordRequestType) (*GetOneIPSECKEYRecordResponseType, error) {
	return service.GetOneIPSECKEYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetIPSECKEYRecordsContext(ctx context.Context, request *GetIPSECKEYRecordsRequestType) (*GetIPSECKEYRecordsResponseType, error) {
	response := new(GetIPSECKEYRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetIPSECKEYRecords(request *GetIPSECKEYRecordsRequestType) (*GetIPSECKEYRecordsResponseType, error) {
	return service.GetIPSECKEYRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateIPSECKEYRecordContext(ctx context.Context, request *UpdateIPSECKEYRecordRequestType) (*UpdateIPSECKEYRecordResponseType, error) {
	response := new(UpdateIPSECKEYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateIPSECKEYRecord(request *UpdateIPSECKEYRecordRequestType) (*UpdateIPSECKEYRecordResponseType, error) {
	return service.UpdateIPSECKEYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteIPSECKEYRecordsContext(ctx context.Context, request *DeleteIPSECKEYRecordsRequestType) (*DeleteIPSECKEYRecordsResponseType, error) {
	response := new(DeleteIPSECKEYRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteIPSECKEYRecords(request *DeleteIPSECKEYRecordsRequestType) (*DeleteIPSECKEYRecordsResponseType, error) {
	return service.DeleteIPSECKEYRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneIPSECKEYRecordContext(ctx context.Context, request *DeleteOneIPSECKEYRecordRequestType) (*DeleteOneIPSECKEYRecordResponseType, error) {
	response := new(DeleteOneIPSECKEYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneIPSECKEYRecord(request *DeleteOneIPSECKEYRecordRequestType) (*DeleteOneIPSECKEYRecordResponseType, error) {
	return service.DeleteOneIPSECKEYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateKEYRecordContext(ctx context.Context, request *CreateKEYRecordRequestType) (*CreateKEYRecordResponseType, error) {
	response := new(CreateKEYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateKEYRecord(request *CreateKEYRecordRequestType) (*CreateKEYRecordResponseType, error) {
	return service.CreateKEYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneKEYRecordContext(ctx context.Context, request *GetOneKEYRecordRequestType) (*GetOneKEYRecordResponseType, error) {
	response := new(GetOneKEYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneKEYRecord(request *GetOneKEYRecordRequestType) (*GetOneKEYRecordResponseType, error) {
	return service.GetOneKEYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetKEYRecordsContext(ctx context.Context, request *GetKEYRecordsRequestType) (*GetKEYRecordsResponseType, error) {
	response := new(GetKEYRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetKEYRecords(request *GetKEYRecordsRequestType) (*GetKEYRecordsResponseType, error) {
	return service.GetKEYRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateKEYRecordContext(ctx context.Context, request *UpdateKEYRecordRequestType) (*UpdateKEYRecordResponseType, error) {
	response := new(UpdateKEYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateKEYRecord(request *UpdateKEYRecordRequestType) (*UpdateKEYRecordResponseType, error) {
	return service.UpdateKEYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteKEYRecordsContext(ctx context.Context, request *DeleteKEYRecordsRequestType) (*DeleteKEYRecordsResponseType, error) {
	response := new(DeleteKEYRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteKEYRecords(request *DeleteKEYRecordsRequestType) (*DeleteKEYRecordsResponseType, error) {
	return service.DeleteKEYRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneKEYRecordContext(ctx context.Context, request *DeleteOneKEYRecordRequestType) (*DeleteOneKEYRecordResponseType, error) {
	response := new(DeleteOneKEYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneKEYRecord(request *DeleteOneKEYRecordRequestType) (*DeleteOneKEYRecordResponseType, error) {
	return service.DeleteOneKEYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateKXRecordContext(ctx context.Context, request *CreateKXRecordRequestType) (*CreateKXRecordResponseType, error) {
	response := new(CreateKXRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateKXRecord(request *CreateKXRecordRequestType) (*CreateKXRecordResponseType, error) {
	return service.CreateKXRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneKXRecordContext(ctx context.Context, request *GetOneKXRecordRequestType) (*GetOneKXRecordResponseType, error) {
	response := new(GetOneKXRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneKXRecord(request *GetOneKXRecordRequestType) (*GetOneKXRecordResponseType, error) {
	return service.GetOneKXRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetKXRecordsContext(ctx context.Context, request *GetKXRecordsRequestType) (*GetKXRecordsResponseType, error) {
	response := new(GetKXRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetKXRecords(request *GetKXRecordsRequestType) (*GetKXRecordsResponseType, error) {
	return service.GetKXRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateKXRecordContext(ctx context.Context, request *UpdateKXRecordRequestType) (*UpdateKXRecordResponseType, error) {
	response := new(UpdateKXRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateKXRecord(request *UpdateKXRecordRequestType) (*UpdateKXRecordResponseType, error) {
	return service.UpdateKXRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteKXRecordsContext(ctx context.Context, request *DeleteKXRecordsRequestType) (*DeleteKXRecordsResponseType, error) {
	response := new(DeleteKXRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteKXRecords(request *DeleteKXRecordsRequestType) (*DeleteKXRecordsResponseType, error) {
	return service.DeleteKXRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneKXRecordContext(ctx context.Context, request *DeleteOneKXRecordRequestType) (*DeleteOneKXRecordResponseType, error) {
	response := new(DeleteOneKXRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneKXRecord(request *DeleteOneKXRecordRequestType) (*DeleteOneKXRecordResponseType, error) {
	return service.DeleteOneKXRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateLOCRecordContext(ctx context.Context, request *CreateLOCRecordRequestType) (*CreateLOCRecordResponseType, error) {
	response := new(CreateLOCRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateLOCRecord(request *CreateLOCRecordRequestType) (*CreateLOCRecordResponseType, error) {
	return service.CreateLOCRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneLOCRecordContext(ctx context.Context, request *GetOneLOCRecordRequestType) (*GetOneLOCRecordResponseType, error) {
	response := new(GetOneLOCRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneLOCRecord(request *GetOneLOCRecordRequestType) (*GetOneLOCRecordResponseType, error) {
	return service.GetOneLOCRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetLOCRecordsContext(ctx context.Context, request *GetLOCRecordsRequestType) (*GetLOCRecordsResponseType, error) {
	response := new(GetLOCRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetLOCRecords(request *GetLOCRecordsRequestType) (*GetLOCRecordsResponseType, error) {
	return service.GetLOCRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateLOCRecordContext(ctx context.Context, request *UpdateLOCRecordRequestType) (*UpdateLOCRecordResponseType, error) {
	response := new(UpdateLOCRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateLOCRecord(request *UpdateLOCRecordRequestType) (*UpdateLOCRecordResponseType, error) {
	return service.UpdateLOCRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteLOCRecordsContext(ctx context.Context, request *DeleteLOCRecordsRequestType) (*DeleteLOCRecordsResponseType, error) {
	response := new(DeleteLOCRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteLOCRecords(request *DeleteLOCRecordsRequestType) (*DeleteLOCRecordsResponseType, error) {
	return service.DeleteLOCRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneLOCRecordContext(ctx context.Context, request *DeleteOneLOCRecordRequestType) (*DeleteOneLOCRecordResponseType, error) {
	response := new(DeleteOneLOCRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneLOCRecord(request *DeleteOneLOCRecordRequestType) (*DeleteOneLOCRecordResponseType, error) {
	return service.DeleteOneLOCRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateMXRecordContext(ctx context.Context, request *CreateMXRecordRequestType) (*CreateMXRecordResponseType, error) {
	response := new(CreateMXRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateMXRecord(request *CreateMXRecordRequestType) (*CreateMXRecordResponseType, error) {
	return service.CreateMXRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneMXRecordContext(ctx context.Context, request *GetOneMXRecordRequestType) (*GetOneMXRecordResponseType, error) {
	response := new(GetOneMXRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneMXRecord(request *GetOneMXRecordRequestType) (*GetOneMXRecordResponseType, error) {
	return service.GetOneMXRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetMXRecordsContext(ctx context.Context, request *GetMXRecordsRequestType) (*GetMXRecordsResponseType, error) {
	response := new(GetMXRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetMXRecords(request *GetMXRecordsRequestType) (*GetMXRecordsResponseType, error) {
	return service.GetMXRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateMXRecordContext(ctx context.Context, request *UpdateMXRecordRequestType) (*UpdateMXRecordResponseType, error) {
	response := new(UpdateMXRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateMXRecord(request *UpdateMXRecordRequestType) (*UpdateMXRecordResponseType, error) {
	return service.UpdateMXRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteMXRecordsContext(ctx context.Context, request *DeleteMXRecordsRequestType) (*DeleteMXRecordsResponseType, error) {
	response := new(DeleteMXRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteMXRecords(request *DeleteMXRecordsRequestType) (*DeleteMXRecordsResponseType, error) {
	return service.DeleteMXRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneMXRecordContext(ctx context.Context, request *DeleteOneMXRecordRequestType) (*DeleteOneMXRecordResponseType, error) {
	response := new(DeleteOneMXRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneMXRecord(request *DeleteOneMXRecordRequestType) (*DeleteOneMXRecordResponseType, error) {
	return service.DeleteOneMXRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateNAPTRRecordContext(ctx context.Context, request *CreateNAPTRRecordRequestType) (*CreateNAPTRRecordResponseType, error) {
	response := new(CreateNAPTRRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateNAPTRRecord(request *CreateNAPTRRecordRequestType) (*CreateNAPTRRecordResponseType, error) {
	return service.CreateNAPTRRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneNAPTRRecordContext(ctx context.Context, request *GetOneNAPTRRecordRequestType) (*GetOneNAPTRRecordResponseType, error) {
	response := new(GetOneNAPTRRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneNAPTRRecord(request *GetOneNAPTRRecordRequestType) (*GetOneNAPTRRecordResponseType, error) {
	return service.GetOneNAPTRRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetNAPTRRecordsContext(ctx context.Context, request *GetNAPTRRecordsRequestType) (*GetNAPTRRecordsResponseType, error) {
	response := new(GetNAPTRRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetNAPTRRecords(request *GetNAPTRRecordsRequestType) (*GetNAPTRRecordsResponseType, error) {
	return service.GetNAPTRRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateNAPTRRecordContext(ctx context.Context, request *UpdateNAPTRRecordRequestType) (*UpdateNAPTRRecordResponseType, error) {
	response := new(UpdateNAPTRRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateNAPTRRecord(request *UpdateNAPTRRecordRequestType) (*UpdateNAPTRRecordResponseType, error) {
	return service.UpdateNAPTRRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteNAPTRRecordsContext(ctx context.Context, request *DeleteNAPTRRecordsRequestType) (*DeleteNAPTRRecordsResponseType, error) {
	response := new(DeleteNAPTRRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteNAPTRRecords(request *DeleteNAPTRRecordsRequestType) (*DeleteNAPTRRecordsResponseType, error) {
	return service.DeleteNAPTRRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneNAPTRRecordContext(ctx context.Context, request *DeleteOneNAPTRRecordRequestType) (*DeleteOneNAPTRRecordResponseType, error) {
	response := new(DeleteOneNAPTRRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneNAPTRRecord(request *DeleteOneNAPTRRecordRequestType) (*DeleteOneNAPTRRecordResponseType, error) {
	return service.DeleteOneNAPTRRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateNSAPRecordContext(ctx context.Context, request *CreateNSAPRecordRequestType) (*CreateNSAPRecordResponseType, error) {
	response := new(CreateNSAPRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateNSAPRecord(request *CreateNSAPRecordRequestType) (*CreateNSAPRecordResponseType, error) {
	return service.CreateNSAPRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneNSAPRecordContext(ctx context.Context, request *GetOneNSAPRecordRequestType) (*GetOneNSAPRecordResponseType, error) {
	response := new(GetOneNSAPRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneNSAPRecord(request *GetOneNSAPRecordRequestType) (*GetOneNSAPRecordResponseType, error) {
	return service.GetOneNSAPRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetNSAPRecordsContext(ctx context.Context, request *GetNSAPRecordsRequestType) (*GetNSAPRecordsResponseType, error) {
	response := new(GetNSAPRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetNSAPRecords(request *GetNSAPRecordsRequestType) (*GetNSAPRecordsResponseType, error) {
	return service.GetNSAPRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateNSAPRecordContext(ctx context.Context, request *UpdateNSAPRecordRequestType) (*UpdateNSAPRecordResponseType, error) {
	response := new(UpdateNSAPRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateNSAPRecord(request *UpdateNSAPRecordRequestType) (*UpdateNSAPRecordResponseType, error) {
	return service.UpdateNSAPRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteNSAPRecordsContext(ctx context.Context, request *DeleteNSAPRecordsRequestType) (*DeleteNSAPRecordsResponseType, error) {
	response := new(DeleteNSAPRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteNSAPRecords(request *DeleteNSAPRecordsRequestType) (*DeleteNSAPRecordsResponseType, error) {
	return service.DeleteNSAPRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneNSAPRecordContext(ctx context.Context, request *DeleteOneNSAPRecordRequestType) (*DeleteOneNSAPRecordResponseType, error) {
	response := new(DeleteOneNSAPRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneNSAPRecord(request *DeleteOneNSAPRecordRequestType) (*DeleteOneNSAPRecordResponseType, error) {
	return service.DeleteOneNSAPRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreatePOLICYRecordContext(ctx context.Context, request *CreatePOLICYRecordRequestType) (*CreatePOLICYRecordResponseType, error) {
	response := new(CreatePOLICYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreatePOLICYRecord(request *CreatePOLICYRecordRequestType) (*CreatePOLICYRecordResponseType, error) {
	return service.CreatePOLICYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOnePOLICYRecordContext(ctx context.Context, request *GetOnePOLICYRecordRequestType) (*GetOnePOLICYRecordResponseType, error) {
	response := new(GetOnePOLICYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOnePOLICYRecord(request *GetOnePOLICYRecordRequestType) (*GetOnePOLICYRecordResponseType, error) {
	return service.GetOnePOLICYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetPOLICYRecordsContext(ctx context.Context, request *GetPOLICYRecordsRequestType) (*GetPOLICYRecordsResponseType, error) {
	response := new(GetPOLICYRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetPOLICYRecords(request *GetPOLICYRecordsRequestType) (*GetPOLICYRecordsResponseType, error) {
	return service.GetPOLICYRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdatePOLICYRecordContext(ctx context.Context, request *UpdatePOLICYRecordRequestType) (*UpdatePOLICYRecordResponseType, error) {
	response := new(UpdatePOLICYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdatePOLICYRecord(request *UpdatePOLICYRecordRequestType) (*UpdatePOLICYRecordResponseType, error) {
	return service.UpdatePOLICYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeletePOLICYRecordsContext(ctx context.Context, request *DeletePOLICYRecordsRequestType) (*DeletePOLICYRecordsResponseType, error) {
	response := new(DeletePOLICYRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeletePOLICYRecords(request *DeletePOLICYRecordsRequestType) (*DeletePOLICYRecordsResponseType, error) {
	return service.DeletePOLICYRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOnePOLICYRecordContext(ctx context.Context, request *DeleteOnePOLICYRecordRequestType) (*DeleteOnePOLICYRecordResponseType, error) {
	response := new(DeleteOnePOLICYRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOnePOLICYRecord(request *DeleteOnePOLICYRecordRequestType) (*DeleteOnePOLICYRecordResponseType, error) {
	return service.DeleteOnePOLICYRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreatePTRRecordContext(ctx context.Context, request *CreatePTRRecordRequestType) (*CreatePTRRecordResponseType, error) {
	response := new(CreatePTRRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreatePTRRecord(request *CreatePTRRecordRequestType) (*CreatePTRRecordResponseType, error) {
	return service.CreatePTRRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOnePTRRecordContext(ctx context.Context, request *GetOnePTRRecordRequestType) (*GetOnePTRRecordResponseType, error) {
	response := new(GetOnePTRRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOnePTRRecord(request *GetOnePTRRecordRequestType) (*GetOnePTRRecordResponseType, error) {
	return service.GetOnePTRRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetPTRRecordsContext(ctx context.Context, request *GetPTRRecordsRequestType) (*GetPTRRecordsResponseType, error) {
	response := new(GetPTRRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetPTRRecords(request *GetPTRRecordsRequestType) (*GetPTRRecordsResponseType, error) {
	return service.GetPTRRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdatePTRRecordContext(ctx context.Context, request *UpdatePTRRecordRequestType) (*UpdatePTRRecordResponseType, error) {
	response := new(UpdatePTRRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdatePTRRecord(request *UpdatePTRRecordRequestType) (*UpdatePTRRecordResponseType, error) {
	return service.UpdatePTRRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeletePTRRecordsContext(ctx context.Context, request *DeletePTRRecordsRequestType) (*DeletePTRRecordsResponseType, error) {
	response := new(DeletePTRRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeletePTRRecords(request *DeletePTRRecordsRequestType) (*DeletePTRRecordsResponseType, error) {
	return service.DeletePTRRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOnePTRRecordContext(ctx context.Context, request *DeleteOnePTRRecordRequestType) (*DeleteOnePTRRecordResponseType, error) {
	response := new(DeleteOnePTRRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOnePTRRecord(request *DeleteOnePTRRecordRequestType) (*DeleteOnePTRRecordResponseType, error) {
	return service.DeleteOnePTRRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreatePXRecordContext(ctx context.Context, request *CreatePXRecordRequestType) (*CreatePXRecordResponseType, error) {
	response := new(CreatePXRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreatePXRecord(request *CreatePXRecordRequestType) (*CreatePXRecordResponseType, error) {
	return service.CreatePXRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOnePXRecordContext(ctx context.Context, request *GetOnePXRecordRequestType) (*GetOnePXRecordResponseType, error) {
	response := new(GetOnePXRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOnePXRecord(request *GetOnePXRecordRequestType) (*GetOnePXRecordResponseType, error) {
	return service.GetOnePXRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetPXRecordsContext(ctx context.Context, request *GetPXRecordsRequestType) (*GetPXRecordsResponseType, error) {
	response := new(GetPXRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetPXRecords(request *GetPXRecordsRequestType) (*GetPXRecordsResponseType, error) {
	return service.GetPXRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdatePXRecordContext(ctx context.Context, request *UpdatePXRecordRequestType) (*UpdatePXRecordResponseType, error) {
	response := new(UpdatePXRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdatePXRecord(request *UpdatePXRecordRequestType) (*UpdatePXRecordResponseType, error) {
	return service.UpdatePXRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeletePXRecordsContext(ctx context.Context, request *DeletePXRecordsRequestType) (*DeletePXRecordsResponseType, error) {
	response := new(DeletePXRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeletePXRecords(request *DeletePXRecordsRequestType) (*DeletePXRecordsResponseType, error) {
	return service.DeletePXRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOnePXRecordContext(ctx context.Context, request *DeleteOnePXRecordRequestType) (*DeleteOnePXRecordResponseType, error) {
	response := new(DeleteOnePXRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOnePXRecord(request *DeleteOnePXRecordRequestType) (*DeleteOnePXRecordResponseType, error) {
	return service.DeleteOnePXRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateRPRecordContext(ctx context.Context, request *CreateRPRecordRequestType) (*CreateRPRecordResponseType, error) {
	response := new(CreateRPRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateRPRecord(request *CreateRPRecordRequestType) (*CreateRPRecordResponseType, error) {
	return service.CreateRPRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneRPRecordContext(ctx context.Context, request *GetOneRPRecordRequestType) (*GetOneRPRecordResponseType, error) {
	response := new(GetOneRPRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneRPRecord(request *GetOneRPRecordRequestType) (*GetOneRPRecordResponseType, error) {
	return service.GetOneRPRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetRPRecordsContext(ctx context.Context, request *GetRPRecordsRequestType) (*GetRPRecordsResponseType, error) {
	response := new(GetRPRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetRPRecords(request *GetRPRecordsRequestType) (*GetRPRecordsResponseType, error) {
	return service.GetRPRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateRPRecordContext(ctx context.Context, request *UpdateRPRecordRequestType) (*UpdateRPRecordResponseType, error) {
	response := new(UpdateRPRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateRPRecord(request *UpdateRPRecordRequestType) (*UpdateRPRecordResponseType, error) {
	return service.UpdateRPRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteRPRecordsContext(ctx context.Context, request *DeleteRPRecordsRequestType) (*DeleteRPRecordsResponseType, error) {
	response := new(DeleteRPRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteRPRecords(request *DeleteRPRecordsRequestType) (*DeleteRPRecordsResponseType, error) {
	return service.DeleteRPRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneRPRecordContext(ctx context.Context, request *DeleteOneRPRecordRequestType) (*DeleteOneRPRecordResponseType, error) {
	response := new(DeleteOneRPRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneRPRecord(request *DeleteOneRPRecordRequestType) (*DeleteOneRPRecordResponseType, error) {
	return service.DeleteOneRPRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateSPFRecordContext(ctx context.Context, request *CreateSPFRecordRequestType) (*CreateSPFRecordResponseType, error) {
	response := new(CreateSPFRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateSPFRecord(request *CreateSPFRecordRequestType) (*CreateSPFRecordResponseType, error) {
	return service.CreateSPFRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneSPFRecordContext(ctx context.Context, request *GetOneSPFRecordRequestType) (*GetOneSPFRecordResponseType, error) {
	response := new(GetOneSPFRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneSPFRecord(request *GetOneSPFRecordRequestType) (*GetOneSPFRecordResponseType, error) {
	return service.GetOneSPFRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetSPFRecordsContext(ctx context.Context, request *GetSPFRecordsRequestType) (*GetSPFRecordsResponseType, error) {
	response := new(GetSPFRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetSPFRecords(request *GetSPFRecordsRequestType) (*GetSPFRecordsResponseType, error) {
	return service.GetSPFRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateSPFRecordContext(ctx context.Context, request *UpdateSPFRecordRequestType) (*UpdateSPFRecordResponseType, error) {
	response := new(UpdateSPFRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateSPFRecord(request *UpdateSPFRecordRequestType) (*UpdateSPFRecordResponseType, error) {
	return service.UpdateSPFRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteSPFRecordsContext(ctx context.Context, request *DeleteSPFRecordsRequestType) (*DeleteSPFRecordsResponseType, error) {
	response := new(DeleteSPFRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteSPFRecords(request *DeleteSPFRecordsRequestType) (*DeleteSPFRecordsResponseType, error) {
	return service.DeleteSPFRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneSPFRecordContext(ctx context.Context, request *DeleteOneSPFRecordRequestType) (*DeleteOneSPFRecordResponseType, error) {
	response := new(DeleteOneSPFRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneSPFRecord(request *DeleteOneSPFRecordRequestType) (*DeleteOneSPFRecordResponseType, error) {
	return service.DeleteOneSPFRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateSRVRecordContext(ctx context.Context, request *CreateSRVRecordRequestType) (*CreateSRVRecordResponseType, error) {
	response := new(CreateSRVRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateSRVRecord(request *CreateSRVRecordRequestType) (*CreateSRVRecordResponseType, error) {
	return service.CreateSRVRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneSRVRecordContext(ctx context.Context, request *GetOneSRVRecordRequestType) (*GetOneSRVRecordResponseType, error) {
	response := new(GetOneSRVRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneSRVRecord(request *GetOneSRVRecordRequestType) (*GetOneSRVRecordResponseType, error) {
	return service.GetOneSRVRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetSRVRecordsContext(ctx context.Context, request *GetSRVRecordsRequestType) (*GetSRVRecordsResponseType, error) {
	response := new(GetSRVRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetSRVRecords(request *GetSRVRecordsRequestType) (*GetSRVRecordsResponseType, error) {
	return service.GetSRVRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateSRVRecordContext(ctx context.Context, request *UpdateSRVRecordRequestType) (*UpdateSRVRecordResponseType, error) {
	response := new(UpdateSRVRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateSRVRecord(request *UpdateSRVRecordRequestType) (*UpdateSRVRecordResponseType, error) {
	return service.UpdateSRVRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteSRVRecordsContext(ctx context.Context, request *DeleteSRVRecordsRequestType) (*DeleteSRVRecordsResponseType, error) {
	response := new(DeleteSRVRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteSRVRecords(request *DeleteSRVRecordsRequestType) (*DeleteSRVRecordsResponseType, error) {
	return service.DeleteSRVRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneSRVRecordContext(ctx context.Context, request *DeleteOneSRVRecordRequestType) (*DeleteOneSRVRecordResponseType, error) {
	response := new(DeleteOneSRVRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneSRVRecord(request *DeleteOneSRVRecordRequestType) (*DeleteOneSRVRecordResponseType, error) {
	return service.DeleteOneSRVRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateSSHFPRecordContext(ctx context.Context, request *CreateSSHFPRecordRequestType) (*CreateSSHFPRecordResponseType, error) {
	response := new(CreateSSHFPRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateSSHFPRecord(request *CreateSSHFPRecordRequestType) (*CreateSSHFPRecordResponseType, error) {
	return service.CreateSSHFPRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneSSHFPRecordContext(ctx context.Context, request *GetOneSSHFPRecordRequestType) (*GetOneSSHFPRecordResponseType, error) {
	response := new(GetOneSSHFPRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneSSHFPRecord(request *GetOneSSHFPRecordRequestType) (*GetOneSSHFPRecordResponseType, error) {
	return service.GetOneSSHFPRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetSSHFPRecordsContext(ctx context.Context, request *GetSSHFPRecordsRequestType) (*GetSSHFPRecordsResponseType, error) {
	response := new(GetSSHFPRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetSSHFPRecords(request *GetSSHFPRecordsRequestType) (*GetSSHFPRecordsResponseType, error) {
	return service.GetSSHFPRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateSSHFPRecordContext(ctx context.Context, request *UpdateSSHFPRecordRequestType) (*UpdateSSHFPRecordResponseType, error) {
	response := new(UpdateSSHFPRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateSSHFPRecord(request *UpdateSSHFPRecordRequestType) (*UpdateSSHFPRecordResponseType, error) {
	return service.UpdateSSHFPRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteSSHFPRecordsContext(ctx context.Context, request *DeleteSSHFPRecordsRequestType) (*DeleteSSHFPRecordsResponseType, error) {
	response := new(DeleteSSHFPRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteSSHFPRecords(request *DeleteSSHFPRecordsRequestType) (*DeleteSSHFPRecordsResponseType, error) {
	return service.DeleteSSHFPRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneSSHFPRecordContext(ctx context.Context, request *DeleteOneSSHFPRecordRequestType) (*DeleteOneSSHFPRecordResponseType, error) {
	response := new(DeleteOneSSHFPRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneSSHFPRecord(request *DeleteOneSSHFPRecordRequestType) (*DeleteOneSSHFPRecordResponseType, error) {
	return service.DeleteOneSSHFPRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateTLSARecordContext(ctx context.Context, request *CreateTLSARecordRequestType) (*CreateTLSARecordResponseType, error) {
	response := new(CreateTLSARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateTLSARecord(request *CreateTLSARecordRequestType) (*CreateTLSARecordResponseType, error) {
	return service.CreateTLSARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneTLSARecordContext(ctx context.Context, request *GetOneTLSARecordRequestType) (*GetOneTLSARecordResponseType, error) {
	response := new(GetOneTLSARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneTLSARecord(request *GetOneTLSARecordRequestType) (*GetOneTLSARecordResponseType, error) {
	return service.GetOneTLSARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetTLSARecordsContext(ctx context.Context, request *GetTLSARecordsRequestType) (*GetTLSARecordsResponseType, error) {
	response := new(GetTLSARecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetTLSARecords(request *GetTLSARecordsRequestType) (*GetTLSARecordsResponseType, error) {
	return service.GetTLSARecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateTLSARecordContext(ctx context.Context, request *UpdateTLSARecordRequestType) (*UpdateTLSARecordResponseType, error) {
	response := new(UpdateTLSARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateTLSARecord(request *UpdateTLSARecordRequestType) (*UpdateTLSARecordResponseType, error) {
	return service.UpdateTLSARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteTLSARecordsContext(ctx context.Context, request *DeleteTLSARecordsRequestType) (*DeleteTLSARecordsResponseType, error) {
	response := new(DeleteTLSARecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteTLSARecords(request *DeleteTLSARecordsRequestType) (*DeleteTLSARecordsResponseType, error) {
	return service.DeleteTLSARecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneTLSARecordContext(ctx context.Context, request *DeleteOneTLSARecordRequestType) (*DeleteOneTLSARecordResponseType, error) {
	response := new(DeleteOneTLSARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneTLSARecord(request *DeleteOneTLSARecordRequestType) (*DeleteOneTLSARecordResponseType, error) {
	return service.DeleteOneTLSARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateTXTRecordContext(ctx context.Context, request *CreateTXTRecordRequestType) (*CreateTXTRecordResponseType, error) {
	response := new(CreateTXTRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateTXTRecord(request *CreateTXTRecordRequestType) (*CreateTXTRecordResponseType, error) {
	return service.CreateTXTRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneTXTRecordContext(ctx context.Context, request *GetOneTXTRecordRequestType) (*GetOneTXTRecordResponseType, error) {
	response := new(GetOneTXTRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneTXTRecord(request *GetOneTXTRecordRequestType) (*GetOneTXTRecordResponseType, error) {
	return service.GetOneTXTRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetTXTRecordsContext(ctx context.Context, request *GetTXTRecordsRequestType) (*GetTXTRecordsResponseType, error) {
	response := new(GetTXTRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetTXTRecords(request *GetTXTRecordsRequestType) (*GetTXTRecordsResponseType, error) {
	return service.GetTXTRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateTXTRecordContext(ctx context.Context, request *UpdateTXTRecordRequestType) (*UpdateTXTRecordResponseType, error) {
	response := new(UpdateTXTRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateTXTRecord(request *UpdateTXTRecordRequestType) (*UpdateTXTRecordResponseType, error) {
	return service.UpdateTXTRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteTXTRecordsContext(ctx context.Context, request *DeleteTXTRecordsRequestType) (*DeleteTXTRecordsResponseType, error) {
	response := new(DeleteTXTRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteTXTRecords(request *DeleteTXTRecordsRequestType) (*DeleteTXTRecordsResponseType, error) {
	return service.DeleteTXTRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneTXTRecordContext(ctx context.Context, request *DeleteOneTXTRecordRequestType) (*DeleteOneTXTRecordResponseType, error) {
	response := new(DeleteOneTXTRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneTXTRecord(request *DeleteOneTXTRecordRequestType) (*DeleteOneTXTRecordResponseType, error) {
	return service.DeleteOneTXTRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneSOARecordContext(ctx context.Context, request *GetOneSOARecordRequestType) (*GetOneSOARecordResponseType, error) {
	response := new(GetOneSOARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneSOARecord(request *GetOneSOARecordRequestType) (*GetOneSOARecordResponseType, error) {
	return service.GetOneSOARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetSOARecordsContext(ctx context.Context, request *GetSOARecordsRequestType) (*GetSOARecordsResponseType, error) {
	response := new(GetSOARecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetSOARecords(request *GetSOARecordsRequestType) (*GetSOARecordsResponseType, error) {
	return service.GetSOARecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateSOARecordContext(ctx context.Context, request *UpdateSOARecordRequestType) (*UpdateSOARecordResponseType, error) {
	response := new(UpdateSOARecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateSOARecord(request *UpdateSOARecordRequestType) (*UpdateSOARecordResponseType, error) {
	return service.UpdateSOARecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateNSRecordContext(ctx context.Context, request *CreateNSRecordRequestType) (*CreateNSRecordResponseType, error) {
	response := new(CreateNSRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateNSRecord(request *CreateNSRecordRequestType) (*CreateNSRecordResponseType, error) {
	return service.CreateNSRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneNSRecordContext(ctx context.Context, request *GetOneNSRecordRequestType) (*GetOneNSRecordResponseType, error) {
	response := new(GetOneNSRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneNSRecord(request *GetOneNSRecordRequestType) (*GetOneNSRecordResponseType, error) {
	return service.GetOneNSRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetNSRecordsContext(ctx context.Context, request *GetNSRecordsRequestType) (*GetNSRecordsResponseType, error) {
	response := new(GetNSRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetNSRecords(request *GetNSRecordsRequestType) (*GetNSRecordsResponseType, error) {
	return service.GetNSRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateNSRecordContext(ctx context.Context, request *UpdateNSRecordRequestType) (*UpdateNSRecordResponseType, error) {
	response := new(UpdateNSRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateNSRecord(request *UpdateNSRecordRequestType) (*UpdateNSRecordResponseType, error) {
	return service.UpdateNSRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteNSRecordsContext(ctx context.Context, request *DeleteNSRecordsRequestType) (*DeleteNSRecordsResponseType, error) {
	response := new(DeleteNSRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteNSRecords(request *DeleteNSRecordsRequestType) (*DeleteNSRecordsResponseType, error) {
	return service.DeleteNSRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneNSRecordContext(ctx context.Context, request *DeleteOneNSRecordRequestType) (*DeleteOneNSRecordResponseType, error) {
	response := new(DeleteOneNSRecordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneNSRecord(request *DeleteOneNSRecordRequestType) (*DeleteOneNSRecordResponseType, error) {
	return service.DeleteOneNSRecordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceARecordsContext(ctx context.Context, request *ReplaceARecordsRequestType) (*ReplaceARecordsResponseType, error) {
	response := new(ReplaceARecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceARecords(request *ReplaceARecordsRequestType) (*ReplaceARecordsResponseType, error) {
	return service.ReplaceARecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceAAAARecordsContext(ctx context.Context, request *ReplaceAAAARecordsRequestType) (*ReplaceAAAARecordsResponseType, error) {
	response := new(ReplaceAAAARecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceAAAARecords(request *ReplaceAAAARecordsRequestType) (*ReplaceAAAARecordsResponseType, error) {
	return service.ReplaceAAAARecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceALIASRecordsContext(ctx context.Context, request *ReplaceALIASRecordsRequestType) (*ReplaceALIASRecordsResponseType, error) {
	response := new(ReplaceALIASRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceALIASRecords(request *ReplaceALIASRecordsRequestType) (*ReplaceALIASRecordsResponseType, error) {
	return service.ReplaceALIASRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceCAARecordsContext(ctx context.Context, request *ReplaceCAARecordsRequestType) (*ReplaceCAARecordsResponseType, error) {
	response := new(ReplaceCAARecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceCAARecords(request *ReplaceCAARecordsRequestType) (*ReplaceCAARecordsResponseType, error) {
	return service.ReplaceCAARecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceCDNSKEYRecordsContext(ctx context.Context, request *ReplaceCDNSKEYRecordsRequestType) (*ReplaceCDNSKEYRecordsResponseType, error) {
	response := new(ReplaceCDNSKEYRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceCDNSKEYRecords(request *ReplaceCDNSKEYRecordsRequestType) (*ReplaceCDNSKEYRecordsResponseType, error) {
	return service.ReplaceCDNSKEYRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceCDSRecordsContext(ctx context.Context, request *ReplaceCDSRecordsRequestType) (*ReplaceCDSRecordsResponseType, error) {
	response := new(ReplaceCDSRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceCDSRecords(request *ReplaceCDSRecordsRequestType) (*ReplaceCDSRecordsResponseType, error) {
	return service.ReplaceCDSRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceCERTRecordsContext(ctx context.Context, request *ReplaceCERTRecordsRequestType) (*ReplaceCERTRecordsResponseType, error) {
	response := new(ReplaceCERTRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceCERTRecords(request *ReplaceCERTRecordsRequestType) (*ReplaceCERTRecordsResponseType, error) {
	return service.ReplaceCERTRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceCNAMERecordsContext(ctx context.Context, request *ReplaceCNAMERecordsRequestType) (*ReplaceCNAMERecordsResponseType, error) {
	response := new(ReplaceCNAMERecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceCNAMERecords(request *ReplaceCNAMERecordsRequestType) (*ReplaceCNAMERecordsResponseType, error) {
	return service.ReplaceCNAMERecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceCSYNCRecordsContext(ctx context.Context, request *ReplaceCSYNCRecordsRequestType) (*ReplaceCSYNCRecordsResponseType, error) {
	response := new(ReplaceCSYNCRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceCSYNCRecords(request *ReplaceCSYNCRecordsRequestType) (*ReplaceCSYNCRecordsResponseType, error) {
	return service.ReplaceCSYNCRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceDHCIDRecordsContext(ctx context.Context, request *ReplaceDHCIDRecordsRequestType) (*ReplaceDHCIDRecordsResponseType, error) {
	response := new(ReplaceDHCIDRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceDHCIDRecords(request *ReplaceDHCIDRecordsRequestType) (*ReplaceDHCIDRecordsResponseType, error) {
	return service.ReplaceDHCIDRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceDNAMERecordsContext(ctx context.Context, request *ReplaceDNAMERecordsRequestType) (*ReplaceDNAMERecordsResponseType, error) {
	response := new(ReplaceDNAMERecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceDNAMERecords(request *ReplaceDNAMERecordsRequestType) (*ReplaceDNAMERecordsResponseType, error) {
	return service.ReplaceDNAMERecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceDNSKEYRecordsContext(ctx context.Context, request *ReplaceDNSKEYRecordsRequestType) (*ReplaceDNSKEYRecordsResponseType, error) {
	response := new(ReplaceDNSKEYRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceDNSKEYRecords(request *ReplaceDNSKEYRecordsRequestType) (*ReplaceDNSKEYRecordsResponseType, error) {
	return service.ReplaceDNSKEYRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceDSRecordsContext(ctx context.Context, request *ReplaceDSRecordsRequestType) (*ReplaceDSRecordsResponseType, error) {
	response := new(ReplaceDSRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceDSRecords(request *ReplaceDSRecordsRequestType) (*ReplaceDSRecordsResponseType, error) {
	return service.ReplaceDSRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceIPSECKEYRecordsContext(ctx context.Context, request *ReplaceIPSECKEYRecordsRequestType) (*ReplaceIPSECKEYRecordsResponseType, error) {
	response := new(ReplaceIPSECKEYRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceIPSECKEYRecords(request *ReplaceIPSECKEYRecordsRequestType) (*ReplaceIPSECKEYRecordsResponseType, error) {
	return service.ReplaceIPSECKEYRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceKEYRecordsContext(ctx context.Context, request *ReplaceKEYRecordsRequestType) (*ReplaceKEYRecordsResponseType, error) {
	response := new(ReplaceKEYRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceKEYRecords(request *ReplaceKEYRecordsRequestType) (*ReplaceKEYRecordsResponseType, error) {
	return service.ReplaceKEYRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceKXRecordsContext(ctx context.Context, request *ReplaceKXRecordsRequestType) (*ReplaceKXRecordsResponseType, error) {
	response := new(ReplaceKXRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceKXRecords(request *ReplaceKXRecordsRequestType) (*ReplaceKXRecordsResponseType, error) {
	return service.ReplaceKXRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceLOCRecordsContext(ctx context.Context, request *ReplaceLOCRecordsRequestType) (*ReplaceLOCRecordsResponseType, error) {
	response := new(ReplaceLOCRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceLOCRecords(request *ReplaceLOCRecordsRequestType) (*ReplaceLOCRecordsResponseType, error) {
	return service.ReplaceLOCRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceMXRecordsContext(ctx context.Context, request *ReplaceMXRecordsRequestType) (*ReplaceMXRecordsResponseType, error) {
	response := new(ReplaceMXRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceMXRecords(request *ReplaceMXRecordsRequestType) (*ReplaceMXRecordsResponseType, error) {
	return service.ReplaceMXRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceNAPTRRecordsContext(ctx context.Context, request *ReplaceNAPTRRecordsRequestType) (*ReplaceNAPTRRecordsResponseType, error) {
	response := new(ReplaceNAPTRRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceNAPTRRecords(request *ReplaceNAPTRRecordsRequestType) (*ReplaceNAPTRRecordsResponseType, error) {
	return service.ReplaceNAPTRRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceNSAPRecordsContext(ctx context.Context, request *ReplaceNSAPRecordsRequestType) (*ReplaceNSAPRecordsResponseType, error) {
	response := new(ReplaceNSAPRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceNSAPRecords(request *ReplaceNSAPRecordsRequestType) (*ReplaceNSAPRecordsResponseType, error) {
	return service.ReplaceNSAPRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplacePOLICYRecordsContext(ctx context.Context, request *ReplacePOLICYRecordsRequestType) (*ReplacePOLICYRecordsResponseType, error) {
	response := new(ReplacePOLICYRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplacePOLICYRecords(request *ReplacePOLICYRecordsRequestType) (*ReplacePOLICYRecordsResponseType, error) {
	return service.ReplacePOLICYRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplacePTRRecordsContext(ctx context.Context, request *ReplacePTRRecordsRequestType) (*ReplacePTRRecordsResponseType, error) {
	response := new(ReplacePTRRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplacePTRRecords(request *ReplacePTRRecordsRequestType) (*ReplacePTRRecordsResponseType, error) {
	return service.ReplacePTRRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplacePXRecordsContext(ctx context.Context, request *ReplacePXRecordsRequestType) (*ReplacePXRecordsResponseType, error) {
	response := new(ReplacePXRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplacePXRecords(request *ReplacePXRecordsRequestType) (*ReplacePXRecordsResponseType, error) {
	return service.ReplacePXRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceRPRecordsContext(ctx context.Context, request *ReplaceRPRecordsRequestType) (*ReplaceRPRecordsResponseType, error) {
	response := new(ReplaceRPRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceRPRecords(request *ReplaceRPRecordsRequestType) (*ReplaceRPRecordsResponseType, error) {
	return service.ReplaceRPRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceSPFRecordsContext(ctx context.Context, request *ReplaceSPFRecordsRequestType) (*ReplaceSPFRecordsResponseType, error) {
	response := new(ReplaceSPFRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceSPFRecords(request *ReplaceSPFRecordsRequestType) (*ReplaceSPFRecordsResponseType, error) {
	return service.ReplaceSPFRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceSRVRecordsContext(ctx context.Context, request *ReplaceSRVRecordsRequestType) (*ReplaceSRVRecordsResponseType, error) {
	response := new(ReplaceSRVRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceSRVRecords(request *ReplaceSRVRecordsRequestType) (*ReplaceSRVRecordsResponseType, error) {
	return service.ReplaceSRVRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceSSHFPRecordsContext(ctx context.Context, request *ReplaceSSHFPRecordsRequestType) (*ReplaceSSHFPRecordsResponseType, error) {
	response := new(ReplaceSSHFPRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceSSHFPRecords(request *ReplaceSSHFPRecordsRequestType) (*ReplaceSSHFPRecordsResponseType, error) {
	return service.ReplaceSSHFPRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceTLSARecordsContext(ctx context.Context, request *ReplaceTLSARecordsRequestType) (*ReplaceTLSARecordsResponseType, error) {
	response := new(ReplaceTLSARecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceTLSARecords(request *ReplaceTLSARecordsRequestType) (*ReplaceTLSARecordsResponseType, error) {
	return service.ReplaceTLSARecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceTXTRecordsContext(ctx context.Context, request *ReplaceTXTRecordsRequestType) (*ReplaceTXTRecordsResponseType, error) {
	response := new(ReplaceTXTRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceTXTRecords(request *ReplaceTXTRecordsRequestType) (*ReplaceTXTRecordsResponseType, error) {
	return service.ReplaceTXTRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ReplaceNSRecordsContext(ctx context.Context, request *ReplaceNSRecordsRequestType) (*ReplaceNSRecordsResponseType, error) {
	response := new(ReplaceNSRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ReplaceNSRecords(request *ReplaceNSRecordsRequestType) (*ReplaceNSRecordsResponseType, error) {
	return service.ReplaceNSRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetANYRecordsContext(ctx context.Context, request *GetANYRecordsRequestType) (*GetANYRecordsResponseType, error) {
	response := new(GetANYRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetANYRecords(request *GetANYRecordsRequestType) (*GetANYRecordsResponseType, error) {
	return service.GetANYRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetAllRecordsContext(ctx context.Context, request *GetAllRecordsRequestType) (*GetAllRecordsResponseType, error) {
	response := new(GetAllRecordsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetAllRecords(request *GetAllRecordsRequestType) (*GetAllRecordsResponseType, error) {
	return service.GetAllRecordsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetAllAliasQNamesContext(ctx context.Context, request *GetAllAliasQNamesRequestType) (*GetAllAliasQNamesResponseType, error) {
	response := new(GetAllAliasQNamesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetAllAliasQNames(request *GetAllAliasQNamesRequestType) (*GetAllAliasQNamesResponseType, error) {
	return service.GetAllAliasQNamesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneUserContext(ctx context.Context, request *GetOneUserRequestType) (*GetOneUserResponseType, error) {
	response := new(GetOneUserResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneUser(request *GetOneUserRequestType) (*GetOneUserResponseType, error) {
	return service.GetOneUserContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneUserContext(ctx context.Context, request *DeleteOneUserRequestType) (*DeleteOneUserResponseType, error) {
	response := new(DeleteOneUserResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneUser(request *DeleteOneUserRequestType) (*DeleteOneUserResponseType, error) {
	return service.DeleteOneUserContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateUserContext(ctx context.Context, request *CreateUserRequestType) (*CreateUserResponseType, error) {
	response := new(CreateUserResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateUser(request *CreateUserRequestType) (*CreateUserResponseType, error) {
	return service.CreateUserContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateUserContext(ctx context.Context, request *UpdateUserRequestType) (*UpdateUserResponseType, error) {
	response := new(UpdateUserResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateUser(request *UpdateUserRequestType) (*UpdateUserResponseType, error) {
	return service.UpdateUserContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetUsersContext(ctx context.Context, request *GetUsersRequestType) (*GetUsersResponseType, error) {
	response := new(GetUsersResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetUsers(request *GetUsersRequestType) (*GetUsersResponseType, error) {
	return service.GetUsersContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetUpdateUsersContext(ctx context.Context, request *GetUpdateUsersRequestType) (*GetUpdateUsersResponseType, error) {
	response := new(GetUpdateUsersResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetUpdateUsers(request *GetUpdateUsersRequestType) (*GetUpdateUsersResponseType, error) {
	return service.GetUpdateUsersContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateUpdateUserContext(ctx context.Context, request *UpdateUpdateUserRequestType) (*UpdateUpdateUserResponseType, error) {
	response := new(UpdateUpdateUserResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateUpdateUser(request *UpdateUpdateUserRequestType) (*UpdateUpdateUserResponseType, error) {
	return service.UpdateUpdateUserContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneUpdateUserContext(ctx context.Context, request *DeleteOneUpdateUserRequestType) (*DeleteOneUpdateUserResponseType, error) {
	response := new(DeleteOneUpdateUserResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneUpdateUser(request *DeleteOneUpdateUserRequestType) (*DeleteOneUpdateUserResponseType, error) {
	return service.DeleteOneUpdateUserContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateUserPasswordContext(ctx context.Context, request *UpdateUserPasswordRequestType) (*UpdateUserPasswordResponseType, error) {
	response := new(UpdateUserPasswordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateUserPassword(request *UpdateUserPasswordRequestType) (*UpdateUserPasswordResponseType, error) {
	return service.UpdateUserPasswordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) BlockUserContext(ctx context.Context, request *BlockUserRequestType) (*BlockUserResponseType, error) {
	response := new(BlockUserResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) BlockUser(request *BlockUserRequestType) (*BlockUserResponseType, error) {
	return service.BlockUserContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UnblockUserContext(ctx context.Context, request *UnblockUserRequestType) (*UnblockUserResponseType, error) {
	response := new(UnblockUserResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UnblockUser(request *UnblockUserRequestType) (*UnblockUserResponseType, error) {
	return service.UnblockUserContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateContactContext(ctx context.Context, request *CreateContactRequestType) (*CreateContactResponseType, error) {
	response := new(CreateContactResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateContact(request *CreateContactRequestType) (*CreateContactResponseType, error) {
	return service.CreateContactContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneContactContext(ctx context.Context, request *GetOneContactRequestType) (*GetOneContactResponseType, error) {
	response := new(GetOneContactResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneContact(request *GetOneContactRequestType) (*GetOneContactResponseType, error) {
	return service.GetOneContactContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetContactsContext(ctx context.Context, request *GetContactsRequestType) (*GetContactsResponseType, error) {
	response := new(GetContactsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetContacts(request *GetContactsRequestType) (*GetContactsResponseType, error) {
	return service.GetContactsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneContactContext(ctx context.Context, request *DeleteOneContactRequestType) (*DeleteOneContactResponseType, error) {
	response := new(DeleteOneContactResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneContact(request *DeleteOneContactRequestType) (*DeleteOneContactResponseType, error) {
	return service.DeleteOneContactContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateContactContext(ctx context.Context, request *UpdateContactRequestType) (*UpdateContactResponseType, error) {
	response := new(UpdateContactResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateContact(request *UpdateContactRequestType) (*UpdateContactResponseType, error) {
	return service.UpdateContactContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateCustomerContext(ctx context.Context, request *CreateCustomerRequestType) (*CreateCustomerResponseType, error) {
	response := new(CreateCustomerResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateCustomer(request *CreateCustomerRequestType) (*CreateCustomerResponseType, error) {
	return service.CreateCustomerContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateCustomerContext(ctx context.Context, request *UpdateCustomerRequestType) (*UpdateCustomerResponseType, error) {
	response := new(UpdateCustomerResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateCustomer(request *UpdateCustomerRequestType) (*UpdateCustomerResponseType, error) {
	return service.UpdateCustomerContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneCustomerContext(ctx context.Context, request *GetOneCustomerRequestType) (*GetOneCustomerResponseType, error) {
	response := new(GetOneCustomerResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneCustomer(request *GetOneCustomerRequestType) (*GetOneCustomerResponseType, error) {
	return service.GetOneCustomerContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetCustomersContext(ctx context.Context, request *GetCustomersRequestType) (*GetCustomersResponseType, error) {
	response := new(GetCustomersResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetCustomers(request *GetCustomersRequestType) (*GetCustomersResponseType, error) {
	return service.GetCustomersContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneCustomerContext(ctx context.Context, request *DeleteOneCustomerRequestType) (*DeleteOneCustomerResponseType, error) {
	response := new(DeleteOneCustomerResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneCustomer(request *DeleteOneCustomerRequestType) (*DeleteOneCustomerResponseType, error) {
	return service.DeleteOneCustomerContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetCustomerPrefsContext(ctx context.Context, request *GetCustomerPrefsRequestType) (*GetCustomerPrefsResponseType, error) {
	response := new(GetCustomerPrefsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetCustomerPrefs(request *GetCustomerPrefsRequestType) (*GetCustomerPrefsResponseType, error) {
	return service.GetCustomerPrefsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SetCustomerPrefsContext(ctx context.Context, request *SetCustomerPrefsRequestType) (*SetCustomerPrefsResponseType, error) {
	response := new(SetCustomerPrefsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SetCustomerPrefs(request *SetCustomerPrefsRequestType) (*SetCustomerPrefsResponseType, error) {
	return service.SetCustomerPrefsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetCustomerIPACLContext(ctx context.Context, request *GetCustomerIPACLRequestType) (*GetCustomerIPACLResponseType, error) {
	response := new(GetCustomerIPACLResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetCustomerIPACL(request *GetCustomerIPACLRequestType) (*GetCustomerIPACLResponseType, error) {
	return service.GetCustomerIPACLContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SetCustomerIPACLContext(ctx context.Context, request *SetCustomerIPACLRequestType) (*SetCustomerIPACLResponseType, error) {
	response := new(SetCustomerIPACLResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SetCustomerIPACL(request *SetCustomerIPACLRequestType) (*SetCustomerIPACLResponseType, error) {
	return service.SetCustomerIPACLContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateCustomerOracleMetadataContext(ctx context.Context, request *CreateCustomerOracleMetadataRequestType) (*CreateCustomerOracleMetadataResponseType, error) {
	response := new(CreateCustomerOracleMetadataResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateCustomerOracleMetadata(request *CreateCustomerOracleMetadataRequestType) (*CreateCustomerOracleMetadataResponseType, error) {
	return service.CreateCustomerOracleMetadataContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateCustomerOracleMetadataContext(ctx context.Context, request *UpdateCustomerOracleMetadataRequestType) (*UpdateCustomerOracleMetadataResponseType, error) {
	response := new(UpdateCustomerOracleMetadataResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateCustomerOracleMetadata(request *UpdateCustomerOracleMetadataRequestType) (*UpdateCustomerOracleMetadataResponseType, error) {
	return service.UpdateCustomerOracleMetadataContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetCustomerOracleMetadataContext(ctx context.Context, request *GetCustomerOracleMetadataRequestType) (*GetCustomerOracleMetadataResponseType, error) {
	response := new(GetCustomerOracleMetadataResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetCustomerOracleMetadata(request *GetCustomerOracleMetadataRequestType) (*GetCustomerOracleMetadataResponseType, error) {
	return service.GetCustomerOracleMetadataContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteCustomerOracleMetadataContext(ctx context.Context, request *DeleteCustomerOracleMetadataRequestType) (*DeleteCustomerOracleMetadataResponseType, error) {
	response := new(DeleteCustomerOracleMetadataResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteCustomerOracleMetadata(request *DeleteCustomerOracleMetadataRequestType) (*DeleteCustomerOracleMetadataResponseType, error) {
	return service.DeleteCustomerOracleMetadataContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateZoneOracleMetadataContext(ctx context.Context, request *CreateZoneOracleMetadataRequestType) (*CreateZoneOracleMetadataResponseType, error) {
	response := new(CreateZoneOracleMetadataResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateZoneOracleMetadata(request *CreateZoneOracleMetadataRequestType) (*CreateZoneOracleMetadataResponseType, error) {
	return service.CreateZoneOracleMetadataContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateZoneOracleMetadataContext(ctx context.Context, request *UpdateZoneOracleMetadataRequestType) (*UpdateZoneOracleMetadataResponseType, error) {
	response := new(UpdateZoneOracleMetadataResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateZoneOracleMetadata(request *UpdateZoneOracleMetadataRequestType) (*UpdateZoneOracleMetadataResponseType, error) {
	return service.UpdateZoneOracleMetadataContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetZoneOracleMetadataContext(ctx context.Context, request *GetZoneOracleMetadataRequestType) (*GetZoneOracleMetadataResponseType, error) {
	response := new(GetZoneOracleMetadataResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetZoneOracleMetadata(request *GetZoneOracleMetadataRequestType) (*GetZoneOracleMetadataResponseType, error) {
	return service.GetZoneOracleMetadataContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteZoneOracleMetadataContext(ctx context.Context, request *DeleteZoneOracleMetadataRequestType) (*DeleteZoneOracleMetadataResponseType, error) {
	response := new(DeleteZoneOracleMetadataResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteZoneOracleMetadata(request *DeleteZoneOracleMetadataRequestType) (*DeleteZoneOracleMetadataResponseType, error) {
	return service.DeleteZoneOracleMetadataContext(
		context.Background(),
		request,
	)
}

func (service *dynect) OCIMigrateContext(ctx context.Context, request *OCIMigrateRequestType) (*OCIMigrateResponseType, error) {
	response := new(OCIMigrateResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) OCIMigrate(request *OCIMigrateRequestType) (*OCIMigrateResponseType, error) {
	return service.OCIMigrateContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateDDNSContext(ctx context.Context, request *CreateDDNSRequestType) (*CreateDDNSResponseType, error) {
	response := new(CreateDDNSResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateDDNS(request *CreateDDNSRequestType) (*CreateDDNSResponseType, error) {
	return service.CreateDDNSContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneDDNSContext(ctx context.Context, request *GetOneDDNSRequestType) (*GetOneDDNSResponseType, error) {
	response := new(GetOneDDNSResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneDDNS(request *GetOneDDNSRequestType) (*GetOneDDNSResponseType, error) {
	return service.GetOneDDNSContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetDDNSsContext(ctx context.Context, request *GetDDNSsRequestType) (*GetDDNSsResponseType, error) {
	response := new(GetDDNSsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetDDNSs(request *GetDDNSsRequestType) (*GetDDNSsResponseType, error) {
	return service.GetDDNSsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateDDNSContext(ctx context.Context, request *UpdateDDNSRequestType) (*UpdateDDNSResponseType, error) {
	response := new(UpdateDDNSResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateDDNS(request *UpdateDDNSRequestType) (*UpdateDDNSResponseType, error) {
	return service.UpdateDDNSContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneDDNSContext(ctx context.Context, request *DeleteOneDDNSRequestType) (*DeleteOneDDNSResponseType, error) {
	response := new(DeleteOneDDNSResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneDDNS(request *DeleteOneDDNSRequestType) (*DeleteOneDDNSResponseType, error) {
	return service.DeleteOneDDNSContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ActivateDDNSContext(ctx context.Context, request *ActivateDDNSRequestType) (*ActivateDDNSResponseType, error) {
	response := new(ActivateDDNSResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ActivateDDNS(request *ActivateDDNSRequestType) (*ActivateDDNSResponseType, error) {
	return service.ActivateDDNSContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeactivateDDNSContext(ctx context.Context, request *DeactivateDDNSRequestType) (*DeactivateDDNSResponseType, error) {
	response := new(DeactivateDDNSResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeactivateDDNS(request *DeactivateDDNSRequestType) (*DeactivateDDNSResponseType, error) {
	return service.DeactivateDDNSContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ResetDDNSContext(ctx context.Context, request *ResetDDNSRequestType) (*ResetDDNSResponseType, error) {
	response := new(ResetDDNSResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ResetDDNS(request *ResetDDNSRequestType) (*ResetDDNSResponseType, error) {
	return service.ResetDDNSContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetUpdateUserPasswordContext(ctx context.Context, request *GetUpdateUserPasswordRequestType) (*GetUpdateUserPasswordResponseType, error) {
	response := new(GetUpdateUserPasswordResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetUpdateUserPassword(request *GetUpdateUserPasswordRequestType) (*GetUpdateUserPasswordResponseType, error) {
	return service.GetUpdateUserPasswordContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateDDNSHostContext(ctx context.Context, request *CreateDDNSHostRequestType) (*CreateDDNSHostResponseType, error) {
	response := new(CreateDDNSHostResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateDDNSHost(request *CreateDDNSHostRequestType) (*CreateDDNSHostResponseType, error) {
	return service.CreateDDNSHostContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateUpdateUserContext(ctx context.Context, request *CreateUpdateUserRequestType) (*CreateUpdateUserResponseType, error) {
	response := new(CreateUpdateUserResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateUpdateUser(request *CreateUpdateUserRequestType) (*CreateUpdateUserResponseType, error) {
	return service.CreateUpdateUserContext(
		context.Background(),
		request,
	)
}

func (service *dynect) AddDDNSContext(ctx context.Context, request *AddDDNSRequestType) (*AddDDNSResponseType, error) {
	response := new(AddDDNSResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) AddDDNS(request *AddDDNSRequestType) (*AddDDNSResponseType, error) {
	return service.AddDDNSContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateFailoverContext(ctx context.Context, request *CreateFailoverRequestType) (*CreateFailoverResponseType, error) {
	response := new(CreateFailoverResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateFailover(request *CreateFailoverRequestType) (*CreateFailoverResponseType, error) {
	return service.CreateFailoverContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneFailoverContext(ctx context.Context, request *GetOneFailoverRequestType) (*GetOneFailoverResponseType, error) {
	response := new(GetOneFailoverResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneFailover(request *GetOneFailoverRequestType) (*GetOneFailoverResponseType, error) {
	return service.GetOneFailoverContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetFailoversContext(ctx context.Context, request *GetFailoversRequestType) (*GetFailoversResponseType, error) {
	response := new(GetFailoversResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetFailovers(request *GetFailoversRequestType) (*GetFailoversResponseType, error) {
	return service.GetFailoversContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateFailoverContext(ctx context.Context, request *UpdateFailoverRequestType) (*UpdateFailoverResponseType, error) {
	response := new(UpdateFailoverResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateFailover(request *UpdateFailoverRequestType) (*UpdateFailoverResponseType, error) {
	return service.UpdateFailoverContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneFailoverContext(ctx context.Context, request *DeleteOneFailoverRequestType) (*DeleteOneFailoverResponseType, error) {
	response := new(DeleteOneFailoverResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneFailover(request *DeleteOneFailoverRequestType) (*DeleteOneFailoverResponseType, error) {
	return service.DeleteOneFailoverContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ActivateFailoverContext(ctx context.Context, request *ActivateFailoverRequestType) (*ActivateFailoverResponseType, error) {
	response := new(ActivateFailoverResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ActivateFailover(request *ActivateFailoverRequestType) (*ActivateFailoverResponseType, error) {
	return service.ActivateFailoverContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeactivateFailoverContext(ctx context.Context, request *DeactivateFailoverRequestType) (*DeactivateFailoverResponseType, error) {
	response := new(DeactivateFailoverResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeactivateFailover(request *DeactivateFailoverRequestType) (*DeactivateFailoverResponseType, error) {
	return service.DeactivateFailoverContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RecoverFailoverContext(ctx context.Context, request *RecoverFailoverRequestType) (*RecoverFailoverResponseType, error) {
	response := new(RecoverFailoverResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RecoverFailover(request *RecoverFailoverRequestType) (*RecoverFailoverResponseType, error) {
	return service.RecoverFailoverContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateLoadBalanceContext(ctx context.Context, request *CreateLoadBalanceRequestType) (*CreateLoadBalanceResponseType, error) {
	response := new(CreateLoadBalanceResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateLoadBalance(request *CreateLoadBalanceRequestType) (*CreateLoadBalanceResponseType, error) {
	return service.CreateLoadBalanceContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneLoadBalanceContext(ctx context.Context, request *GetOneLoadBalanceRequestType) (*GetOneLoadBalanceResponseType, error) {
	response := new(GetOneLoadBalanceResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneLoadBalance(request *GetOneLoadBalanceRequestType) (*GetOneLoadBalanceResponseType, error) {
	return service.GetOneLoadBalanceContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetLoadBalancesContext(ctx context.Context, request *GetLoadBalancesRequestType) (*GetLoadBalancesResponseType, error) {
	response := new(GetLoadBalancesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetLoadBalances(request *GetLoadBalancesRequestType) (*GetLoadBalancesResponseType, error) {
	return service.GetLoadBalancesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateLoadBalanceContext(ctx context.Context, request *UpdateLoadBalanceRequestType) (*UpdateLoadBalanceResponseType, error) {
	response := new(UpdateLoadBalanceResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateLoadBalance(request *UpdateLoadBalanceRequestType) (*UpdateLoadBalanceResponseType, error) {
	return service.UpdateLoadBalanceContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneLoadBalanceContext(ctx context.Context, request *DeleteOneLoadBalanceRequestType) (*DeleteOneLoadBalanceResponseType, error) {
	response := new(DeleteOneLoadBalanceResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneLoadBalance(request *DeleteOneLoadBalanceRequestType) (*DeleteOneLoadBalanceResponseType, error) {
	return service.DeleteOneLoadBalanceContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ActivateLoadBalanceContext(ctx context.Context, request *ActivateLoadBalanceRequestType) (*ActivateLoadBalanceResponseType, error) {
	response := new(ActivateLoadBalanceResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ActivateLoadBalance(request *ActivateLoadBalanceRequestType) (*ActivateLoadBalanceResponseType, error) {
	return service.ActivateLoadBalanceContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeactivateLoadBalanceContext(ctx context.Context, request *DeactivateLoadBalanceRequestType) (*DeactivateLoadBalanceResponseType, error) {
	response := new(DeactivateLoadBalanceResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeactivateLoadBalance(request *DeactivateLoadBalanceRequestType) (*DeactivateLoadBalanceResponseType, error) {
	return service.DeactivateLoadBalanceContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RecoverLoadBalanceContext(ctx context.Context, request *RecoverLoadBalanceRequestType) (*RecoverLoadBalanceResponseType, error) {
	response := new(RecoverLoadBalanceResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RecoverLoadBalance(request *RecoverLoadBalanceRequestType) (*RecoverLoadBalanceResponseType, error) {
	return service.RecoverLoadBalanceContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RecoverLoadBalanceIPContext(ctx context.Context, request *RecoverLoadBalanceIPRequestType) (*RecoverLoadBalanceIPResponseType, error) {
	response := new(RecoverLoadBalanceIPResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RecoverLoadBalanceIP(request *RecoverLoadBalanceIPRequestType) (*RecoverLoadBalanceIPResponseType, error) {
	return service.RecoverLoadBalanceIPContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateLoadBalancePoolEntryContext(ctx context.Context, request *CreateLoadBalancePoolEntryRequestType) (*CreateLoadBalancePoolEntryResponseType, error) {
	response := new(CreateLoadBalancePoolEntryResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateLoadBalancePoolEntry(request *CreateLoadBalancePoolEntryRequestType) (*CreateLoadBalancePoolEntryResponseType, error) {
	return service.CreateLoadBalancePoolEntryContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateLoadBalancePoolEntryContext(ctx context.Context, request *UpdateLoadBalancePoolEntryRequestType) (*UpdateLoadBalancePoolEntryResponseType, error) {
	response := new(UpdateLoadBalancePoolEntryResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateLoadBalancePoolEntry(request *UpdateLoadBalancePoolEntryRequestType) (*UpdateLoadBalancePoolEntryResponseType, error) {
	return service.UpdateLoadBalancePoolEntryContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneLoadBalancePoolEntryContext(ctx context.Context, request *GetOneLoadBalancePoolEntryRequestType) (*GetOneLoadBalancePoolEntryResponseType, error) {
	response := new(GetOneLoadBalancePoolEntryResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneLoadBalancePoolEntry(request *GetOneLoadBalancePoolEntryRequestType) (*GetOneLoadBalancePoolEntryResponseType, error) {
	return service.GetOneLoadBalancePoolEntryContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetLoadBalancePoolEntriesContext(ctx context.Context, request *GetLoadBalancePoolEntriesRequestType) (*GetLoadBalancePoolEntriesResponseType, error) {
	response := new(GetLoadBalancePoolEntriesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetLoadBalancePoolEntries(request *GetLoadBalancePoolEntriesRequestType) (*GetLoadBalancePoolEntriesResponseType, error) {
	return service.GetLoadBalancePoolEntriesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneLoadBalancePoolEntryContext(ctx context.Context, request *DeleteOneLoadBalancePoolEntryRequestType) (*DeleteOneLoadBalancePoolEntryResponseType, error) {
	response := new(DeleteOneLoadBalancePoolEntryResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneLoadBalancePoolEntry(request *DeleteOneLoadBalancePoolEntryRequestType) (*DeleteOneLoadBalancePoolEntryResponseType, error) {
	return service.DeleteOneLoadBalancePoolEntryContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateGSLBContext(ctx context.Context, request *CreateGSLBRequestType) (*CreateGSLBResponseType, error) {
	response := new(CreateGSLBResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateGSLB(request *CreateGSLBRequestType) (*CreateGSLBResponseType, error) {
	return service.CreateGSLBContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneGSLBContext(ctx context.Context, request *GetOneGSLBRequestType) (*GetOneGSLBResponseType, error) {
	response := new(GetOneGSLBResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneGSLB(request *GetOneGSLBRequestType) (*GetOneGSLBResponseType, error) {
	return service.GetOneGSLBContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetGSLBsContext(ctx context.Context, request *GetGSLBsRequestType) (*GetGSLBsResponseType, error) {
	response := new(GetGSLBsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetGSLBs(request *GetGSLBsRequestType) (*GetGSLBsResponseType, error) {
	return service.GetGSLBsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateGSLBContext(ctx context.Context, request *UpdateGSLBRequestType) (*UpdateGSLBResponseType, error) {
	response := new(UpdateGSLBResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateGSLB(request *UpdateGSLBRequestType) (*UpdateGSLBResponseType, error) {
	return service.UpdateGSLBContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneGSLBContext(ctx context.Context, request *DeleteOneGSLBRequestType) (*DeleteOneGSLBResponseType, error) {
	response := new(DeleteOneGSLBResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneGSLB(request *DeleteOneGSLBRequestType) (*DeleteOneGSLBResponseType, error) {
	return service.DeleteOneGSLBContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ActivateGSLBContext(ctx context.Context, request *ActivateGSLBRequestType) (*ActivateGSLBResponseType, error) {
	response := new(ActivateGSLBResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ActivateGSLB(request *ActivateGSLBRequestType) (*ActivateGSLBResponseType, error) {
	return service.ActivateGSLBContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeactivateGSLBContext(ctx context.Context, request *DeactivateGSLBRequestType) (*DeactivateGSLBResponseType, error) {
	response := new(DeactivateGSLBResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeactivateGSLB(request *DeactivateGSLBRequestType) (*DeactivateGSLBResponseType, error) {
	return service.DeactivateGSLBContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RecoverGSLBContext(ctx context.Context, request *RecoverGSLBRequestType) (*RecoverGSLBResponseType, error) {
	response := new(RecoverGSLBResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RecoverGSLB(request *RecoverGSLBRequestType) (*RecoverGSLBResponseType, error) {
	return service.RecoverGSLBContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RecoverGSLBIPContext(ctx context.Context, request *RecoverGSLBIPRequestType) (*RecoverGSLBIPResponseType, error) {
	response := new(RecoverGSLBIPResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RecoverGSLBIP(request *RecoverGSLBIPRequestType) (*RecoverGSLBIPResponseType, error) {
	return service.RecoverGSLBIPContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateGSLBRegionContext(ctx context.Context, request *CreateGSLBRegionRequestType) (*CreateGSLBRegionResponseType, error) {
	response := new(CreateGSLBRegionResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateGSLBRegion(request *CreateGSLBRegionRequestType) (*CreateGSLBRegionResponseType, error) {
	return service.CreateGSLBRegionContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneGSLBRegionContext(ctx context.Context, request *GetOneGSLBRegionRequestType) (*GetOneGSLBRegionResponseType, error) {
	response := new(GetOneGSLBRegionResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneGSLBRegion(request *GetOneGSLBRegionRequestType) (*GetOneGSLBRegionResponseType, error) {
	return service.GetOneGSLBRegionContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetGSLBRegionsContext(ctx context.Context, request *GetGSLBRegionsRequestType) (*GetGSLBRegionsResponseType, error) {
	response := new(GetGSLBRegionsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetGSLBRegions(request *GetGSLBRegionsRequestType) (*GetGSLBRegionsResponseType, error) {
	return service.GetGSLBRegionsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateGSLBRegionContext(ctx context.Context, request *UpdateGSLBRegionRequestType) (*UpdateGSLBRegionResponseType, error) {
	response := new(UpdateGSLBRegionResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateGSLBRegion(request *UpdateGSLBRegionRequestType) (*UpdateGSLBRegionResponseType, error) {
	return service.UpdateGSLBRegionContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneGSLBRegionContext(ctx context.Context, request *DeleteOneGSLBRegionRequestType) (*DeleteOneGSLBRegionResponseType, error) {
	response := new(DeleteOneGSLBRegionResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneGSLBRegion(request *DeleteOneGSLBRegionRequestType) (*DeleteOneGSLBRegionResponseType, error) {
	return service.DeleteOneGSLBRegionContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateGSLBRegionPoolEntryContext(ctx context.Context, request *CreateGSLBRegionPoolEntryRequestType) (*CreateGSLBRegionPoolEntryResponseType, error) {
	response := new(CreateGSLBRegionPoolEntryResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateGSLBRegionPoolEntry(request *CreateGSLBRegionPoolEntryRequestType) (*CreateGSLBRegionPoolEntryResponseType, error) {
	return service.CreateGSLBRegionPoolEntryContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateGSLBRegionPoolEntryContext(ctx context.Context, request *UpdateGSLBRegionPoolEntryRequestType) (*UpdateGSLBRegionPoolEntryResponseType, error) {
	response := new(UpdateGSLBRegionPoolEntryResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateGSLBRegionPoolEntry(request *UpdateGSLBRegionPoolEntryRequestType) (*UpdateGSLBRegionPoolEntryResponseType, error) {
	return service.UpdateGSLBRegionPoolEntryContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneGSLBRegionPoolEntryContext(ctx context.Context, request *GetOneGSLBRegionPoolEntryRequestType) (*GetOneGSLBRegionPoolEntryResponseType, error) {
	response := new(GetOneGSLBRegionPoolEntryResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneGSLBRegionPoolEntry(request *GetOneGSLBRegionPoolEntryRequestType) (*GetOneGSLBRegionPoolEntryResponseType, error) {
	return service.GetOneGSLBRegionPoolEntryContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetGSLBRegionPoolEntriesContext(ctx context.Context, request *GetGSLBRegionPoolEntriesRequestType) (*GetGSLBRegionPoolEntriesResponseType, error) {
	response := new(GetGSLBRegionPoolEntriesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetGSLBRegionPoolEntries(request *GetGSLBRegionPoolEntriesRequestType) (*GetGSLBRegionPoolEntriesResponseType, error) {
	return service.GetGSLBRegionPoolEntriesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneGSLBRegionPoolEntryContext(ctx context.Context, request *DeleteOneGSLBRegionPoolEntryRequestType) (*DeleteOneGSLBRegionPoolEntryResponseType, error) {
	response := new(DeleteOneGSLBRegionPoolEntryResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneGSLBRegionPoolEntry(request *DeleteOneGSLBRegionPoolEntryRequestType) (*DeleteOneGSLBRegionPoolEntryResponseType, error) {
	return service.DeleteOneGSLBRegionPoolEntryContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateRTTMContext(ctx context.Context, request *CreateRTTMRequestType) (*CreateRTTMResponseType, error) {
	response := new(CreateRTTMResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateRTTM(request *CreateRTTMRequestType) (*CreateRTTMResponseType, error) {
	return service.CreateRTTMContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneRTTMContext(ctx context.Context, request *GetOneRTTMRequestType) (*GetOneRTTMResponseType, error) {
	response := new(GetOneRTTMResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneRTTM(request *GetOneRTTMRequestType) (*GetOneRTTMResponseType, error) {
	return service.GetOneRTTMContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetRTTMsContext(ctx context.Context, request *GetRTTMsRequestType) (*GetRTTMsResponseType, error) {
	response := new(GetRTTMsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetRTTMs(request *GetRTTMsRequestType) (*GetRTTMsResponseType, error) {
	return service.GetRTTMsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateRTTMContext(ctx context.Context, request *UpdateRTTMRequestType) (*UpdateRTTMResponseType, error) {
	response := new(UpdateRTTMResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateRTTM(request *UpdateRTTMRequestType) (*UpdateRTTMResponseType, error) {
	return service.UpdateRTTMContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneRTTMContext(ctx context.Context, request *DeleteOneRTTMRequestType) (*DeleteOneRTTMResponseType, error) {
	response := new(DeleteOneRTTMResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneRTTM(request *DeleteOneRTTMRequestType) (*DeleteOneRTTMResponseType, error) {
	return service.DeleteOneRTTMContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ActivateRTTMContext(ctx context.Context, request *ActivateRTTMRequestType) (*ActivateRTTMResponseType, error) {
	response := new(ActivateRTTMResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ActivateRTTM(request *ActivateRTTMRequestType) (*ActivateRTTMResponseType, error) {
	return service.ActivateRTTMContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeactivateRTTMContext(ctx context.Context, request *DeactivateRTTMRequestType) (*DeactivateRTTMResponseType, error) {
	response := new(DeactivateRTTMResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeactivateRTTM(request *DeactivateRTTMRequestType) (*DeactivateRTTMResponseType, error) {
	return service.DeactivateRTTMContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RecoverRTTMContext(ctx context.Context, request *RecoverRTTMRequestType) (*RecoverRTTMResponseType, error) {
	response := new(RecoverRTTMResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RecoverRTTM(request *RecoverRTTMRequestType) (*RecoverRTTMResponseType, error) {
	return service.RecoverRTTMContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RecoverRTTMIPContext(ctx context.Context, request *RecoverRTTMIPRequestType) (*RecoverRTTMIPResponseType, error) {
	response := new(RecoverRTTMIPResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RecoverRTTMIP(request *RecoverRTTMIPRequestType) (*RecoverRTTMIPResponseType, error) {
	return service.RecoverRTTMIPContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetRTTMLogsContext(ctx context.Context, request *GetRTTMLogsRequestType) (*GetRTTMLogsResponseType, error) {
	response := new(GetRTTMLogsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetRTTMLogs(request *GetRTTMLogsRequestType) (*GetRTTMLogsResponseType, error) {
	return service.GetRTTMLogsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetRTTMRRSetsContext(ctx context.Context, request *GetRTTMRRSetsRequestType) (*GetRTTMRRSetsResponseType, error) {
	response := new(GetRTTMRRSetsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetRTTMRRSets(request *GetRTTMRRSetsRequestType) (*GetRTTMRRSetsResponseType, error) {
	return service.GetRTTMRRSetsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateRTTMRegionContext(ctx context.Context, request *CreateRTTMRegionRequestType) (*CreateRTTMRegionResponseType, error) {
	response := new(CreateRTTMRegionResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateRTTMRegion(request *CreateRTTMRegionRequestType) (*CreateRTTMRegionResponseType, error) {
	return service.CreateRTTMRegionContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneRTTMRegionContext(ctx context.Context, request *GetOneRTTMRegionRequestType) (*GetOneRTTMRegionResponseType, error) {
	response := new(GetOneRTTMRegionResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneRTTMRegion(request *GetOneRTTMRegionRequestType) (*GetOneRTTMRegionResponseType, error) {
	return service.GetOneRTTMRegionContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetRTTMRegionsContext(ctx context.Context, request *GetRTTMRegionsRequestType) (*GetRTTMRegionsResponseType, error) {
	response := new(GetRTTMRegionsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetRTTMRegions(request *GetRTTMRegionsRequestType) (*GetRTTMRegionsResponseType, error) {
	return service.GetRTTMRegionsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateRTTMRegionContext(ctx context.Context, request *UpdateRTTMRegionRequestType) (*UpdateRTTMRegionResponseType, error) {
	response := new(UpdateRTTMRegionResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateRTTMRegion(request *UpdateRTTMRegionRequestType) (*UpdateRTTMRegionResponseType, error) {
	return service.UpdateRTTMRegionContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneRTTMRegionContext(ctx context.Context, request *DeleteOneRTTMRegionRequestType) (*DeleteOneRTTMRegionResponseType, error) {
	response := new(DeleteOneRTTMRegionResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneRTTMRegion(request *DeleteOneRTTMRegionRequestType) (*DeleteOneRTTMRegionResponseType, error) {
	return service.DeleteOneRTTMRegionContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateRTTMRegionPoolEntryContext(ctx context.Context, request *CreateRTTMRegionPoolEntryRequestType) (*CreateRTTMRegionPoolEntryResponseType, error) {
	response := new(CreateRTTMRegionPoolEntryResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateRTTMRegionPoolEntry(request *CreateRTTMRegionPoolEntryRequestType) (*CreateRTTMRegionPoolEntryResponseType, error) {
	return service.CreateRTTMRegionPoolEntryContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateRTTMRegionPoolEntryContext(ctx context.Context, request *UpdateRTTMRegionPoolEntryRequestType) (*UpdateRTTMRegionPoolEntryResponseType, error) {
	response := new(UpdateRTTMRegionPoolEntryResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateRTTMRegionPoolEntry(request *UpdateRTTMRegionPoolEntryRequestType) (*UpdateRTTMRegionPoolEntryResponseType, error) {
	return service.UpdateRTTMRegionPoolEntryContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneRTTMRegionPoolEntryContext(ctx context.Context, request *GetOneRTTMRegionPoolEntryRequestType) (*GetOneRTTMRegionPoolEntryResponseType, error) {
	response := new(GetOneRTTMRegionPoolEntryResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneRTTMRegionPoolEntry(request *GetOneRTTMRegionPoolEntryRequestType) (*GetOneRTTMRegionPoolEntryResponseType, error) {
	return service.GetOneRTTMRegionPoolEntryContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetRTTMRegionPoolEntriesContext(ctx context.Context, request *GetRTTMRegionPoolEntriesRequestType) (*GetRTTMRegionPoolEntriesResponseType, error) {
	response := new(GetRTTMRegionPoolEntriesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetRTTMRegionPoolEntries(request *GetRTTMRegionPoolEntriesRequestType) (*GetRTTMRegionPoolEntriesResponseType, error) {
	return service.GetRTTMRegionPoolEntriesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneRTTMRegionPoolEntryContext(ctx context.Context, request *DeleteOneRTTMRegionPoolEntryRequestType) (*DeleteOneRTTMRegionPoolEntryResponseType, error) {
	response := new(DeleteOneRTTMRegionPoolEntryResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneRTTMRegionPoolEntry(request *DeleteOneRTTMRegionPoolEntryRequestType) (*DeleteOneRTTMRegionPoolEntryResponseType, error) {
	return service.DeleteOneRTTMRegionPoolEntryContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateHTTPRedirectContext(ctx context.Context, request *CreateHTTPRedirectRequestType) (*CreateHTTPRedirectResponseType, error) {
	response := new(CreateHTTPRedirectResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateHTTPRedirect(request *CreateHTTPRedirectRequestType) (*CreateHTTPRedirectResponseType, error) {
	return service.CreateHTTPRedirectContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneHTTPRedirectContext(ctx context.Context, request *GetOneHTTPRedirectRequestType) (*GetOneHTTPRedirectResponseType, error) {
	response := new(GetOneHTTPRedirectResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneHTTPRedirect(request *GetOneHTTPRedirectRequestType) (*GetOneHTTPRedirectResponseType, error) {
	return service.GetOneHTTPRedirectContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetHTTPRedirectsContext(ctx context.Context, request *GetHTTPRedirectsRequestType) (*GetHTTPRedirectsResponseType, error) {
	response := new(GetHTTPRedirectsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetHTTPRedirects(request *GetHTTPRedirectsRequestType) (*GetHTTPRedirectsResponseType, error) {
	return service.GetHTTPRedirectsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateHTTPRedirectContext(ctx context.Context, request *UpdateHTTPRedirectRequestType) (*UpdateHTTPRedirectResponseType, error) {
	response := new(UpdateHTTPRedirectResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateHTTPRedirect(request *UpdateHTTPRedirectRequestType) (*UpdateHTTPRedirectResponseType, error) {
	return service.UpdateHTTPRedirectContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneHTTPRedirectContext(ctx context.Context, request *DeleteOneHTTPRedirectRequestType) (*DeleteOneHTTPRedirectResponseType, error) {
	response := new(DeleteOneHTTPRedirectResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneHTTPRedirect(request *DeleteOneHTTPRedirectRequestType) (*DeleteOneHTTPRedirectResponseType, error) {
	return service.DeleteOneHTTPRedirectContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateAdvRedirectRuleContext(ctx context.Context, request *CreateAdvRedirectRuleRequestType) (*CreateAdvRedirectRuleResponseType, error) {
	response := new(CreateAdvRedirectRuleResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateAdvRedirectRule(request *CreateAdvRedirectRuleRequestType) (*CreateAdvRedirectRuleResponseType, error) {
	return service.CreateAdvRedirectRuleContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateAdvRedirectRuleContext(ctx context.Context, request *UpdateAdvRedirectRuleRequestType) (*UpdateAdvRedirectRuleResponseType, error) {
	response := new(UpdateAdvRedirectRuleResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateAdvRedirectRule(request *UpdateAdvRedirectRuleRequestType) (*UpdateAdvRedirectRuleResponseType, error) {
	return service.UpdateAdvRedirectRuleContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneAdvRedirectRuleContext(ctx context.Context, request *GetOneAdvRedirectRuleRequestType) (*GetOneAdvRedirectRuleResponseType, error) {
	response := new(GetOneAdvRedirectRuleResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneAdvRedirectRule(request *GetOneAdvRedirectRuleRequestType) (*GetOneAdvRedirectRuleResponseType, error) {
	return service.GetOneAdvRedirectRuleContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetAdvRedirectRulesContext(ctx context.Context, request *GetAdvRedirectRulesRequestType) (*GetAdvRedirectRulesResponseType, error) {
	response := new(GetAdvRedirectRulesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetAdvRedirectRules(request *GetAdvRedirectRulesRequestType) (*GetAdvRedirectRulesResponseType, error) {
	return service.GetAdvRedirectRulesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneAdvRedirectRuleContext(ctx context.Context, request *DeleteOneAdvRedirectRuleRequestType) (*DeleteOneAdvRedirectRuleResponseType, error) {
	response := new(DeleteOneAdvRedirectRuleResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneAdvRedirectRule(request *DeleteOneAdvRedirectRuleRequestType) (*DeleteOneAdvRedirectRuleResponseType, error) {
	return service.DeleteOneAdvRedirectRuleContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateAdvRedirectContext(ctx context.Context, request *CreateAdvRedirectRequestType) (*CreateAdvRedirectResponseType, error) {
	response := new(CreateAdvRedirectResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateAdvRedirect(request *CreateAdvRedirectRequestType) (*CreateAdvRedirectResponseType, error) {
	return service.CreateAdvRedirectContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneAdvRedirectContext(ctx context.Context, request *GetOneAdvRedirectRequestType) (*GetOneAdvRedirectResponseType, error) {
	response := new(GetOneAdvRedirectResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneAdvRedirect(request *GetOneAdvRedirectRequestType) (*GetOneAdvRedirectResponseType, error) {
	return service.GetOneAdvRedirectContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetAdvRedirectsContext(ctx context.Context, request *GetAdvRedirectsRequestType) (*GetAdvRedirectsResponseType, error) {
	response := new(GetAdvRedirectsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetAdvRedirects(request *GetAdvRedirectsRequestType) (*GetAdvRedirectsResponseType, error) {
	return service.GetAdvRedirectsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateAdvRedirectContext(ctx context.Context, request *UpdateAdvRedirectRequestType) (*UpdateAdvRedirectResponseType, error) {
	response := new(UpdateAdvRedirectResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateAdvRedirect(request *UpdateAdvRedirectRequestType) (*UpdateAdvRedirectResponseType, error) {
	return service.UpdateAdvRedirectContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneAdvRedirectContext(ctx context.Context, request *DeleteOneAdvRedirectRequestType) (*DeleteOneAdvRedirectResponseType, error) {
	response := new(DeleteOneAdvRedirectResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneAdvRedirect(request *DeleteOneAdvRedirectRequestType) (*DeleteOneAdvRedirectResponseType, error) {
	return service.DeleteOneAdvRedirectContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetNodeListContext(ctx context.Context, request *GetNodeListRequestType) (*GetNodeListResponseType, error) {
	response := new(GetNodeListResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetNodeList(request *GetNodeListRequestType) (*GetNodeListResponseType, error) {
	return service.GetNodeListContext(
		context.Background(),
		request,
	)
}

func (service *dynect) PublishZoneContext(ctx context.Context, request *PublishZoneRequestType) (*PublishZoneResponseType, error) {
	response := new(PublishZoneResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) PublishZone(request *PublishZoneRequestType) (*PublishZoneResponseType, error) {
	return service.PublishZoneContext(
		context.Background(),
		request,
	)
}

func (service *dynect) PruneZoneContext(ctx context.Context, request *PruneZoneRequestType) (*PruneZoneResponseType, error) {
	response := new(PruneZoneResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) PruneZone(request *PruneZoneRequestType) (*PruneZoneResponseType, error) {
	return service.PruneZoneContext(
		context.Background(),
		request,
	)
}

func (service *dynect) FreezeZoneContext(ctx context.Context, request *FreezeZoneRequestType) (*FreezeZoneResponseType, error) {
	response := new(FreezeZoneResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) FreezeZone(request *FreezeZoneRequestType) (*FreezeZoneResponseType, error) {
	return service.FreezeZoneContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ThawZoneContext(ctx context.Context, request *ThawZoneRequestType) (*ThawZoneResponseType, error) {
	response := new(ThawZoneResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ThawZone(request *ThawZoneRequestType) (*ThawZoneResponseType, error) {
	return service.ThawZoneContext(
		context.Background(),
		request,
	)
}

func (service *dynect) RestoreZoneContext(ctx context.Context, request *RestoreZoneRequestType) (*RestoreZoneResponseType, error) {
	response := new(RestoreZoneResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) RestoreZone(request *RestoreZoneRequestType) (*RestoreZoneResponseType, error) {
	return service.RestoreZoneContext(
		context.Background(),
		request,
	)
}

func (service *dynect) BlockZoneContext(ctx context.Context, request *BlockZoneRequestType) (*BlockZoneResponseType, error) {
	response := new(BlockZoneResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) BlockZone(request *BlockZoneRequestType) (*BlockZoneResponseType, error) {
	return service.BlockZoneContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteZoneChangesetContext(ctx context.Context, request *DeleteZoneChangesetRequestType) (*DeleteZoneChangesetResponseType, error) {
	response := new(DeleteZoneChangesetResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteZoneChangeset(request *DeleteZoneChangesetRequestType) (*DeleteZoneChangesetResponseType, error) {
	return service.DeleteZoneChangesetContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetZoneChangesetContext(ctx context.Context, request *GetZoneChangesetRequestType) (*GetZoneChangesetResponseType, error) {
	response := new(GetZoneChangesetResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetZoneChangeset(request *GetZoneChangesetRequestType) (*GetZoneChangesetResponseType, error) {
	return service.GetZoneChangesetContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetZoneNotesContext(ctx context.Context, request *GetZoneNotesRequestType) (*GetZoneNotesResponseType, error) {
	response := new(GetZoneNotesResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetZoneNotes(request *GetZoneNotesRequestType) (*GetZoneNotesResponseType, error) {
	return service.GetZoneNotesContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UploadZoneFileContext(ctx context.Context, request *UploadZoneFileRequestType) (*UploadZoneFileResponseType, error) {
	response := new(UploadZoneFileResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UploadZoneFile(request *UploadZoneFileRequestType) (*UploadZoneFileResponseType, error) {
	return service.UploadZoneFileContext(
		context.Background(),
		request,
	)
}

func (service *dynect) TransferZoneInContext(ctx context.Context, request *TransferZoneInRequestType) (*TransferZoneInResponseType, error) {
	response := new(TransferZoneInResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) TransferZoneIn(request *TransferZoneInRequestType) (*TransferZoneInResponseType, error) {
	return service.TransferZoneInContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetTransferStatusContext(ctx context.Context, request *GetTransferStatusRequestType) (*GetTransferStatusResponseType, error) {
	response := new(GetTransferStatusResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetTransferStatus(request *GetTransferStatusRequestType) (*GetTransferStatusResponseType, error) {
	return service.GetTransferStatusContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetZoneConfigOptionsContext(ctx context.Context, request *GetZoneConfigOptionsRequestType) (*GetZoneConfigOptionsResponseType, error) {
	response := new(GetZoneConfigOptionsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetZoneConfigOptions(request *GetZoneConfigOptionsRequestType) (*GetZoneConfigOptionsResponseType, error) {
	return service.GetZoneConfigOptionsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) SetZoneConfigOptionsContext(ctx context.Context, request *SetZoneConfigOptionsRequestType) (*SetZoneConfigOptionsResponseType, error) {
	response := new(SetZoneConfigOptionsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) SetZoneConfigOptions(request *SetZoneConfigOptionsRequestType) (*SetZoneConfigOptionsResponseType, error) {
	return service.SetZoneConfigOptionsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateIPTrackContext(ctx context.Context, request *CreateIPTrackRequestType) (*CreateIPTrackResponseType, error) {
	response := new(CreateIPTrackResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateIPTrack(request *CreateIPTrackRequestType) (*CreateIPTrackResponseType, error) {
	return service.CreateIPTrackContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneIPTrackContext(ctx context.Context, request *GetOneIPTrackRequestType) (*GetOneIPTrackResponseType, error) {
	response := new(GetOneIPTrackResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneIPTrack(request *GetOneIPTrackRequestType) (*GetOneIPTrackResponseType, error) {
	return service.GetOneIPTrackContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetIPTracksContext(ctx context.Context, request *GetIPTracksRequestType) (*GetIPTracksResponseType, error) {
	response := new(GetIPTracksResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetIPTracks(request *GetIPTracksRequestType) (*GetIPTracksResponseType, error) {
	return service.GetIPTracksContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateIPTrackContext(ctx context.Context, request *UpdateIPTrackRequestType) (*UpdateIPTrackResponseType, error) {
	response := new(UpdateIPTrackResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateIPTrack(request *UpdateIPTrackRequestType) (*UpdateIPTrackResponseType, error) {
	return service.UpdateIPTrackContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneIPTrackContext(ctx context.Context, request *DeleteOneIPTrackRequestType) (*DeleteOneIPTrackResponseType, error) {
	response := new(DeleteOneIPTrackResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneIPTrack(request *DeleteOneIPTrackRequestType) (*DeleteOneIPTrackResponseType, error) {
	return service.DeleteOneIPTrackContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ActivateIPTrackContext(ctx context.Context, request *ActivateIPTrackRequestType) (*ActivateIPTrackResponseType, error) {
	response := new(ActivateIPTrackResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ActivateIPTrack(request *ActivateIPTrackRequestType) (*ActivateIPTrackResponseType, error) {
	return service.ActivateIPTrackContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeactivateIPTrackContext(ctx context.Context, request *DeactivateIPTrackRequestType) (*DeactivateIPTrackResponseType, error) {
	response := new(DeactivateIPTrackResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeactivateIPTrack(request *DeactivateIPTrackRequestType) (*DeactivateIPTrackResponseType, error) {
	return service.DeactivateIPTrackContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateDNSSECContext(ctx context.Context, request *CreateDNSSECRequestType) (*CreateDNSSECResponseType, error) {
	response := new(CreateDNSSECResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateDNSSEC(request *CreateDNSSECRequestType) (*CreateDNSSECResponseType, error) {
	return service.CreateDNSSECContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneDNSSECContext(ctx context.Context, request *GetOneDNSSECRequestType) (*GetOneDNSSECResponseType, error) {
	response := new(GetOneDNSSECResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneDNSSEC(request *GetOneDNSSECRequestType) (*GetOneDNSSECResponseType, error) {
	return service.GetOneDNSSECContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetDNSSECsContext(ctx context.Context, request *GetDNSSECsRequestType) (*GetDNSSECsResponseType, error) {
	response := new(GetDNSSECsResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetDNSSECs(request *GetDNSSECsRequestType) (*GetDNSSECsResponseType, error) {
	return service.GetDNSSECsContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateDNSSECContext(ctx context.Context, request *UpdateDNSSECRequestType) (*UpdateDNSSECResponseType, error) {
	response := new(UpdateDNSSECResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateDNSSEC(request *UpdateDNSSECRequestType) (*UpdateDNSSECResponseType, error) {
	return service.UpdateDNSSECContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneDNSSECContext(ctx context.Context, request *DeleteOneDNSSECRequestType) (*DeleteOneDNSSECResponseType, error) {
	response := new(DeleteOneDNSSECResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneDNSSEC(request *DeleteOneDNSSECRequestType) (*DeleteOneDNSSECResponseType, error) {
	return service.DeleteOneDNSSECContext(
		context.Background(),
		request,
	)
}

func (service *dynect) ActivateDNSSECContext(ctx context.Context, request *ActivateDNSSECRequestType) (*ActivateDNSSECResponseType, error) {
	response := new(ActivateDNSSECResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) ActivateDNSSEC(request *ActivateDNSSECRequestType) (*ActivateDNSSECResponseType, error) {
	return service.ActivateDNSSECContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeactivateDNSSECContext(ctx context.Context, request *DeactivateDNSSECRequestType) (*DeactivateDNSSECResponseType, error) {
	response := new(DeactivateDNSSECResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeactivateDNSSEC(request *DeactivateDNSSECRequestType) (*DeactivateDNSSECResponseType, error) {
	return service.DeactivateDNSSECContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetDNSSECTimelineContext(ctx context.Context, request *GetDNSSECTimelineRequestType) (*GetDNSSECTimelineResponseType, error) {
	response := new(GetDNSSECTimelineResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetDNSSECTimeline(request *GetDNSSECTimelineRequestType) (*GetDNSSECTimelineResponseType, error) {
	return service.GetDNSSECTimelineContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetTasksContext(ctx context.Context, request *GetTasksRequestType) (*GetTasksResponseType, error) {
	response := new(GetTasksResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetTasks(request *GetTasksRequestType) (*GetTasksResponseType, error) {
	return service.GetTasksContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneTaskContext(ctx context.Context, request *GetOneTaskRequestType) (*GetOneTaskResponseType, error) {
	response := new(GetOneTaskResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneTask(request *GetOneTaskRequestType) (*GetOneTaskResponseType, error) {
	return service.GetOneTaskContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CancelTaskContext(ctx context.Context, request *CancelTaskRequestType) (*CancelTaskResponseType, error) {
	response := new(CancelTaskResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CancelTask(request *CancelTaskRequestType) (*CancelTaskResponseType, error) {
	return service.CancelTaskContext(
		context.Background(),
		request,
	)
}

func (service *dynect) CreateExtNameserverContext(ctx context.Context, request *CreateExtNameserverRequestType) (*CreateExtNameserverResponseType, error) {
	response := new(CreateExtNameserverResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) CreateExtNameserver(request *CreateExtNameserverRequestType) (*CreateExtNameserverResponseType, error) {
	return service.CreateExtNameserverContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetOneExtNameserverContext(ctx context.Context, request *GetOneExtNameserverRequestType) (*GetOneExtNameserverResponseType, error) {
	response := new(GetOneExtNameserverResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetOneExtNameserver(request *GetOneExtNameserverRequestType) (*GetOneExtNameserverResponseType, error) {
	return service.GetOneExtNameserverContext(
		context.Background(),
		request,
	)
}

func (service *dynect) GetExtNameserversContext(ctx context.Context, request *GetExtNameserversRequestType) (*GetExtNameserversResponseType, error) {
	response := new(GetExtNameserversResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) GetExtNameservers(request *GetExtNameserversRequestType) (*GetExtNameserversResponseType, error) {
	return service.GetExtNameserversContext(
		context.Background(),
		request,
	)
}

func (service *dynect) UpdateExtNameserverContext(ctx context.Context, request *UpdateExtNameserverRequestType) (*UpdateExtNameserverResponseType, error) {
	response := new(UpdateExtNameserverResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) UpdateExtNameserver(request *UpdateExtNameserverRequestType) (*UpdateExtNameserverResponseType, error) {
	return service.UpdateExtNameserverContext(
		context.Background(),
		request,
	)
}

func (service *dynect) DeleteOneExtNameserverContext(ctx context.Context, request *DeleteOneExtNameserverRequestType) (*DeleteOneExtNameserverResponseType, error) {
	response := new(DeleteOneExtNameserverResponseType)
	err := service.client.CallContext(ctx, "https://api2.dynect.net/SOAP/", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *dynect) DeleteOneExtNameserver(request *DeleteOneExtNameserverRequestType) (*DeleteOneExtNameserverResponseType, error) {
	return service.DeleteOneExtNameserverContext(
		context.Background(),
		request,
	)
}

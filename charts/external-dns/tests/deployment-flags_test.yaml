suite: Deployment flags configurations
templates:
  - deployment.yaml
release:
  namespace: default
tests:
  - it: should provide expected default flags
    asserts:
      # - matchSnapshot: {}
      - exists :
          path: spec.template.spec.containers[?(@.name == "external-dns")]
      - equal :
          path: spec.template.spec.containers[?(@.name == "external-dns")].args
          value:
            - --log-level=info
            - --log-format=text
            - --interval=1m
            - --source=service
            - --source=ingress
            - --policy=upsert-only
            - --registry=txt
            - --provider=aws

  - it: should configure txtPrefix and ignore txtSuffix if not empty
    set:
      provider:
        name: cloudflare
      txtPrefix: "test-prefix"
      txtSuffix: "test-suffix"
      txtOwnerId: "testing"
    asserts:
      - exists :
          path: spec.template.spec.containers[?(@.name == "external-dns")]
      - equal :
          path: spec.template.spec.containers[?(@.name == "external-dns")].args
          value:
            - --log-level=info
            - --log-format=text
            - --interval=1m
            - --source=service
            - --source=ingress
            - --policy=upsert-only
            - --registry=txt
            - --txt-owner-id=testing
            - --txt-prefix=test-prefix
            - --provider=cloudflare
      - notContains:
          path: spec.template.spec.containers[?(@.name == "external-dns")].args
          content: "--txt-suffix=test-suffix"

  - it: should configure 'txtSuffix' when not empty with 'txtPrefix' empty
    set:
      txtPrefix: ""
      txtSuffix: "test-suffix"
    asserts:
      - exists :
          path: spec.template.spec.containers[?(@.name == "external-dns")]
      - equal :
          path: spec.template.spec.containers[?(@.name == "external-dns")].args
          value:
            - --log-level=info
            - --log-format=text
            - --interval=1m
            - --source=service
            - --source=ingress
            - --policy=upsert-only
            - --registry=txt
            - --txt-suffix=test-suffix
            - --provider=aws
      - notContains:
          path: spec.template.spec.containers[?(@.name == "external-dns")].args
          content: "--txt-prefix=test-prefix"

  - it: should be able configure multiple sources
    set:
      sources:
        - fake
        - crd
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "external-dns")].args
          content: "--source=fake"
      - contains:
          path: spec.template.spec.containers[?(@.name == "external-dns")].args
          content: "--source=crd"

  - it: should be able to configure in single namespace
    set:
      namespaced: true
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "external-dns")].args
          content: "--namespace=default"

  - it: should manage multiple zones with 'extraArgs'
    set:
      extraArgs:
        - --zone-id-filter=/hostedzone/Z00001
        - --zone-id-filter=/hostedzone/Z00002
        - --zone-id-filter=/hostedzone/Z00003
        - --zone-id-filter=/hostedzone/Z00004
        - --zone-id-filter=/hostedzone/Z00005
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "external-dns")].args
          value:
            - --log-level=info
            - --log-format=text
            - --interval=1m
            - --source=service
            - --source=ingress
            - --policy=upsert-only
            - --registry=txt
            - --provider=aws
            - --zone-id-filter=/hostedzone/Z00001
            - --zone-id-filter=/hostedzone/Z00002
            - --zone-id-filter=/hostedzone/Z00003
            - --zone-id-filter=/hostedzone/Z00004
            - --zone-id-filter=/hostedzone/Z00005
